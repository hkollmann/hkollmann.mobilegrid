{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/qx_packages/qooxdoo_qxl_apiviewer_v2_0_0/source/class/qxl/apiviewer/ui/panels/ClassPanel.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "qxl",
    "apiviewer",
    "ui",
    "panels",
    "InfoPanel",
    "construct",
    "labelText",
    "properties",
    "type",
    "init",
    "check",
    "members",
    "canDisplayItem",
    "dao",
    "getType",
    "getItemTypeHtml",
    "node",
    "createItemLinkHtml",
    "getName",
    "getItemTitleHtml",
    "getFullName",
    "getItemTextHtml",
    "getDocNode",
    "showDetails",
    "resolveLinkAttributes",
    "getDescription",
    "createDescriptionHtml",
    "getItemTooltip",
    "classNode",
    "currentClassDocNode",
    "tooltip",
    "isAbstract",
    "isStatic",
    "isSingleton",
    "itemHasDetails",
    "descriptionHasDetails",
    "update",
    "classViewer",
    "getElement",
    "Promise",
    "resolve",
    "setDocNodeAsync",
    "then",
    "loadDependedClasses",
    "classes",
    "nodeArr",
    "clType",
    "i",
    "length",
    "push",
    "sortItems",
    "_displayNodes",
    "ClassPanel"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n     2018 Zenesis Limited, http://www.zenesis.com\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n     * John Spackman (johnspackman) of Zenesis Ltd (http://www.zenesis.com)\n\n************************************************************************ */\n\nqx.Class.define(\"qxl.apiviewer.ui.panels.ClassPanel\", {\n  extend: qxl.apiviewer.ui.panels.InfoPanel,\n\n  /**\n   * Creates class panel. An class panel shows information about classes, mixins\n   * and interfaces\n   *\n   * @param labelText {String} the label text describing the node type.\n   */\n  construct(labelText) {\n    super(labelText);\n  },\n\n  properties: {\n    type: {\n      init: \"class\",\n      check: [\"class\", \"mixin\", \"interface\"],\n    },\n  },\n\n  members: {\n    /**\n     * @Override\n     */\n    canDisplayItem(dao) {\n      if (!(dao instanceof qxl.apiviewer.dao.Class)) {\n        return false;\n      }\n      return dao.getType() == this.getType();\n    },\n\n    getItemTypeHtml(node) {\n      return qxl.apiviewer.ui.panels.InfoPanel.createItemLinkHtml(\n        node.getName(),\n        node,\n        false,\n        true\n      );\n    },\n\n    getItemTitleHtml(node) {\n      return node.getFullName();\n    },\n\n    getItemTextHtml(node, getDocNode, showDetails) {\n      if (showDetails) {\n        return qxl.apiviewer.ui.panels.InfoPanel.resolveLinkAttributes(\n          node.getDescription(),\n          node\n        );\n      }\n      return qxl.apiviewer.ui.panels.InfoPanel.createDescriptionHtml(\n        node,\n        node,\n        showDetails\n      );\n    },\n\n    getItemTooltip(classNode, currentClassDocNode) {\n      var tooltip;\n      if (classNode.isAbstract()) {\n        tooltip = \"Abstract \";\n      } else if (classNode.isStatic()) {\n        tooltip = \"Static \";\n      } else if (classNode.isSingleton()) {\n        tooltip = \"Singleton \";\n      } else {\n        tooltip = \"\";\n      }\n      switch (classNode.getType()) {\n        case \"mixin\":\n          tooltip += \"Mixin\";\n          break;\n\n        case \"interface\":\n          tooltip += \"Interface\";\n          break;\n\n        default:\n          tooltip += \"Class\";\n          break;\n      }\n\n      return tooltip;\n    },\n\n    itemHasDetails(node, currentClassDocNode) {\n      return qxl.apiviewer.ui.panels.InfoPanel.descriptionHasDetails(node);\n    },\n\n    /**\n     * Updates an info panel.\n     *\n     * @param classViewer {qxl.apiviewer.ui.ClassViewer} parent class viewer widget.\n     * @param currentClassDocNode {qxl.apiviewer.dao.Class} the currently displayed class\n     * @return {qx.Promise}\n     */\n    update(classViewer, currentClassDocNode) {\n      if (!this.getElement()) {\n        return qx.Promise.resolve(true);\n      }\n\n      return this.setDocNodeAsync(currentClassDocNode)\n        .then(() => currentClassDocNode.loadDependedClasses())\n        .then((classes) => {\n          var nodeArr = [];\n          var clType;\n          for (var i = 0; i < classes.length; i++) {\n            clType = classes[i].getType();\n\n            // Normalize pseudo-classes (for the user this detail is often not relevant)\n            if (clType === \"bootstrap\" || clType === \"list\") {\n              clType = \"class\";\n            }\n\n            if (clType === this.getType()) {\n              nodeArr.push(classes[i]);\n            }\n          }\n\n          if (nodeArr && nodeArr.length > 0) {\n            classViewer.sortItems(nodeArr);\n          }\n\n          this._displayNodes(nodeArr, currentClassDocNode);\n        });\n    },\n  },\n});\n"
  ]
}