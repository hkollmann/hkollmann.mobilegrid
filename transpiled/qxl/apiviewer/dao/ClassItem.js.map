{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/qx_packages/qooxdoo_qxl_apiviewer_v2_0_0/source/class/qxl/apiviewer/dao/ClassItem.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "qxl",
    "apiviewer",
    "dao",
    "Node",
    "construct",
    "meta",
    "parentClass",
    "name",
    "_class",
    "_name",
    "members",
    "getClass",
    "getName",
    "getFullName",
    "getTypes",
    "result",
    "arr",
    "_jsdoc",
    "map",
    "item",
    "type",
    "dims",
    "match",
    "dimensions",
    "length",
    "getSee",
    "body",
    "getOverriddenFrom",
    "_meta",
    "overriddenFrom",
    "getClassByName",
    "isRequiredByInterface",
    "ifaceNode",
    "Error",
    "classname",
    "getRequiredBy",
    "_requiredBy",
    "requiredBy",
    "interfaces",
    "getAllInterfaces",
    "j",
    "push",
    "destruct",
    "_itemDocNode",
    "_see",
    "_types",
    "ClassItem"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n     2018 Zenesis Limited, http://www.zenesis.com\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * John Spackman (johnspackman)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This Class wraps the access to the documentation data of a class item.\n */\nqx.Class.define(\"qxl.apiviewer.dao.ClassItem\", {\n  extend: qxl.apiviewer.dao.Node,\n\n  /**\n   * @param meta\n   * @param parentClass {qxl.apiviewer.dao.Class} reference to the class this item belongs to\n   * @param name {String} name of the list in the JSON structure of the class\n   */\n  construct(meta, parentClass, name) {\n    this.base(arguments, meta);\n    this._class = parentClass;\n    this._name = name;\n  },\n\n  members: {\n    _class: null,\n    _name: null,\n\n    /**\n     * Get the class, this item belongs to\n     *\n     * @return {qxl.apiviewer.dao.Class} the class this item belongs to\n     */\n    getClass() {\n      return this._class;\n    },\n\n    /**\n     * Get the name of the item.\n     *\n     * @return {String} name of the item\n     */\n    getName() {\n      return this._name;\n    },\n\n    getFullName() {\n      return this.getClass().getFullName() + \"#\" + this._name;\n    },\n\n    /**\n     * Get the types of the item.\n     *\n     * @return {Map[]} Array of types of the item. A type has the keys 'type' and 'dimensions', where\n     * dimensions is the number of array dimensions (eg \"Integer[][]\" has a type of \"Integer\" and\n     * dimensions of 2, and \"Integer\" has type if \"Integer\" but dimensions is undefined\n     */\n    getTypes() {\n      var result = [];\n      var arr = this._jsdoc[\"@param\"];\n      if (arr) {\n        arr.map((item) => {\n          var result = {\n            type: item.type,\n          };\n\n          if (result.type) {\n            var dims = result.type.match(/\\[\\]/g);\n            if (dims) {\n              result.dimensions = dims.length;\n            }\n          }\n          return result;\n        });\n      }\n      return result;\n    },\n\n    /**\n     * Get all references declared using the \"see\" attribute.\n     *\n     * @return {String[]} A list of all references declared using the \"see\" attribute.\n     */\n    getSee() {\n      return (this._jsdoc[\"@see\"] || []).map((item) => item.body);\n    },\n\n    /**\n     * If the item is overwridden from one of the super classes, get the item, which is overwridden.\n     *\n     * @return {ClassItem} the overwridden class item\n     */\n    getOverriddenFrom() {\n      return this._meta.overriddenFrom\n        ? qxl.apiviewer.dao.Class.getClassByName(this._meta.overriddenFrom)\n        : null;\n    },\n\n    /**\n     * Checks whether the node is required by the given interface.\n     *\n     * @param ifaceNode {qxl.apiviewer.dao.Class} interface to check for\n     * @return {Boolean} whether the item is required by the interface.\n     */\n    isRequiredByInterface(ifaceNode) {\n      throw new Error(\n        \"No implementation for \" + this.classname + \".isRequiredByInterface\"\n      );\n    },\n\n    /**\n     * Get the interface this item is required by.\n     *\n     * @return {qxl.apiviewer.dao.Class} The interface this item is required by.\n     */\n    getRequiredBy() {\n      if (this._requiredBy) {\n        return this._requiredBy;\n      }\n\n      var requiredBy = [];\n      var interfaces = this.getClass().getAllInterfaces(true);\n\n      for (var j = 0; j < interfaces.length; j++) {\n        if (this.isRequiredByInterface(interfaces[j])) {\n          requiredBy.push(interfaces[j]);\n        }\n      }\n      this._requiredBy = requiredBy;\n      return requiredBy;\n    },\n  },\n\n  /*\n  *****************************************************************************\n    DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._class =\n      this._itemDocNode =\n      this._requiredBy =\n      this._see =\n      this._types =\n        null;\n  },\n});\n"
  ]
}