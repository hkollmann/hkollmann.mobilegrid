{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/core/MEvent.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "__Registration",
    "event",
    "Registration",
    "addListener",
    "type",
    "listener",
    "self",
    "capture",
    "$$disposed",
    "addListenerOnce",
    "context",
    "id",
    "callback",
    "e",
    "removeListenerById",
    "call",
    "$$wrapped_callback",
    "toHashCode",
    "removeListener",
    "$$hash",
    "hasListener",
    "dispatchEvent",
    "evt",
    "fireEvent",
    "clazz",
    "args",
    "fireEventAsync",
    "Promise",
    "resolve",
    "fireNonBubblingEvent",
    "fireNonBubblingEventAsync",
    "fireDataEvent",
    "data",
    "oldData",
    "cancelable",
    "undefined",
    "Data",
    "fireDataEventAsync",
    "core",
    "MEvent"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * This mixin offers basic event handling capabilities. It includes the\n * commonly known methods for managing event listeners and firing events.\n *\n * @use(qx.event.dispatch.Direct)\n * @use(qx.event.handler.Object)\n */\nqx.Mixin.define(\"qx.core.MEvent\", {\n  members: {\n    /** @type {Class} Pointer to the regular event registration class */\n    __Registration: qx.event.Registration,\n\n    /**\n     * Add event listener to this object.\n     *\n     * @param type {String} name of the event type\n     * @param listener {Function} event callback function\n     * @param self {Object ? null} Reference to the 'this' variable inside\n     *         the event listener. When not given, the corresponding dispatcher\n     *         usually falls back to a default, which is the target\n     *         by convention. Note this is not a strict requirement, i.e.\n     *         custom dispatchers can follow a different strategy.\n     * @param capture {Boolean ? false} Whether to attach the event to the\n     *         capturing phase or the bubbling phase of the event. The default is\n     *         to attach the event handler to the bubbling phase.\n     * @return {String} An opaque id, which can be used to remove the event listener\n     *         using the {@link #removeListenerById} method.\n     */\n    addListener(type, listener, self, capture) {\n      if (!this.$$disposed) {\n        return this.__Registration.addListener(\n          this,\n          type,\n          listener,\n          self,\n          capture\n        );\n      }\n\n      return null;\n    },\n\n    /**\n     * Add event listener to this object, which is only called once. After the\n     * listener is called the event listener gets removed.\n     *\n     * @param type {String} name of the event type\n     * @param listener {Function} event callback function\n     * @param context {Object ? window} reference to the 'this' variable inside the callback\n     * @param capture {Boolean ? false} Whether to attach the event to the\n     *         capturing phase or the bubbling phase of the event. The default is\n     *         to attach the event handler to the bubbling phase.\n     * @return {String} An opaque id, which can be used to remove the event listener\n     *         using the {@link #removeListenerById} method.\n     */\n    addListenerOnce(type, listener, context, capture) {\n      var self = this; // self is needed to remove the listener inside the callback\n      if (!context) {\n        context = this;\n      }\n      var id; // store id in closure context\n      var callback = function (e) {\n        self.removeListenerById(id);\n        listener.call(context, e);\n      };\n      // check for wrapped callback storage\n      if (!listener.$$wrapped_callback) {\n        listener.$$wrapped_callback = {};\n      }\n      // store the call for each type in case the listener is\n      // used for more than one type [BUG #8038]\n      listener.$$wrapped_callback[type + this.toHashCode()] = callback;\n      id = this.addListener(type, callback, context, capture);\n      return id;\n    },\n\n    /**\n     * Remove event listener from this object\n     *\n     * @param type {String} name of the event type\n     * @param listener {Function} event callback function\n     * @param self {Object ? null} reference to the 'this' variable inside the callback\n     * @param capture {Boolean} Whether to remove the event listener of\n     *   the bubbling or of the capturing phase.\n     * @return {Boolean} Whether the event was removed successfully (has existed)\n     */\n    removeListener(type, listener, self, capture) {\n      if (!this.$$disposed) {\n        // special handling for wrapped once listener\n        if (\n          listener.$$wrapped_callback &&\n          listener.$$wrapped_callback[type + this.$$hash]\n        ) {\n          var callback = listener.$$wrapped_callback[type + this.$$hash];\n          delete listener.$$wrapped_callback[type + this.$$hash];\n          listener = callback;\n        }\n        return this.__Registration.removeListener(\n          this,\n          type,\n          listener,\n          self,\n          capture\n        );\n      }\n      return false;\n    },\n\n    /**\n     * Removes an event listener from an event target by an id returned by\n     * {@link #addListener}\n     *\n     * @param id {String} The id returned by {@link #addListener}\n     * @return {Boolean} Whether the event was removed successfully (has existed)\n     */\n    removeListenerById(id) {\n      if (!this.$$disposed) {\n        return this.__Registration.removeListenerById(this, id);\n      }\n\n      return false;\n    },\n\n    /**\n     * Check if there are one or more listeners for an event type.\n     *\n     * @param type {String} name of the event type\n     * @param capture {Boolean ? false} Whether to check for listeners of\n     *         the bubbling or of the capturing phase.\n     * @return {Boolean} Whether the object has a listener of the given type.\n     */\n    hasListener(type, capture) {\n      return this.__Registration.hasListener(this, type, capture);\n    },\n\n    /**\n     * Dispatch an event on this object\n     *\n     * @param evt {qx.event.type.Event} event to dispatch\n     * @return {Boolean} Whether the event default was prevented or not.\n     *     Returns true, when the event was NOT prevented.\n     */\n    dispatchEvent(evt) {\n      if (!this.$$disposed) {\n        return this.__Registration.dispatchEvent(this, evt);\n      }\n\n      return true;\n    },\n\n    /**\n     * Creates and dispatches an event on this object.\n     *\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {Boolean|qx.Promise} whether the event default was prevented or not.\n     *     Returns true, when the event was NOT prevented.\n     */\n    fireEvent(type, clazz, args) {\n      if (!this.$$disposed) {\n        return this.__Registration.fireEvent(this, type, clazz, args);\n      }\n\n      return true;\n    },\n\n    /**\n     * Creates and dispatches an event on this object; equivalent to fireEvent, except that it\n     * always returns a promise\n     *\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {qx.Promise} a promise aggregated from the event handlers;\n     *  if the default was prevented, the promise is rejected\n     */\n    fireEventAsync(type, clazz, args) {\n      if (!qx.core.Environment.get(\"qx.promise\")) {\n        throw new Error(\n          this.classname +\n            \".fireEventAsync not supported because qx.promise==false\"\n        );\n      }\n\n      if (!this.$$disposed) {\n        return this.__Registration.fireEventAsync(this, type, clazz, args);\n      }\n\n      return qx.Promise.resolve(true);\n    },\n\n    /**\n     * Create an event object and dispatch it on this object.\n     * The event dispatched with this method does never bubble! Use only if you\n     * are sure that bubbling is not required.\n     *\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {Boolean} Whether the event default was prevented or not.\n     *     Returns true, when the event was NOT prevented.\n     */\n    fireNonBubblingEvent(type, clazz, args) {\n      if (!this.$$disposed) {\n        return this.__Registration.fireNonBubblingEvent(\n          this,\n          type,\n          clazz,\n          args\n        );\n      }\n\n      return true;\n    },\n\n    /**\n     * Create an event object and dispatch it on this object; equivalent to fireNonBubblingEvent,\n     * except that it always returns a promise.\n     *\n     * The event dispatched with this method does never bubble! Use only if you\n     * are sure that bubbling is not required.\n     *\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {qx.Promise} a promise aggregated from the event handlers;\n     *  if the default was prevented, the promise is rejected\n     */\n    fireNonBubblingEventAsync(type, clazz, args) {\n      if (!qx.core.Environment.get(\"qx.promise\")) {\n        throw new Error(\n          this.classname +\n            \".fireNonBubblingEventAsync not supported because qx.promise==false\"\n        );\n      }\n\n      if (!this.$$disposed) {\n        return this.__Registration.fireNonBubblingEventAsync(\n          this,\n          type,\n          clazz,\n          args\n        );\n      }\n\n      return qx.Promise.resolve(true);\n    },\n\n    /**\n     * Creates and dispatches an non-bubbling data event on this object.\n     *\n     * @param type {String} Event type to fire\n     * @param data {var} User defined data attached to the event object\n     * @param oldData {var?null} The event's old data (optional)\n     * @param cancelable {Boolean?false} Whether or not an event can have its default\n     *     action prevented. The default action can either be the browser's\n     *     default action of a native event (e.g. open the context menu on a\n     *     right click) or the default action of a qooxdoo class (e.g. close\n     *     the window widget). The default action can be prevented by calling\n     *     {@link qx.event.type.Event#preventDefault}\n     * @return {Boolean|qx.Promise} whether the event default was prevented or not.\n     *     Returns true, when the event was NOT prevented.\n     */\n    fireDataEvent(type, data, oldData, cancelable) {\n      if (!this.$$disposed) {\n        if (oldData === undefined) {\n          oldData = null;\n        }\n        return this.__Registration.fireEvent(this, type, qx.event.type.Data, [\n          data,\n          oldData,\n          !!cancelable\n        ]);\n      }\n\n      return true;\n    },\n\n    /**\n     * Creates and dispatches an non-bubbling data event on this object; equivalent to\n     * fireEvent, except that it always returns a promise.\n     *\n     * @param type {String} Event type to fire\n     * @param data {var} User defined data attached to the event object\n     * @param oldData {var?null} The event's old data (optional)\n     * @param cancelable {Boolean?false} Whether or not an event can have its default\n     *     action prevented. The default action can either be the browser's\n     *     default action of a native event (e.g. open the context menu on a\n     *     right click) or the default action of a qooxdoo class (e.g. close\n     *     the window widget). The default action can be prevented by calling\n     *     {@link qx.event.type.Event#preventDefault}\n     * @return {qx.Promise} a promise aggregated from the event handlers;\n     *  if the default was prevented, the promise is rejected\n     */\n    fireDataEventAsync(type, data, oldData, cancelable) {\n      if (!qx.core.Environment.get(\"qx.promise\")) {\n        throw new Error(\n          this.classname +\n            \".fireDataEventAsync not supported because qx.promise==false\"\n        );\n      }\n\n      if (!this.$$disposed) {\n        if (oldData === undefined) {\n          oldData = null;\n        }\n        return this.__Registration.fireEventAsync(\n          this,\n          type,\n          qx.event.type.Data,\n          [data, oldData, !!cancelable]\n        );\n      }\n\n      return qx.Promise.resolve(true);\n    }\n  }\n});\n"
  ]
}