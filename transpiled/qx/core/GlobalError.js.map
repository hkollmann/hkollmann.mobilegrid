{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/core/GlobalError.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "Error",
    "construct",
    "exc",
    "args",
    "DEBUG",
    "core",
    "Assert",
    "assertNotUndefined",
    "__failMessage",
    "message",
    "inst",
    "call",
    "stack",
    "stacktrace",
    "__arguments",
    "__exc",
    "members",
    "toString",
    "getArguments",
    "getSourceException",
    "GlobalError"
  ],
  "mappings": ";;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,qBAApB,EAA2C;AACzCC,IAAAA,MAAM,EAAEC,KADiC;;AAGzC;AACF;AACA;AACA;AACEC,IAAAA,SAPyC,qBAO/BC,GAP+B,EAO1BC,IAP0B,EAOpB;AACnB;AACA;AACA,UAAIT,EAAE,CAACC,SAAH,CAAaS,KAAjB,EAAwB;AACtBV,QAAAA,EAAE,CAACW,IAAH,CAAQC,MAAR,CAAeC,kBAAf,CAAkCL,GAAlC;AACD;;AAED,WAAKM,SAAL,GACE,mBAAmBN,GAAG,IAAIA,GAAG,CAACO,OAAX,GAAqBP,GAAG,CAACO,OAAzB,GAAmCP,GAAtD,CADF;AAGA,UAAIQ,IAAI,GAAGV,KAAK,CAACW,IAAN,CAAW,IAAX,EAAiB,KAAKH,SAAtB,CAAX,CAVmB,CAWnB;;AACA,UAAIN,GAAG,IAAIA,GAAG,CAACU,KAAf,EAAsB;AACpB,aAAKA,KAAL,GAAaV,GAAG,CAACU,KAAjB;AACD;;AACD,UAAI,CAAC,KAAKA,KAAN,IAAeF,IAAI,CAACE,KAAxB,EAA+B;AAC7B,aAAKA,KAAL,GAAaF,IAAI,CAACE,KAAlB;AACD;;AACD,UAAIF,IAAI,CAACG,UAAT,EAAqB;AACnB,aAAKA,UAAL,GAAkBH,IAAI,CAACG,UAAvB;AACD;;AAED,WAAKC,SAAL,GAAmBX,IAAnB;AACA,WAAKY,SAAL,GAAab,GAAb;AACD,KA/BwC;AAiCzCc,IAAAA,OAAO,EAAE;AACPD,MAAAA,SAAK,EAAE,IADA;AAEPD,MAAAA,SAAW,EAAE,IAFN;AAGPN,MAAAA,SAAa,EAAE,IAHR;;AAKP;AACJ;AACA;AACA;AACA;AACIS,MAAAA,QAVO,sBAUI;AACT,eAAO,KAAKT,SAAZ;AACD,OAZM;;AAcP;AACJ;AACA;AACA;AACA;AACIU,MAAAA,YAnBO,0BAmBQ;AACb,eAAO,KAAKJ,SAAZ;AACD,OArBM;;AAuBP;AACJ;AACA;AACA;AACA;AACIK,MAAAA,kBA5BO,gCA4Bc;AACnB,eAAO,KAAKJ,SAAZ;AACD;AA9BM;AAjCgC,GAA3C;AAtBArB,EAAAA,EAAE,CAACW,IAAH,CAAQe,WAAR,CAAoBvB,aAApB,GAAoCA,aAApC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Michael Haitz (mhaitz)\n\n************************************************************************ */\n\n/**\n * This exception is thrown by the {@link qx.event.GlobalError} handler if a\n * observed method throws an exception.\n */\nqx.Bootstrap.define(\"qx.core.GlobalError\", {\n  extend: Error,\n\n  /**\n   * @param exc {Error} source exception\n   * @param args {Array} arguments\n   */\n  construct(exc, args) {\n    // Do not use the Environment class to keep the minimal\n    // package size small [BUG #5068]\n    if (qx.Bootstrap.DEBUG) {\n      qx.core.Assert.assertNotUndefined(exc);\n    }\n\n    this.__failMessage =\n      \"GlobalError: \" + (exc && exc.message ? exc.message : exc);\n\n    var inst = Error.call(this, this.__failMessage);\n    // map stack trace properties since they're not added by Error's constructor\n    if (exc && exc.stack) {\n      this.stack = exc.stack;\n    }\n    if (!this.stack && inst.stack) {\n      this.stack = inst.stack;\n    }\n    if (inst.stacktrace) {\n      this.stacktrace = inst.stacktrace;\n    }\n\n    this.__arguments = args;\n    this.__exc = exc;\n  },\n\n  members: {\n    __exc: null,\n    __arguments: null,\n    __failMessage: null,\n\n    /**\n     * Returns the error message.\n     *\n     * @return {String} error message\n     */\n    toString() {\n      return this.__failMessage;\n    },\n\n    /**\n     * Returns the arguments which are\n     *\n     * @return {Object} arguments\n     */\n    getArguments() {\n      return this.__arguments;\n    },\n\n    /**\n     * Get the source exception\n     *\n     * @return {Error} source exception\n     */\n    getSourceException() {\n      return this.__exc;\n    }\n  }\n});\n"
  ]
}