{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/html/Iframe.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "html",
    "Element",
    "construct",
    "url",
    "styles",
    "attributes",
    "registerProperty",
    "_setSourceProperty",
    "setSource",
    "addListener",
    "__onNavigate",
    "_modified",
    "toHashCode",
    "_scheduleFlush",
    "events",
    "load",
    "navigate",
    "members",
    "value",
    "element",
    "getDomElement",
    "currentUrl",
    "bom",
    "Iframe",
    "queryCurrentUrl",
    "_createDomElement",
    "create",
    "getWindow",
    "getDocument",
    "getBody",
    "source",
    "_setProperty",
    "getSource",
    "_getProperty",
    "setName",
    "name",
    "setAttribute",
    "getName",
    "getAttribute",
    "reload",
    "e",
    "actualUrl",
    "getData"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * A cross browser iframe instance.\n */\nqx.Class.define(\"qx.html.Iframe\", {\n  extend: qx.html.Element,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Wrapper for the HTML Iframe element.\n   * @param url {String} Location which should be loaded inside the Iframe.\n   * @param styles {Map?null} optional map of CSS styles, where the key is the name\n   *    of the style and the value is the value to use.\n   * @param attributes {Map?null} optional map of element attributes, where the\n   *    key is the name of the attribute and the value is the value to use.\n   */\n  construct(url, styles, attributes) {\n    super(\"iframe\", styles, attributes);\n\n    this.registerProperty(\"source\", null, this._setSourceProperty);\n\n    this.setSource(url);\n    this.addListener(\"navigate\", this.__onNavigate, this);\n\n    // add yourself to the element queue to enforce the creation of DOM element\n    qx.html.Element._modified[this.toHashCode()] = this;\n    qx.html.Element._scheduleFlush(\"element\");\n  },\n\n  /*\n   *****************************************************************************\n      EVENTS\n   *****************************************************************************\n   */\n\n  events: {\n    /**\n     * The \"load\" event is fired after the iframe content has successfully been loaded.\n     */\n    load: \"qx.event.type.Event\",\n\n    /**\n     * The \"navigate\" event is fired whenever the location of the iframe\n     * changes.\n     *\n     * Useful to track user navigation and internally used to keep the source\n     * property in sync. Only works when the destination source is of same\n     * origin than the page embedding the iframe.\n     */\n    navigate: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /*\n    ---------------------------------------------------------------------------\n      ELEMENT API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Implementation of setter for the \"source\" property\n     *\n     * @param value {String?} value to set\n     */\n    _setSourceProperty(value) {\n      var element = this.getDomElement();\n      var currentUrl = qx.bom.Iframe.queryCurrentUrl(element);\n\n      // Skip if frame is already on URL.\n      //\n      // When URL of Iframe and source property get out of sync, the source\n      // property needs to be updated [BUG #4481]. This is to make sure the\n      // same source is not set twice on the BOM level.\n      if (value === currentUrl) {\n        return;\n      }\n\n      qx.bom.Iframe.setSource(element, value);\n    },\n\n    // overridden\n    _createDomElement() {\n      return qx.bom.Iframe.create();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      IFRAME API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get the DOM window object of an iframe.\n     *\n     * @return {Window} The DOM window object of the iframe.\n     */\n    getWindow() {\n      var element = this.getDomElement();\n\n      if (element) {\n        return qx.bom.Iframe.getWindow(element);\n      } else {\n        return null;\n      }\n    },\n\n    /**\n     * Get the DOM document object of an iframe.\n     *\n     * @return {Document} The DOM document object of the iframe.\n     */\n    getDocument() {\n      var element = this.getDomElement();\n\n      if (element) {\n        return qx.bom.Iframe.getDocument(element);\n      } else {\n        return null;\n      }\n    },\n\n    /**\n     * Get the HTML body element of the iframe.\n     *\n     * @return {Element} The DOM node of the <code>body</code> element of the iframe.\n     */\n    getBody() {\n      var element = this.getDomElement();\n\n      if (element) {\n        return qx.bom.Iframe.getBody(element);\n      } else {\n        return null;\n      }\n    },\n\n    /**\n     * Sets iframe's source attribute to given value\n     *\n     * @param source {String} URL to be set.\n     * @return {qx.html.Iframe} The current instance for chaining\n     */\n    setSource(source) {\n      // the source needs to be applied directly in case the iFrame is hidden\n      this._setProperty(\"source\", source, true);\n      return this;\n    },\n\n    /**\n     * Get the current source.\n     *\n     * @return {String} The iframe's source\n     */\n    getSource() {\n      return this._getProperty(\"source\");\n    },\n\n    /**\n     * Sets iframe's name attribute to given value\n     *\n     * @param name {String} Name to be set.\n     * @return {qx.html.Iframe} The current instance for chaining\n     */\n    setName(name) {\n      this.setAttribute(\"name\", name);\n      return this;\n    },\n\n    /**\n     * Get the current name.\n     *\n     * @return {String} The iframe's name.\n     */\n    getName() {\n      return this.getAttribute(\"name\");\n    },\n\n    /**\n     * Reloads iframe\n     */\n    reload() {\n      var element = this.getDomElement();\n\n      if (element) {\n        var url = this.getSource();\n        this.setSource(null);\n        this.setSource(url);\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      LISTENER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Handle user navigation. Sync actual URL of iframe with source property.\n     *\n     * @param e {qx.event.type.Data} navigate event\n     */\n    __onNavigate(e) {\n      var actualUrl = e.getData();\n      if (actualUrl) {\n        this.setSource(actualUrl);\n      }\n    }\n  }\n});\n"
  ]
}