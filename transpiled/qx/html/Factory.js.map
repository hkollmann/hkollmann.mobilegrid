{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/html/Factory.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "construct",
    "__factoriesByTagName",
    "registerFactory",
    "tagName",
    "attributes",
    "styles",
    "html",
    "Text",
    "Image",
    "Iframe",
    "src",
    "Input",
    "members",
    "factory",
    "toLowerCase",
    "undefined",
    "push",
    "createElement",
    "window",
    "NamedNodeMap",
    "newAttrs",
    "i",
    "length",
    "name",
    "value",
    "style",
    "split",
    "forEach",
    "seg",
    "pos",
    "indexOf",
    "key",
    "substring",
    "trim",
    "classname",
    "clazz",
    "getByName",
    "factories",
    "element",
    "Element",
    "Factory"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2019-2020 Zenesis Limited, https://www.zenesis.com\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * John Spackman (https://github.com/johnspackman, john.spackman@zenesis.com)\n\n************************************************************************ */\n\n/**\n * Factory class used to create Virtual DOM instances by JSX support\n */\nqx.Class.define(\"qx.html.Factory\", {\n  extend: qx.core.Object,\n  type: \"singleton\",\n\n  construct() {\n    super();\n    this.__factoriesByTagName = {};\n    this.registerFactory(\"#text\", function (tagName, attributes, styles) {\n      return new qx.html.Text(\"\");\n    });\n    this.registerFactory(\"img\", qx.html.Image);\n    this.registerFactory(\"iframe\", function (tagName, attributes, styles) {\n      return new qx.html.Iframe(attributes.src, attributes, styles);\n    });\n    this.registerFactory(\"input\", function (tagName, attributes, styles) {\n      return new qx.html.Input(attributes.type || \"text\", attributes, styles);\n    });\n  },\n\n  members: {\n    __factoriesByTagName: null,\n\n    /**\n     * Registers a factory; a factory is either a class, or a function which is\n     * called with the parameters (tagName {String}, styles{Map?}, attributes {Map?}), and\n     * which is expected to return an {Element}\n     *\n     * @param tagName {String} the name of the tag\n     * @param factory {Class|Function} the function used to create instances for that tagName\n     */\n    registerFactory(tagName, factory) {\n      tagName = tagName.toLowerCase();\n      if (this.__factoriesByTagName[tagName] === undefined) {\n        this.__factoriesByTagName[tagName] = [];\n      }\n      this.__factoriesByTagName[tagName].push(factory);\n    },\n\n    /**\n     * Called to create an {Element}\n     *\n     * @param tagName {String} the name of the tag\n     * @param attributes {Map?} the attributes to create (including style etc)\n     * @return {qx.html.Node}\n     */\n    createElement(tagName, attributes) {\n      tagName = tagName.toLowerCase();\n\n      if (attributes) {\n        if (window.NamedNodeMap && attributes instanceof window.NamedNodeMap) {\n          var newAttrs = {};\n          for (var i = attributes.length - 1; i >= 0; i--) {\n            newAttrs[attributes[i].name] = attributes[i].value;\n          }\n          attributes = newAttrs;\n        }\n\n        var styles = {};\n        if (attributes.style) {\n          attributes.style.split(/;/).forEach(function (seg) {\n            var pos = seg.indexOf(\":\");\n            var key = seg.substring(0, pos);\n            var value = seg.substring(pos + 1).trim();\n            if (key) {\n              styles[key] = value;\n            }\n          });\n          delete attributes.style;\n        }\n\n        var classname = attributes[\"data-qx-classname\"];\n        if (classname) {\n          var clazz = qx.Class.getByName(classname);\n          if (qx.core.Environment.get(\"qx.debug\")) {\n            this.assertTrue(\n              clazz && qx.Class.isSubClassOf(clazz, qx.html.Element)\n            );\n\n            return new clazz(tagName, styles, attributes);\n          }\n        }\n      }\n\n      var factories = this.__factoriesByTagName[tagName];\n      if (factories) {\n        for (var i = factories.length - 1; i > -1; i--) {\n          var factory = factories[i];\n          if (\n            factory.classname &&\n            qx.Class.getByName(factory.classname) === factory\n          ) {\n            return new factory(tagName, styles, attributes);\n          }\n\n          if (qx.core.Environment.get(\"qx.debug\")) {\n            this.assertTrue(typeof factory == \"function\");\n          }\n          var element = factory(tagName, styles, attributes);\n          if (element) {\n            return element;\n          }\n        }\n      }\n\n      return new qx.html.Element(tagName, styles, attributes);\n    }\n  }\n});\n"
  ]
}