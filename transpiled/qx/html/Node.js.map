{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/html/Node.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "nodeName",
    "_nodeName",
    "statics",
    "fromDomNode",
    "domNode",
    "$$elementObject",
    "toVirtualNode",
    "html",
    "Factory",
    "getInstance",
    "createElement",
    "attributes",
    "useNode",
    "properties",
    "visible",
    "init",
    "nullable",
    "check",
    "apply",
    "event",
    "members",
    "_domNode",
    "_parent",
    "_qxObject",
    "_included",
    "_children",
    "_modifiedChildren",
    "_propertyJobs",
    "_properties",
    "__eventValues",
    "connectObject",
    "qxObject",
    "$$qxObjectHash",
    "toHashCode",
    "$$qxObject",
    "Environment",
    "get",
    "updateObjectId",
    "disconnectObject",
    "_createDomElement",
    "Error",
    "classname",
    "serialize",
    "writer",
    "temporaryQxObjectId",
    "getQxObjectId",
    "setQxObjectId",
    "id",
    "Id",
    "getAbsoluteIdOf",
    "isIdRoot",
    "register",
    "result",
    "undefined",
    "_serializeImpl",
    "buffer",
    "args",
    "lang",
    "Array",
    "fromArguments",
    "arguments",
    "append",
    "join",
    "unregister",
    "getAttribute",
    "self",
    "convert",
    "children",
    "fromCollection",
    "childNodes",
    "map",
    "domChild",
    "child",
    "nodeType",
    "window",
    "Node",
    "ELEMENT_NODE",
    "owningQxObjectId",
    "qxObjectId",
    "owningQxObject",
    "pos",
    "lastIndexOf",
    "substring",
    "getQxObject",
    "htmlNode",
    "install",
    "htmlChildren",
    "mapEntry",
    "_useNodeImpl",
    "rootMap",
    "flush",
    "_insertChildren",
    "newChildren",
    "_connectDomNode",
    "_copyData",
    "lookup",
    "oldChildren",
    "clone",
    "forEach",
    "parentElement",
    "removeChild",
    "appendChild",
    "_scheduleChildrenUpdate",
    "$$element",
    "isInDocument",
    "document",
    "body",
    "setAttribute",
    "_cascadeQxObjectIdChanges",
    "Element",
    "_modified",
    "_scheduleFlush",
    "_flush",
    "length",
    "i",
    "isVisible",
    "_syncData",
    "_syncChildren",
    "isRoot",
    "isInRoot",
    "tmp",
    "_willBeSeeable",
    "_hasRoots",
    "pa",
    "domElement",
    "createDocumentFragment",
    "dataChildren",
    "dataLength",
    "dataChild",
    "dataEl",
    "domParent",
    "domChildren",
    "domPos",
    "domEl",
    "insertBefore",
    "fromMarkup",
    "propertiesFromDom",
    "elem",
    "data",
    "domEvents",
    "manager",
    "Registration",
    "getManager",
    "findHandler",
    "type",
    "importListeners",
    "key",
    "prop",
    "value",
    "call",
    "set",
    "jobs",
    "_addChildImpl",
    "__root",
    "remove",
    "_removeChildImpl",
    "_moveChildImpl",
    "getChildren",
    "getChild",
    "index",
    "hasChildren",
    "indexOf",
    "hasChild",
    "add",
    "varargs",
    "addImpl",
    "arr",
    "Type",
    "isArray",
    "push",
    "addAt",
    "insertAt",
    "childs",
    "removeImpl",
    "removeAt",
    "removeAll",
    "l",
    "getParent",
    "insertInto",
    "parent",
    "rel",
    "insertAfter",
    "moveTo",
    "oldIndex",
    "moveBefore",
    "moveAfter",
    "free",
    "getDomElement",
    "create",
    "getNodeName",
    "setNodeName",
    "name",
    "toLowerCase",
    "include",
    "exclude",
    "isIncluded",
    "_applyVisible",
    "registerProperty",
    "debug",
    "Function",
    "bind",
    "_applyProperty",
    "log",
    "Logger",
    "deprecatedMethodWarning",
    "_setProperty",
    "direct",
    "_removeProperty",
    "_getProperty",
    "fn",
    "addListener",
    "listener",
    "capture",
    "$$disposed",
    "registerDomEvent",
    "unique",
    "Manager",
    "getNextUniqueId",
    "supportsEvent",
    "domEventId",
    "removeListener",
    "$$wrapped_callback",
    "callback",
    "values",
    "entry",
    "removeListenerById",
    "hasListener",
    "has",
    "getListeners",
    "listeners",
    "serializeListeners",
    "listenerData",
    "handler",
    "destruct",
    "el",
    "removeAllListeners",
    "ObjectRegistry",
    "inShutDown",
    "_disposeArray"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * John Spackman (https://github.com/johnspackman)\n\n************************************************************************ */\n\n/**\n * High-performance, high-level DOM element creation and management.\n *\n * Mirrors the DOM structure of Node (see also Element and Text) so to provide\n * DOM insertion and modification with advanced logic to reduce the real transactions.\n *\n * Each child itself also has got some powerful methods to control its\n * position:\n * {@link #getParent}, {@link #free},\n * {@link #insertInto}, {@link #insertBefore}, {@link #insertAfter},\n * {@link #moveTo}, {@link #moveBefore}, {@link #moveAfter},\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n * @require(qx.module.Animation)\n */\nqx.Class.define(\"qx.html.Node\", {\n  extend: qx.core.Object,\n  implement: [qx.core.IDisposable],\n\n  /**\n   * Creates a new Element\n   *\n   * @param nodeName {String} name of the node; will be a tag name for Elements, otherwise it's a reserved\n   * name eg \"#text\"\n   */\n  construct(nodeName) {\n    super();\n    this._nodeName = nodeName;\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Finds the Widget for a given DOM element\n     *\n     * @param domElement {DOM} the DOM element\n     * @return {qx.ui.core.Widget} the Widget that created the DOM element\n     */\n    fromDomNode(domNode) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertTrue(\n          (!domNode.$$element && !domNode.$$elementObject) ||\n            domNode.$$element === domNode.$$elementObject.toHashCode()\n        );\n      }\n      return domNode.$$elementObject;\n    },\n\n    /**\n     * Converts a DOM node into a qx.html.Node, providing the existing instance if\n     * there is one\n     *\n     * @param {Node} domNode\n     * @returns {qx.html.Node}\n     */\n    toVirtualNode(domNode) {\n      if (domNode.$$elementObject) {\n        return domNode.$$elementObject;\n      }\n\n      let html = qx.html.Factory.getInstance().createElement(\n        domNode.nodeName,\n        domNode.attributes\n      );\n\n      html.useNode(domNode);\n      return html;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * Controls whether the element is visible which means that a previously applied\n     * CSS style of display=none gets removed and the element will inserted into the DOM,\n     * when this had not already happened before.\n     *\n     * If the element already exists in the DOM then it will kept in DOM, but configured\n     * hidden using a CSS style of display=none.\n     *\n     * Please note: This does not control the visibility or parent inclusion recursively.\n     *\n     * @type {Boolean} Whether the element should be visible in the render result\n     */\n    visible: {\n      init: true,\n      nullable: true,\n      check: \"Boolean\",\n      apply: \"_applyVisible\",\n      event: \"changeVisible\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /*\n    ---------------------------------------------------------------------------\n      PROTECTED HELPERS/DATA\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {String} the name of the node */\n    _nodeName: null,\n\n    /** @type {Node} DOM node of this object */\n    _domNode: null,\n\n    /** @type {qx.html.Element} parent element */\n    _parent: null,\n\n    /** @type {qx.core.Object} the Qooxdoo object this node is attached to */\n    _qxObject: null,\n\n    /** @type {Boolean} Whether the element should be included in the render result */\n    _included: true,\n\n    _children: null,\n    _modifiedChildren: null,\n\n    _propertyJobs: null,\n    _properties: null,\n\n    /** @type {Map} map of event handlers */\n    __eventValues: null,\n\n    /**\n     * Connects a widget to this element, and to the DOM element in this Element.  They\n     * remain associated until disposed or disconnectObject is called\n     *\n     * @param qxObject {qx.core.Object} the object to associate\n     */\n    connectObject(qxObject) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertTrue(\n          !this._qxObject || this._qxObject === qxObject\n        );\n      }\n\n      this._qxObject = qxObject;\n      if (this._domNode) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertTrue(\n            (!this._domNode.$$qxObjectHash && !this._domNode.$$qxObject) ||\n              (this._domNode.$$qxObject === qxObject &&\n                this._domNode.$$qxObjectHash === qxObject.toHashCode())\n          );\n        }\n\n        this._domNode.$$qxObjectHash = qxObject.toHashCode();\n        this._domNode.$$qxObject = qxObject;\n      }\n\n      if (qx.core.Environment.get(\"module.objectid\")) {\n        this.updateObjectId();\n      }\n    },\n\n    /**\n     * Disconnects a widget from this element and the DOM element.  The DOM element remains\n     * untouched, except that it can no longer be used to find the Widget.\n     *\n     * @param qxObject {qx.core.Object} the Widget\n     */\n    disconnectObject(qxObject) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertTrue(this._qxObject === qxObject);\n      }\n\n      delete this._qxObject;\n      if (this._domNode) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertTrue(\n            (!this._domNode.$$qxObjectHash && !this._domNode.$$qxObject) ||\n              (this._domNode.$$qxObject === qxObject &&\n                this._domNode.$$qxObjectHash === qxObject.toHashCode())\n          );\n        }\n\n        this._domNode.$$qxObjectHash = \"\";\n        delete this._domNode.$$qxObject;\n      }\n\n      if (qx.core.Environment.get(\"module.objectid\")) {\n        this.updateObjectId();\n      }\n    },\n\n    /**\n     * Internal helper to generate the DOM element\n     *\n     * @return {Element} DOM element\n     */\n    _createDomElement() {\n      throw new Error(\n        \"No implementation for \" + this.classname + \"._createDomElement\"\n      );\n    },\n\n    /**\n     * Serializes the virtual DOM element to a writer; the `writer` function accepts\n     *  an varargs, which can be joined with an empty string or streamed.\n     *\n     * If writer is null, the element will be serialised to a string which is returned;\n     * note that if writer is not null, the return value will be null\n     *\n     * @param writer {Function?} the writer\n     * @return {String?} the serialised version if writer is null\n     */\n    serialize(writer) {\n      var temporaryQxObjectId = !this.getQxObjectId();\n      if (temporaryQxObjectId) {\n        this.setQxObjectId(this.classname);\n      }\n      var id = qx.core.Id.getAbsoluteIdOf(this, true);\n      var isIdRoot = !id;\n      if (isIdRoot) {\n        qx.core.Id.getInstance().register(this);\n      }\n\n      var result = undefined;\n      if (writer) {\n        this._serializeImpl(writer);\n      } else {\n        var buffer = [];\n        this._serializeImpl(function () {\n          var args = qx.lang.Array.fromArguments(arguments);\n          qx.lang.Array.append(buffer, args);\n        });\n        result = buffer.join(\"\");\n      }\n\n      if (isIdRoot) {\n        qx.core.Id.getInstance().unregister(this);\n      }\n      if (temporaryQxObjectId) {\n        this.setQxObjectId(null);\n      }\n\n      return result;\n    },\n\n    /**\n     * Serializes the virtual DOM element to a writer; the `writer` function accepts\n     *  an varargs, which can be joined with an empty string or streamed.\n     *\n     * @param writer {Function} the writer\n     */\n    _serializeImpl(writer) {\n      throw new Error(\n        \"No implementation for \" + this.classname + \".serializeImpl\"\n      );\n    },\n\n    /**\n     * Uses an existing element instead of creating one. This may be interesting\n     * when the DOM element is directly needed to add content etc.\n     *\n     * @param domNode {Node} DOM Node to reuse\n     */\n    useNode(domNode) {\n      var id = domNode.getAttribute(\"data-qx-object-id\");\n      if (id) {\n        this.setQxObjectId(id);\n      }\n      var temporaryQxObjectId = !this.getQxObjectId();\n      if (temporaryQxObjectId) {\n        this.setQxObjectId(this.classname);\n      }\n      var id = qx.core.Id.getAbsoluteIdOf(this, true);\n      var isIdRoot = !id;\n      if (isIdRoot) {\n        qx.core.Id.getInstance().register(this);\n      }\n\n      /*\n       * When merging children, we want to keep the original DOM nodes in\n       * domNode no matter what - however, where the DOM nodes have a qxObjectId\n       * we must reuse the original instances.\n       *\n       * The crucial thing is that the qxObjectId hierarchy and the DOM hierarchy\n       * are not the same (although they are often similar, the DOM will often have\n       * extra Nodes).\n       *\n       * However, because the objects in the qxObjectId space will typically already\n       * exist (eg accessed via the constructor) we do not want to discard the original\n       * instance of qx.html.Element because there are probably references to them in\n       * code.\n       *\n       * In the code below, we map the DOM heirarchy into a temporary Javascript\n       * hierarchy, where we can either use existing qx.html.Element instances (found\n       * by looking up the qxObjectId) or fabricate new ones.\n       *\n       * Once the temporary hierarchy is ready, we go back and synchronise each\n       * qx.html.Element with the DOM node and our new array of children.\n       *\n       * The only rule to this is that if you are going to call this `useNode`, then\n       * you must not keep references to objects *unless* you also access them via\n       * the qxObjectId mechanism.\n       */\n\n      var self = this;\n      function convert(domNode) {\n        var children = qx.lang.Array.fromCollection(domNode.childNodes);\n        children = children.map(function (domChild) {\n          var child = null;\n          if (domChild.nodeType == window.Node.ELEMENT_NODE) {\n            var id = domChild.getAttribute(\"data-qx-object-id\");\n            if (id) {\n              var owningQxObjectId = null;\n              var qxObjectId = null;\n              var owningQxObject = null;\n              var pos = id.lastIndexOf(\"/\");\n              if (pos > -1) {\n                owningQxObjectId = id.substring(0, pos);\n                qxObjectId = id.substring(pos + 1);\n                owningQxObject = qx.core.Id.getQxObject(owningQxObjectId);\n                child = owningQxObject.getQxObject(qxObjectId);\n              } else {\n                qxObjectId = id;\n                owningQxObject = self;\n                child = self.getQxObject(id);\n              }\n            }\n          }\n          if (!child) {\n            child = qx.html.Factory.getInstance().createElement(\n              domChild.nodeName,\n              domChild.attributes\n            );\n          }\n          return {\n            htmlNode: child,\n            domNode: domChild,\n            children: convert(domChild)\n          };\n        });\n        return children;\n      }\n\n      function install(map) {\n        var htmlChildren = map.children.map(function (mapEntry) {\n          install(mapEntry);\n          return mapEntry.htmlNode;\n        });\n        map.htmlNode._useNodeImpl(map.domNode, htmlChildren);\n      }\n\n      var rootMap = {\n        htmlNode: this,\n        domNode: domNode,\n        children: convert(domNode)\n      };\n\n      install(rootMap);\n\n      this.flush();\n      this._insertChildren();\n\n      if (isIdRoot) {\n        qx.core.Id.getInstance().unregister(this);\n      }\n      if (temporaryQxObjectId) {\n        this.setQxObjectId(null);\n      }\n    },\n\n    /**\n     * Called internally to complete the connection to an existing DOM node\n     *\n     * @param domNode {DOMNode} the node we're syncing to\n     * @param newChildren {qx.html.Node[]} the new children\n     */\n    _useNodeImpl(domNode, newChildren) {\n      if (this._domNode) {\n        throw new Error(\"Could not overwrite existing element!\");\n      }\n\n      // Use incoming element\n      this._connectDomNode(domNode);\n\n      // Copy currently existing data over to element\n      this._copyData(true, true);\n\n      // Add children\n      var lookup = {};\n      var oldChildren = this._children\n        ? qx.lang.Array.clone(this._children)\n        : null;\n      newChildren.forEach(function (child) {\n        lookup[child.toHashCode()] = child;\n      });\n      this._children = newChildren;\n\n      // Make sure that unused children are disconnected\n      if (oldChildren) {\n        oldChildren.forEach(function (child) {\n          if (!lookup[child.toHashCode()]) {\n            if (child._domNode && child._domNode.parentElement) {\n              child._domNode.parentElement.removeChild(child._domNode);\n            }\n            child._parent = null;\n          }\n        });\n      }\n\n      var self = this;\n      this._children.forEach(function (child) {\n        child._parent = self;\n        if (child._domNode && child._domNode.parentElement !== self._domNode) {\n          child._domNode.parentElement.removeChild(child._domNode);\n          if (this._domNode) {\n            this._domNode.appendChild(child._domNode);\n          }\n        }\n      });\n\n      if (this._domNode) {\n        this._scheduleChildrenUpdate();\n      }\n    },\n\n    /**\n     * Connects a DOM element to this Node; if this Node is already connected to a Widget\n     * then the Widget is also connected.\n     *\n     * @param domNode {DOM} the DOM Node to associate\n     */\n    _connectDomNode(domNode) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertTrue(!this._domNode || this._domNode === domNode);\n        qx.core.Assert.assertTrue(\n          (domNode.$$elementObject === this &&\n            domNode.$$element === this.toHashCode()) ||\n            (!domNode.$$elementObject && !domNode.$$element)\n        );\n      }\n\n      this._domNode = domNode;\n      domNode.$$elementObject = this;\n      domNode.$$element = this.toHashCode();\n      if (this._qxObject) {\n        domNode.$$qxObjectHash = this._qxObject.toHashCode();\n        domNode.$$qxObject = this._qxObject;\n      }\n    },\n\n    /**\n     * Detects whether the DOM node has been created and is in the document\n     *\n     * @return {Boolean}\n     */\n    isInDocument() {\n      if (document.body) {\n        for (\n          var domNode = this._domNode;\n          domNode != null;\n          domNode = domNode.parentElement\n        ) {\n          if (domNode === document.body) {\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Updates the Object ID on the element to match the QxObjectId\n     */\n    updateObjectId() {\n      // Copy Object Id\n      if (qx.core.Environment.get(\"module.objectid\")) {\n        var id = this.getQxObjectId();\n        if (!id && this._qxObject) {\n          id = this._qxObject.getQxObjectId();\n        }\n\n        this.setAttribute(\"data-qx-object-id\", id, true);\n      }\n    },\n\n    _cascadeQxObjectIdChanges() {\n      if (qx.core.Environment.get(\"module.objectid\")) {\n        this.updateObjectId();\n      }\n      super._cascadeQxObjectIdChanges();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      FLUSH OBJECT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Add the element to the global modification list.\n     *\n     */\n    _scheduleChildrenUpdate() {\n      if (this._modifiedChildren) {\n        return;\n      }\n\n      if (this._domNode) {\n        this._modifiedChildren = true;\n\n        qx.html.Element._modified[this.toHashCode()] = this;\n        qx.html.Element._scheduleFlush(\"element\");\n      }\n    },\n\n    /**\n     * Syncs data of an HtmlElement object to the DOM.\n     *\n     * This is just a public wrapper around `flush`, because the scope has changed\n     *\n     * @deprecated {6.0} Please use `.flush()` instead\n     */\n    _flush() {\n      this.flush();\n    },\n\n    /**\n     * Syncs data of an HtmlElement object to the DOM.\n     *\n     */\n    flush() {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (this.DEBUG) {\n          this.debug(\"Flush: \" + this.getAttribute(\"id\"));\n        }\n      }\n\n      var length;\n      var children = this._children;\n      if (children) {\n        length = children.length;\n        var child;\n        for (var i = 0; i < length; i++) {\n          child = children[i];\n\n          if (child.isVisible() && child._included && !child._domNode) {\n            child.flush();\n          }\n        }\n      }\n\n      if (!this._domNode) {\n        this._connectDomNode(this._createDomElement());\n\n        this._copyData(false, false);\n\n        if (children && length > 0) {\n          this._insertChildren();\n        }\n      } else {\n        this._syncData();\n\n        if (this._modifiedChildren) {\n          this._syncChildren();\n        }\n      }\n\n      delete this._modifiedChildren;\n    },\n\n    /**\n     * Returns this element's root flag\n     *\n     * @return {Boolean}\n     */\n    isRoot() {\n      throw new Error(\"No implementation for \" + this.classname + \".isRoot\");\n    },\n\n    /**\n     * Detects whether this element is inside a root element\n     *\n     * @return {Boolean}\n     */\n    isInRoot() {\n      var tmp = this;\n      while (tmp) {\n        if (tmp.isRoot()) {\n          return true;\n        }\n        tmp = tmp._parent;\n      }\n      return false;\n    },\n\n    /**\n     * Walk up the internal children hierarchy and\n     * look if one of the children is marked as root.\n     *\n     * This method is quite performance hungry as it\n     * really walks up recursively.\n     * @return {Boolean} <code>true</code> if the element will be seeable\n     */\n    _willBeSeeable() {\n      if (!qx.html.Element._hasRoots) {\n        return false;\n      }\n      var pa = this;\n\n      // Any chance to cache this information in the parents?\n      while (pa) {\n        if (pa.isRoot()) {\n          return true;\n        }\n\n        if (!pa._included || !pa.isVisible()) {\n          return false;\n        }\n\n        pa = pa._parent;\n      }\n\n      return false;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SUPPORT FOR CHILDREN FLUSH\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Append all child nodes to the DOM\n     * element. This function is used when the element is initially\n     * created. After this initial apply {@link #_syncChildren} is used\n     * instead.\n     *\n     */\n    _insertChildren() {\n      var children = this._children;\n      if (!children) {\n        return;\n      }\n      var length = children.length;\n      var child;\n\n      if (length > 2) {\n        var domElement = document.createDocumentFragment();\n        for (var i = 0; i < length; i++) {\n          child = children[i];\n          if (child._domNode && child._included) {\n            domElement.appendChild(child._domNode);\n          }\n        }\n\n        this._domNode.appendChild(domElement);\n      } else {\n        var domElement = this._domNode;\n        for (var i = 0; i < length; i++) {\n          child = children[i];\n          if (child._domNode && child._included) {\n            domElement.appendChild(child._domNode);\n          }\n        }\n      }\n    },\n\n    /**\n     * Synchronize internal children hierarchy to the DOM. This is used\n     * for further runtime updates after the element has been created\n     * initially.\n     *\n     */\n    _syncChildren() {\n      var dataChildren = this._children || [];\n      var dataLength = dataChildren.length;\n      var dataChild;\n      var dataEl;\n\n      var domParent = this._domNode;\n      var domChildren = domParent.childNodes;\n      var domPos = 0;\n      var domEl;\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var domOperations = 0;\n      }\n\n      // Remove children from DOM which are excluded or remove first\n      for (var i = domChildren.length - 1; i >= 0; i--) {\n        domEl = domChildren[i];\n        dataEl = qx.html.Node.fromDomNode(domEl);\n\n        if (!dataEl || !dataEl._included || dataEl._parent !== this) {\n          domParent.removeChild(domEl);\n\n          if (qx.core.Environment.get(\"qx.debug\")) {\n            domOperations++;\n          }\n        }\n      }\n\n      // Start from beginning and bring DOM in sync\n      // with the data structure\n      for (var i = 0; i < dataLength; i++) {\n        dataChild = dataChildren[i];\n\n        // Only process visible childs\n        if (dataChild._included) {\n          dataEl = dataChild._domNode;\n          domEl = domChildren[domPos];\n\n          if (!dataEl) {\n            continue;\n          }\n\n          // Only do something when out of sync\n          // If the data element is not there it may mean that it is still\n          // marked as visible=false\n          if (dataEl != domEl) {\n            if (domEl) {\n              domParent.insertBefore(dataEl, domEl);\n            } else {\n              domParent.appendChild(dataEl);\n            }\n\n            if (qx.core.Environment.get(\"qx.debug\")) {\n              domOperations++;\n            }\n          }\n\n          // Increase counter\n          domPos++;\n        }\n      }\n\n      // User feedback\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (qx.html.Element.DEBUG) {\n          this.debug(\"Synced DOM with \" + domOperations + \" operations\");\n        }\n      }\n    },\n\n    /**\n     * Copies data between the internal representation and the DOM. This\n     * simply copies all the data and only works well directly after\n     * element creation. After this the data must be synced using {@link #_syncData}\n     *\n     * @param fromMarkup {Boolean} Whether the copy should respect styles\n     *   given from markup\n     * @param propertiesFromDom {Boolean} whether the copy should respect the property\n     *  values in the dom\n     */\n    _copyData(fromMarkup, propertiesFromDom) {\n      var elem = this._domNode;\n\n      // Attach events\n      var data = this.__eventValues;\n      if (data) {\n        // Import listeners\n        let domEvents = {};\n        let manager = qx.event.Registration.getManager(elem);\n        for (let id in data) {\n          if (manager.findHandler(elem, data[id].type)) {\n            domEvents[id] = data[id];\n          }\n        }\n        qx.event.Registration.getManager(elem).importListeners(elem, domEvents);\n\n        // Cleanup event map\n        // Events are directly attached through event manager\n        // after initial creation. This differs from the\n        // handling of styles and attributes where queuing happens\n        // through the complete runtime of the application.\n        delete this.__eventValues;\n      }\n\n      // Copy properties\n      if (this._properties) {\n        for (var key in this._properties) {\n          var prop = this._properties[key];\n          if (propertiesFromDom) {\n            if (prop.get) {\n              prop.value = prop.get.call(this, key);\n            }\n          } else if (prop.value !== undefined) {\n            prop.set.call(this, prop.value, key);\n          }\n        }\n      }\n    },\n\n    /**\n     * Synchronizes data between the internal representation and the DOM. This\n     * is the counterpart of {@link #_copyData} and is used for further updates\n     * after the element has been created.\n     *\n     */\n    _syncData() {\n      // Sync misc\n      var jobs = this._propertyJobs;\n      if (jobs && this._properties) {\n        for (var key in jobs) {\n          var prop = this._properties[key];\n          if (prop.value !== undefined) {\n            prop.set.call(this, prop.value, key);\n          }\n        }\n\n        this._propertyJobs = null;\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PRIVATE HELPERS/DATA\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Internal helper for all children addition needs\n     *\n     * @param child {var} the element to add\n     * @throws {Error} if the given element is already a child\n     *     of this element\n     */\n    _addChildImpl(child) {\n      if (child._parent === this) {\n        throw new Error(\"Child is already in: \" + child);\n      }\n\n      if (child.__root) {\n        throw new Error(\"Root elements could not be inserted into other ones.\");\n      }\n\n      // Remove from previous parent\n      if (child._parent) {\n        child._parent.remove(child);\n      }\n\n      // Convert to child of this object\n      child._parent = this;\n\n      // Prepare array\n      if (!this._children) {\n        this._children = [];\n      }\n\n      // Schedule children update\n      if (this._domNode) {\n        this._scheduleChildrenUpdate();\n      }\n    },\n\n    /**\n     * Internal helper for all children removal needs\n     *\n     * @param child {qx.html.Element} the removed element\n     * @throws {Error} if the given element is not a child\n     *     of this element\n     */\n    _removeChildImpl(child) {\n      if (child._parent !== this) {\n        throw new Error(\"Has no child: \" + child);\n      }\n\n      // Schedule children update\n      if (this._domNode) {\n        this._scheduleChildrenUpdate();\n      }\n\n      // Remove reference to old parent\n      delete child._parent;\n    },\n\n    /**\n     * Internal helper for all children move needs\n     *\n     * @param child {qx.html.Element} the moved element\n     * @throws {Error} if the given element is not a child\n     *     of this element\n     */\n    _moveChildImpl(child) {\n      if (child._parent !== this) {\n        throw new Error(\"Has no child: \" + child);\n      }\n\n      // Schedule children update\n      if (this._domNode) {\n        this._scheduleChildrenUpdate();\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      CHILDREN MANAGEMENT (EXECUTED ON THE PARENT)\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns a copy of the internal children structure.\n     *\n     * Please do not modify the array in place. If you need\n     * to work with the data in such a way make yourself\n     * a copy of the data first.\n     *\n     * @return {Array} the children list\n     */\n    getChildren() {\n      return this._children || null;\n    },\n\n    /**\n     * Get a child element at the given index\n     *\n     * @param index {Integer} child index\n     * @return {qx.html.Element|null} The child element or <code>null</code> if\n     *     no child is found at that index.\n     */\n    getChild(index) {\n      var children = this._children;\n      return (children && children[index]) || null;\n    },\n\n    /**\n     * Returns whether the element has any child nodes\n     *\n     * @return {Boolean} Whether the element has any child nodes\n     */\n    hasChildren() {\n      var children = this._children;\n      return children && children[0] !== undefined;\n    },\n\n    /**\n     * Find the position of the given child\n     *\n     * @param child {qx.html.Element} the child\n     * @return {Integer} returns the position. If the element\n     *     is not a child <code>-1</code> will be returned.\n     */\n    indexOf(child) {\n      var children = this._children;\n      return children ? children.indexOf(child) : -1;\n    },\n\n    /**\n     * Whether the given element is a child of this element.\n     *\n     * @param child {qx.html.Element} the child\n     * @return {Boolean} Returns <code>true</code> when the given\n     *    element is a child of this element.\n     */\n    hasChild(child) {\n      var children = this._children;\n      return children && children.indexOf(child) !== -1;\n    },\n\n    /**\n     * Append all given children at the end of this element.\n     *\n     * @param varargs {qx.html.Element} elements to insert\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    add(varargs) {\n      var self = this;\n      function addImpl(arr) {\n        arr.forEach(function (child) {\n          if (child instanceof qx.data.Array || qx.lang.Type.isArray(child)) {\n            addImpl(child);\n          } else {\n            self._addChildImpl(child);\n            self._children.push(child);\n          }\n        });\n      }\n      addImpl(qx.lang.Array.fromArguments(arguments));\n\n      // Chaining support\n      return this;\n    },\n\n    /**\n     * Inserts a new element into this element at the given position.\n     *\n     * @param child {qx.html.Element} the element to insert\n     * @param index {Integer} the index (starts at 0 for the\n     *     first child) to insert (the index of the following\n     *     children will be increased by one)\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    addAt(child, index) {\n      this._addChildImpl(child);\n      qx.lang.Array.insertAt(this._children, child, index);\n\n      // Chaining support\n      return this;\n    },\n\n    /**\n     * Removes all given children\n     *\n     * @param childs {qx.html.Element} children to remove\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    remove(childs) {\n      var children = this._children;\n      if (!children) {\n        return this;\n      }\n\n      var self = this;\n      function removeImpl(arr) {\n        arr.forEach(function (child) {\n          if (child instanceof qx.data.Array || qx.lang.Type.isArray(child)) {\n            removeImpl(child);\n          } else {\n            self._removeChildImpl(child);\n            qx.lang.Array.remove(children, child);\n          }\n        });\n      }\n      removeImpl(qx.lang.Array.fromArguments(arguments));\n\n      // Chaining support\n      return this;\n    },\n\n    /**\n     * Removes the child at the given index\n     *\n     * @param index {Integer} the position of the\n     *     child (starts at 0 for the first child)\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    removeAt(index) {\n      var children = this._children;\n      if (!children) {\n        throw new Error(\"Has no children!\");\n      }\n\n      var child = children[index];\n      if (!child) {\n        throw new Error(\"Has no child at this position!\");\n      }\n\n      this._removeChildImpl(child);\n      qx.lang.Array.removeAt(this._children, index);\n\n      // Chaining support\n      return this;\n    },\n\n    /**\n     * Remove all children from this element.\n     *\n     * @return {qx.html.Element} A reference to this.\n     */\n    removeAll() {\n      var children = this._children;\n      if (children) {\n        for (var i = 0, l = children.length; i < l; i++) {\n          this._removeChildImpl(children[i]);\n        }\n\n        // Clear array\n        children.length = 0;\n      }\n\n      // Chaining support\n      return this;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      CHILDREN MANAGEMENT (EXECUTED ON THE CHILD)\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the parent of this element.\n     *\n     * @return {qx.html.Element|null} The parent of this element\n     */\n    getParent() {\n      return this._parent || null;\n    },\n\n    /**\n     * Insert self into the given parent. Normally appends self to the end,\n     * but optionally a position can be defined. With index <code>0</code> it\n     * will be inserted at the begin.\n     *\n     * @param parent {qx.html.Element} The new parent of this element\n     * @param index {Integer?null} Optional position\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    insertInto(parent, index) {\n      parent._addChildImpl(this);\n\n      if (index == null) {\n        parent._children.push(this);\n      } else {\n        qx.lang.Array.insertAt(this._children, this, index);\n      }\n\n      return this;\n    },\n\n    /**\n     * Insert self before the given (related) element\n     *\n     * @param rel {qx.html.Element} the related element\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    insertBefore(rel) {\n      var parent = rel._parent;\n\n      parent._addChildImpl(this);\n      qx.lang.Array.insertBefore(parent._children, this, rel);\n\n      return this;\n    },\n\n    /**\n     * Insert self after the given (related) element\n     *\n     * @param rel {qx.html.Element} the related element\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    insertAfter(rel) {\n      var parent = rel._parent;\n\n      parent._addChildImpl(this);\n      qx.lang.Array.insertAfter(parent._children, this, rel);\n\n      return this;\n    },\n\n    /**\n     * Move self to the given index in the current parent.\n     *\n     * @param index {Integer} the index (starts at 0 for the first child)\n     * @return {qx.html.Element} this object (for chaining support)\n     * @throws {Error} when the given element is not child\n     *      of this element.\n     */\n    moveTo(index) {\n      var parent = this._parent;\n\n      parent._moveChildImpl(this);\n\n      var oldIndex = parent._children.indexOf(this);\n\n      if (oldIndex === index) {\n        throw new Error(\"Could not move to same index!\");\n      } else if (oldIndex < index) {\n        index--;\n      }\n\n      qx.lang.Array.removeAt(parent._children, oldIndex);\n      qx.lang.Array.insertAt(parent._children, this, index);\n\n      return this;\n    },\n\n    /**\n     * Move self before the given (related) child.\n     *\n     * @param rel {qx.html.Element} the related child\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    moveBefore(rel) {\n      var parent = this._parent;\n      return this.moveTo(parent._children.indexOf(rel));\n    },\n\n    /**\n     * Move self after the given (related) child.\n     *\n     * @param rel {qx.html.Element} the related child\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    moveAfter(rel) {\n      var parent = this._parent;\n      return this.moveTo(parent._children.indexOf(rel) + 1);\n    },\n\n    /**\n     * Remove self from the current parent.\n     *\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    free() {\n      var parent = this._parent;\n      if (!parent) {\n        throw new Error(\"Has no parent to remove from.\");\n      }\n\n      if (!parent._children) {\n        return this;\n      }\n\n      parent._removeChildImpl(this);\n      qx.lang.Array.remove(parent._children, this);\n\n      return this;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      DOM ELEMENT ACCESS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the DOM element (if created). Please use this with caution.\n     * It is better to make all changes to the object itself using the public\n     * API rather than to the underlying DOM element.\n     *\n     * @param create {Boolean?} if true, the DOM node will be created if it does\n     * not exist\n     * @return {Element|null} The DOM element node, if available.\n     */\n    getDomElement(create) {\n      if (create && !this._domNode) {\n        this.flush();\n      }\n      return this._domNode || null;\n    },\n\n    /**\n     * Returns the nodeName of the DOM element.\n     *\n     * @return {String} The node name\n     */\n    getNodeName() {\n      return this._nodeName;\n    },\n\n    /**\n     * Sets the nodeName of the DOM element.\n     *\n     * @param name {String} The node name\n     */\n    setNodeName(name) {\n      if (\n        this._domNode &&\n        name.toLowerCase() !== this._nodeName.toLowerCase()\n      ) {\n        throw new Error(\n          \"Cannot change the name of the node after the DOM node has been created\"\n        );\n      }\n      this._nodeName = name;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EXCLUDE SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Marks the element as included which means it will be moved into\n     * the DOM again and synced with the internal data representation.\n     *\n     * @return {Node} this object (for chaining support)\n     */\n    include() {\n      if (this._included) {\n        return this;\n      }\n\n      delete this._included;\n\n      if (this._parent) {\n        this._parent._scheduleChildrenUpdate();\n      }\n\n      return this;\n    },\n\n    /**\n     * Marks the element as excluded which means it will be removed\n     * from the DOM and ignored for updates until it gets included again.\n     *\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    exclude() {\n      if (!this._included) {\n        return this;\n      }\n\n      this._included = false;\n\n      if (this._parent) {\n        this._parent._scheduleChildrenUpdate();\n      }\n\n      return this;\n    },\n\n    /**\n     * Whether the element is part of the DOM\n     *\n     * @return {Boolean} Whether the element is part of the DOM.\n     */\n    isIncluded() {\n      return this._included === true;\n    },\n\n    /**\n     * Apply method for visible property\n     */\n    _applyVisible(value) {\n      // Nothing - to be overridden\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Registers a property and the implementations used to read the property value\n     * from the DOM and to set the property value onto the DOM.  This allows the element\n     * to have a simple `setProperty` method that knows how to read and write the value.\n     *\n     * You do not have to specify a getter or a setter - by default the setter will use\n     * `_applyProperty` for backwards compatibility, and there is no getter implementation.\n     *\n     * The functions are called with `this` set to this Element.  The getter takes\n     * the property name as a parameter and is expected to return a value, the setter takes\n     * the property name and value as parameters, and returns nothing.\n     *\n     * @param key {String} the property name\n     * @param getter {Function?} function to read from the DOM\n     * @param setter {Function?} function to copy to the DOM\n     * @param serialize {Function?} function to serialize the value to HTML\n     */\n    registerProperty(key, get, set, serialize) {\n      if (!this._properties) {\n        this._properties = {};\n      }\n      if (this._properties[key]) {\n        this.debug(\n          \"Overridding property \" +\n            key +\n            \" in \" +\n            this +\n            \"[\" +\n            this.classname +\n            \"]\"\n        );\n      }\n      if (!set) {\n        set = qx.lang.Function.bind(function (value, key) {\n          this._applyProperty(key, value);\n        }, this);\n        qx.log.Logger.deprecatedMethodWarning(\n          this._applyProperty,\n          \"The method '_applyProperty' is deprecated.  Please use `registerProperty` instead (property '\" +\n            key +\n            \"' in \" +\n            this.classname +\n            \")\"\n        );\n      }\n      this._properties[key] = {\n        get: get,\n        set: set,\n        serialize: serialize,\n        value: undefined\n      };\n    },\n\n    /**\n     * Applies a special property with the given value.\n     *\n     * This property apply routine can be easily overwritten and\n     * extended by sub classes to add new low level features which\n     * are not easily possible using styles and attributes.\n     *\n     * Note that this implementation is for backwards compatibility and\n     * implementations\n     *\n     * @param name {String} Unique property identifier\n     * @param value {var} Any valid value (depends on the property)\n     * @return {qx.html.Element} this object (for chaining support)\n     * @abstract\n     * @deprecated {6.0} please use `registerProperty` instead\n     */\n    _applyProperty(name, value) {\n      // empty implementation\n    },\n\n    /**\n     * Set up the given property.\n     *\n     * @param key {String} the name of the property\n     * @param value {var} the value\n     * @param direct {Boolean?false} Whether the value should be applied\n     *    directly (without queuing)\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    _setProperty(key, value, direct) {\n      if (!this._properties || !this._properties[key]) {\n        this.registerProperty(key, null, null);\n      }\n\n      if (this._properties[key].value == value) {\n        return this;\n      }\n\n      this._properties[key].value = value;\n\n      // Uncreated elements simply copy all data\n      // on creation. We don't need to remember any\n      // jobs. It is a simple full list copy.\n      if (this._domNode) {\n        // Omit queuing in direct mode\n        if (direct) {\n          this._properties[key].set.call(this, value, key);\n          return this;\n        }\n\n        // Dynamically create if needed\n        if (!this._propertyJobs) {\n          this._propertyJobs = {};\n        }\n\n        // Store job info\n        this._propertyJobs[key] = true;\n\n        // Register modification\n        qx.html.Element._modified[this.toHashCode()] = this;\n        qx.html.Element._scheduleFlush(\"element\");\n      }\n\n      return this;\n    },\n\n    /**\n     * Removes the given misc\n     *\n     * @param key {String} the name of the misc\n     * @param direct {Boolean?false} Whether the value should be removed\n     *    directly (without queuing)\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    _removeProperty(key, direct) {\n      return this._setProperty(key, null, direct);\n    },\n\n    /**\n     * Get the value of the given misc.\n     *\n     * @param key {String} name of the misc\n     * @param direct {Boolean?false} Whether the value should be obtained directly (without queuing)\n     * @return {var} the value of the misc\n     */\n    _getProperty(key, direct) {\n      if (!this._properties || !this._properties[key]) {\n        return null;\n      }\n\n      var value = this._properties[key].value;\n      if (this._domNode) {\n        if (direct || value === undefined) {\n          var fn = this._properties[key].get;\n          if (fn) {\n            this._properties[key].value = value = fn.call(this, key);\n          }\n        }\n      }\n\n      return value === undefined || value == null ? null : value;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds an event listener to the element.\n     *\n     * @param type {String} Name of the event\n     * @param listener {Function} Function to execute on event\n     * @param self {Object ? null} Reference to the 'this' variable inside\n     *         the event listener. When not given, the corresponding dispatcher\n     *         usually falls back to a default, which is the target\n     *         by convention. Note this is not a strict requirement, i.e.\n     *         custom dispatchers can follow a different strategy.\n     * @param capture {Boolean ? false} Whether capturing should be enabled\n     * @return {var} An opaque id, which can be used to remove the event listener\n     *         using the {@link #removeListenerById} method.\n     */\n    addListener(type, listener, self, capture) {\n      if (this.$$disposed) {\n        return null;\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var msg =\n          \"Failed to add event listener for type '\" +\n          type +\n          \"'\" +\n          \" to the target '\" +\n          this +\n          \"': \";\n\n        this.assertString(type, msg + \"Invalid event type.\");\n        this.assertFunction(listener, msg + \"Invalid callback function\");\n\n        if (self !== undefined) {\n          this.assertObject(self, \"Invalid context for callback.\");\n        }\n\n        if (capture !== undefined) {\n          this.assertBoolean(capture, \"Invalid capture flag.\");\n        }\n      }\n\n      const registerDomEvent = () => {\n        if (this._domNode) {\n          return qx.event.Registration.addListener(\n            this._domNode,\n            type,\n            listener,\n            self,\n            capture\n          );\n        }\n\n        if (!this.__eventValues) {\n          this.__eventValues = {};\n        }\n\n        if (capture == null) {\n          capture = false;\n        }\n\n        var unique = qx.event.Manager.getNextUniqueId();\n        var id = type + (capture ? \"|capture|\" : \"|bubble|\") + unique;\n\n        this.__eventValues[id] = {\n          type: type,\n          listener: listener,\n          self: self,\n          capture: capture,\n          unique: unique\n        };\n\n        return id;\n      };\n\n      if (qx.Class.supportsEvent(this, type)) {\n        let id = super.addListener(type, listener, self, capture);\n        id.domEventId = registerDomEvent();\n        return id;\n      }\n\n      return registerDomEvent();\n    },\n\n    /**\n     * Removes an event listener from the element.\n     *\n     * @param type {String} Name of the event\n     * @param listener {Function} Function to execute on event\n     * @param self {Object} Execution context of given function\n     * @param capture {Boolean ? false} Whether capturing should be enabled\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    removeListener(type, listener, self, capture) {\n      if (this.$$disposed) {\n        return null;\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var msg =\n          \"Failed to remove event listener for type '\" +\n          type +\n          \"'\" +\n          \" from the target '\" +\n          this +\n          \"': \";\n\n        this.assertString(type, msg + \"Invalid event type.\");\n        this.assertFunction(listener, msg + \"Invalid callback function\");\n\n        if (self !== undefined) {\n          this.assertObject(self, \"Invalid context for callback.\");\n        }\n\n        if (capture !== undefined) {\n          this.assertBoolean(capture, \"Invalid capture flag.\");\n        }\n      }\n\n      if (qx.Class.supportsEvent(this, type)) {\n        super.removeListener(type, listener, self, capture);\n      }\n\n      if (this._domNode) {\n        if (\n          listener.$$wrapped_callback &&\n          listener.$$wrapped_callback[type + this.toHashCode()]\n        ) {\n          var callback = listener.$$wrapped_callback[type + this.toHashCode()];\n          delete listener.$$wrapped_callback[type + this.toHashCode()];\n          listener = callback;\n        }\n        qx.event.Registration.removeListener(\n          this._domNode,\n          type,\n          listener,\n          self,\n          capture\n        );\n      } else {\n        var values = this.__eventValues;\n        var entry;\n\n        if (capture == null) {\n          capture = false;\n        }\n\n        for (var key in values) {\n          entry = values[key];\n\n          // Optimized for performance: Testing references first\n          if (\n            entry.listener === listener &&\n            entry.self === self &&\n            entry.capture === capture &&\n            entry.type === type\n          ) {\n            delete values[key];\n            break;\n          }\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Removes an event listener from an event target by an id returned by\n     * {@link #addListener}\n     *\n     * @param id {var} The id returned by {@link #addListener}\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    removeListenerById(id) {\n      if (this.$$disposed) {\n        return null;\n      }\n\n      if (id.domEventId) {\n        if (this._domNode) {\n          qx.event.Registration.removeListenerById(\n            this._domNode,\n            id.domEventId\n          );\n        }\n        delete id.domEventId;\n        super.removeListenerById(id);\n      } else {\n        if (this._domNode) {\n          qx.event.Registration.removeListenerById(this._domNode, id);\n        } else {\n          delete this.__eventValues[id];\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Check if there are one or more listeners for an event type.\n     *\n     * @param type {String} name of the event type\n     * @param capture {Boolean ? false} Whether to check for listeners of\n     *         the bubbling or of the capturing phase.\n     * @return {Boolean} Whether the object has a listener of the given type.\n     */\n    hasListener(type, capture) {\n      if (this.$$disposed) {\n        return false;\n      }\n\n      if (qx.Class.supportsEvent(this, type)) {\n        let has = super.hasListener(type, capture);\n        if (has) {\n          return true;\n        }\n      }\n\n      if (this._domNode) {\n        if (qx.event.Registration.hasListener(this._domNode, type, capture)) {\n          return true;\n        }\n      } else {\n        var values = this.__eventValues;\n        var entry;\n\n        if (capture == null) {\n          capture = false;\n        }\n\n        for (var key in values) {\n          entry = values[key];\n\n          // Optimized for performance: Testing fast types first\n          if (entry.capture === capture && entry.type === type) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Serializes and returns all event listeners attached to this element\n     * @return {Map[]} an Array containing a map for each listener. The maps\n     * have the following keys:\n     * <ul>\n     *   <li><code>type</code> (String): Event name</li>\n     *   <li><code>handler</code> (Function): Callback function</li>\n     *   <li><code>self</code> (Object): The callback's context</li>\n     *   <li><code>capture</code> (Boolean): If <code>true</code>, the listener is\n     * attached to the capturing phase</li>\n     * </ul>\n     */\n    getListeners() {\n      if (this.$$disposed) {\n        return null;\n      }\n\n      var listeners = [];\n      qx.lang.Array.append(\n        listeners,\n        qx.event.Registration.serializeListeners(this) || []\n      );\n\n      if (this._domNode) {\n        qx.lang.Array.append(\n          listeners,\n          qx.event.Registration.serializeListeners(this._domNode) || []\n        );\n      }\n\n      for (var id in this.__eventValues) {\n        var listenerData = this.__eventValues[id];\n        listeners.push({\n          type: listenerData.type,\n          handler: listenerData.listener,\n          self: listenerData.self,\n          capture: listenerData.capture\n        });\n      }\n\n      return listeners;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCT\n  *****************************************************************************\n  */\n\n  destruct() {\n    var el = this._domNode;\n    if (el) {\n      qx.event.Registration.getManager(el).removeAllListeners(el);\n      el.$$element = \"\";\n      delete el.$$elementObject;\n      el.$$qxObjectHash = \"\";\n      delete el.$$qxObject;\n    }\n\n    if (!qx.core.ObjectRegistry.inShutDown) {\n      var parent = this._parent;\n      if (parent && !parent.$$disposed) {\n        parent.remove(this);\n      }\n    }\n\n    this._disposeArray(\"_children\");\n\n    this._properties =\n      this._propertyJobs =\n      this._domNode =\n      this._parent =\n      this.__eventValues =\n        null;\n  }\n});\n"
  ]
}