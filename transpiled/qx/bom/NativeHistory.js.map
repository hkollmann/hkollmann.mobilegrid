{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/bom/NativeHistory.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "bom",
    "History",
    "implement",
    "core",
    "IDisposable",
    "construct",
    "__attachListeners",
    "members",
    "__checkOnHashChange",
    "SUPPORTS_HASH_CHANGE_EVENT",
    "boundFunc",
    "lang",
    "Function",
    "bind",
    "__onHashChange",
    "event",
    "GlobalError",
    "observeMethod",
    "Event",
    "addNativeListener",
    "window",
    "Idle",
    "getInstance",
    "addListener",
    "__detatchListeners",
    "removeNativeListener",
    "removeListener",
    "currentState",
    "_readState",
    "Type",
    "isString",
    "getState",
    "_onHistoryLoad",
    "_decode",
    "_getHash",
    "_writeState",
    "Environment",
    "select",
    "opera",
    "state",
    "Timer",
    "once",
    "_setHash",
    "_encode",
    "destruct",
    "NativeHistory"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Default history manager implementation. Either polls for URL fragment\n * identifier (hash) changes or uses the native \"hashchange\" event.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n * @internal\n */\nqx.Class.define(\"qx.bom.NativeHistory\", {\n  extend: qx.bom.History,\n  implement: [qx.core.IDisposable],\n\n  construct() {\n    super();\n    this.__attachListeners();\n  },\n\n  members: {\n    __checkOnHashChange: null,\n\n    /**\n     * Attach hash change listeners\n     */\n    __attachListeners() {\n      if (qx.bom.History.SUPPORTS_HASH_CHANGE_EVENT) {\n        var boundFunc = qx.lang.Function.bind(this.__onHashChange, this);\n        this.__checkOnHashChange =\n          qx.event.GlobalError.observeMethod(boundFunc);\n        qx.bom.Event.addNativeListener(\n          window,\n          \"hashchange\",\n          this.__checkOnHashChange\n        );\n      } else {\n        qx.event.Idle.getInstance().addListener(\n          \"interval\",\n          this.__onHashChange,\n          this\n        );\n      }\n    },\n\n    /**\n     * Remove hash change listeners\n     */\n    __detatchListeners() {\n      if (qx.bom.History.SUPPORTS_HASH_CHANGE_EVENT) {\n        qx.bom.Event.removeNativeListener(\n          window,\n          \"hashchange\",\n          this.__checkOnHashChange\n        );\n      } else {\n        qx.event.Idle.getInstance().removeListener(\n          \"interval\",\n          this.__onHashChange,\n          this\n        );\n      }\n    },\n\n    /**\n     * hash change event handler\n     */\n    __onHashChange() {\n      var currentState = this._readState();\n\n      if (\n        qx.lang.Type.isString(currentState) &&\n        currentState != this.getState()\n      ) {\n        this._onHistoryLoad(currentState);\n      }\n    },\n\n    /**\n     * Browser dependent function to read the current state of the history\n     *\n     * @return {String} current state of the browser history\n     */\n    _readState() {\n      return this._decode(this._getHash());\n    },\n\n    /**\n     * Save a state into the browser history.\n     *\n     * @param state {String} state to save\n     */\n    _writeState: qx.core.Environment.select(\"engine.name\", {\n      opera(state) {\n        qx.event.Timer.once(\n          function () {\n            this._setHash(this._encode(state));\n          },\n          this,\n          0\n        );\n      },\n\n      default(state) {\n        this._setHash(this._encode(state));\n      }\n    })\n  },\n\n  destruct() {\n    this.__detatchListeners();\n  }\n});\n"
  ]
}