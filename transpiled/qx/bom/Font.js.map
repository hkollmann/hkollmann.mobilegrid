{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/bom/Font.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "size",
    "family",
    "__lookupMap",
    "fontFamily",
    "fontSize",
    "fontWeight",
    "fontStyle",
    "textDecoration",
    "lineHeight",
    "color",
    "textShadow",
    "letterSpacing",
    "undefined",
    "setSize",
    "setFamily",
    "statics",
    "fromString",
    "str",
    "font",
    "bom",
    "Font",
    "parts",
    "split",
    "name",
    "part",
    "i",
    "length",
    "setBold",
    "setItalic",
    "setDecoration",
    "temp",
    "parseInt",
    "lang",
    "String",
    "contains",
    "push",
    "fromConfig",
    "config",
    "set",
    "__defaultStyles",
    "getDefaultStyles",
    "properties",
    "check",
    "nullable",
    "apply",
    "comparisonString",
    "init",
    "version",
    "value",
    "test",
    "bold",
    "italic",
    "decoration",
    "weight",
    "members",
    "_applySize",
    "old",
    "_applyLineHeight",
    "_applyFamily",
    "l",
    "indexOf",
    "_applyBold",
    "_applyItalic",
    "_applyDecoration",
    "_applyColor",
    "theme",
    "manager",
    "Color",
    "getInstance",
    "resolve",
    "_applyWeight",
    "_applyTextShadow",
    "_applyLetterSpacing",
    "getStyles"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n     * Mustafa Sak (msak)\n\n************************************************************************ */\n\n/**\n * A wrapper for CSS font styles. Fond objects can be applied to instances\n * of {@link qx.html.Element}.\n */\nqx.Class.define(\"qx.bom.Font\", {\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param size {String?} The font size (Unit: pixel)\n   * @param family {String[]?} A sorted list of font families\n   */\n  construct(size, family) {\n    super();\n\n    this.__lookupMap = {\n      fontFamily: \"\",\n      fontSize: null,\n      fontWeight: null,\n      fontStyle: null,\n      textDecoration: null,\n      lineHeight: null,\n      color: null,\n      textShadow: null,\n      letterSpacing: null\n    };\n\n    if (size !== undefined) {\n      this.setSize(size);\n    }\n\n    if (family !== undefined) {\n      this.setFamily(family);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Converts a typical CSS font definition string to an font object\n     *\n     * Example string: <code>bold italic 20px Arial</code>\n     *\n     * @param str {String} the CSS string\n     * @return {qx.bom.Font} the created instance\n     */\n    fromString(str) {\n      var font = new qx.bom.Font();\n      var parts = str.split(/\\s+/);\n      var name = [];\n      var part;\n\n      for (var i = 0; i < parts.length; i++) {\n        switch ((part = parts[i])) {\n          case \"bold\":\n            font.setBold(true);\n            break;\n\n          case \"italic\":\n            font.setItalic(true);\n            break;\n\n          case \"underline\":\n            font.setDecoration(\"underline\");\n            break;\n\n          default:\n            var temp = parseInt(part, 10);\n\n            if (temp == part || qx.lang.String.contains(part, \"px\")) {\n              font.setSize(temp);\n            } else {\n              name.push(part);\n            }\n\n            break;\n        }\n      }\n\n      if (name.length > 0) {\n        font.setFamily(name);\n      }\n\n      return font;\n    },\n\n    /**\n     * Converts a map property definition into a font object.\n     *\n     * @param config {Map} map of property values\n     * @return {qx.bom.Font} the created instance\n     */\n    fromConfig(config) {\n      var font = new qx.bom.Font();\n      font.set(config);\n      return font;\n    },\n\n    /** @type {Map} Default (empty) CSS styles */\n    __defaultStyles: {\n      fontFamily: \"\",\n      fontSize: \"\",\n      fontWeight: \"\",\n      fontStyle: \"\",\n      textDecoration: \"\",\n      lineHeight: 1.2,\n      color: \"\",\n      textShadow: \"\",\n      letterSpacing: \"\"\n    },\n\n    /**\n     * Returns a map of all properties in empty state.\n     *\n     * This is useful for resetting previously configured\n     * font styles.\n     *\n     * @return {Map} Default styles\n     */\n    getDefaultStyles() {\n      return this.__defaultStyles;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** The font size (Unit: pixel) */\n    size: {\n      check: \"Integer\",\n      nullable: true,\n      apply: \"_applySize\"\n    },\n\n    /**\n     * The line height as scaling factor of the default line height. A value\n     * of 1 corresponds to the default line height\n     */\n    lineHeight: {\n      check: \"Number\",\n      nullable: true,\n      apply: \"_applyLineHeight\"\n    },\n\n    /**\n     * Characters that are used to test if the font has loaded properly. These\n     * default to \"WEei\" in `qx.bom.webfont.Validator` and can be overridden\n     * for certain cases like icon fonts that do not provide the predefined\n     * characters.\n     */\n    comparisonString: {\n      check: \"String\",\n      init: null,\n      nullable: true\n    },\n\n    /**\n     * Version identifier that is appended to the URL to be loaded. Fonts\n     * that are defined thru themes may be managed by the resource manager.\n     * In this case updated fonts persist due to aggressive fontface caching\n     * of some browsers. To get around this, set the `version` property to\n     * the version of your font. It will be appended to the CSS URL and forces\n     * the browser to re-validate.\n     *\n     * The version needs to be URL friendly, so only characters, numbers,\n     * dash and dots are allowed here.\n     */\n    version: {\n      check(value) {\n        return (\n          value === null ||\n          (typeof value === \"string\" && /^[a-zA-Z0-9.-]+$/.test(value))\n        );\n      },\n      init: null,\n      nullable: true\n    },\n\n    /** A sorted list of font families */\n    family: {\n      check: \"Array\",\n      nullable: true,\n      apply: \"_applyFamily\"\n    },\n\n    /** Whether the font is bold */\n    bold: {\n      check: \"Boolean\",\n      nullable: true,\n      apply: \"_applyBold\"\n    },\n\n    /** Whether the font is italic */\n    italic: {\n      check: \"Boolean\",\n      nullable: true,\n      apply: \"_applyItalic\"\n    },\n\n    /** The text decoration for this font */\n    decoration: {\n      check: [\"underline\", \"line-through\", \"overline\"],\n      nullable: true,\n      apply: \"_applyDecoration\"\n    },\n\n    /** The text color for this font */\n    color: {\n      check: \"Color\",\n      nullable: true,\n      apply: \"_applyColor\"\n    },\n\n    /** The text shadow for this font */\n    textShadow: {\n      nullable: true,\n      check: \"String\",\n      apply: \"_applyTextShadow\"\n    },\n\n    /** The weight property of the font as opposed to just setting it to 'bold' by setting the bold property to true */\n    weight: {\n      nullable: true,\n      check: \"String\",\n      apply: \"_applyWeight\"\n    },\n\n    /** The Letter Spacing (Unit: pixel) */\n    letterSpacing: {\n      check: \"Integer\",\n      nullable: true,\n      apply: \"_applyLetterSpacing\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __lookupMap: null,\n\n    // property apply\n    _applySize(value, old) {\n      this.__lookupMap.fontSize = value === null ? null : value + \"px\";\n    },\n\n    _applyLineHeight(value, old) {\n      this.__lookupMap.lineHeight = value === null ? null : value;\n    },\n\n    // property apply\n    _applyFamily(value, old) {\n      var family = \"\";\n\n      for (var i = 0, l = value.length; i < l; i++) {\n        // in FireFox 2 and WebKit fonts like 'serif' or 'sans-serif' must\n        // not be quoted!\n        if (value[i].indexOf(\" \") > 0) {\n          family += '\"' + value[i] + '\"';\n        } else {\n          family += value[i];\n        }\n\n        if (i !== l - 1) {\n          family += \",\";\n        }\n      }\n\n      // font family is a special case. In order to render the labels correctly\n      // we have to return a font family - even if it's an empty string to prevent\n      // the browser from applying the element style\n      this.__lookupMap.fontFamily = family;\n    },\n\n    // property apply\n    _applyBold(value, old) {\n      this.__lookupMap.fontWeight =\n        value == null ? null : value ? \"bold\" : \"normal\";\n    },\n\n    // property apply\n    _applyItalic(value, old) {\n      this.__lookupMap.fontStyle =\n        value == null ? null : value ? \"italic\" : \"normal\";\n    },\n\n    // property apply\n    _applyDecoration(value, old) {\n      this.__lookupMap.textDecoration = value == null ? null : value;\n    },\n\n    // property apply\n    _applyColor(value, old) {\n      this.__lookupMap.color = null;\n      if (value) {\n        this.__lookupMap.color =\n          qx.theme.manager.Color.getInstance().resolve(value);\n      }\n    },\n\n    // property apply\n    _applyWeight(value, old) {\n      this.__lookupMap.fontWeight = value;\n    },\n\n    // property apply\n    _applyTextShadow(value, old) {\n      this.__lookupMap.textShadow = value == null ? null : value;\n    },\n\n    // property apply\n    _applyLetterSpacing(value, old) {\n      this.__lookupMap.letterSpacing = value === null ? null : value + \"px\";\n    },\n\n    /**\n     * Get a map of all CSS styles, which will be applied to the widget. Only\n     * the styles which are set are returned.\n     *\n     * @return {Map} Map containing the current styles. The keys are property\n     * names which can directly be used with the <code>set</code> method of each\n     * widget.\n     */\n    getStyles() {\n      return this.__lookupMap;\n    }\n  }\n});\n"
  ]
}