{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/bom/element/Location.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__style",
    "elem",
    "style",
    "bom",
    "element",
    "Style",
    "get",
    "COMPUTED_MODE",
    "__num",
    "parseInt",
    "__computeScroll",
    "left",
    "top",
    "win",
    "dom",
    "Node",
    "getWindow",
    "Viewport",
    "getScrollLeft",
    "getScrollTop",
    "__computeBody",
    "core",
    "Environment",
    "select",
    "mshtml",
    "doc",
    "getDocument",
    "body",
    "clientLeft",
    "documentElement",
    "clientTop",
    "webkit",
    "offsetLeft",
    "offsetTop",
    "gecko",
    "BoxSizing",
    "__computeOffset",
    "rect",
    "getBoundingClientRect",
    "Math",
    "round",
    "mode",
    "tagName",
    "location",
    "__getBodyLocation",
    "offset",
    "scroll",
    "elementWidth",
    "elementHeight",
    "SVGElement",
    "width",
    "height",
    "offsetWidth",
    "offsetHeight",
    "right",
    "bottom",
    "overX",
    "scrollWidth",
    "overY",
    "scrollHeight",
    "scrollLeft",
    "scrollTop",
    "getLeft",
    "getTop",
    "getRight",
    "getBottom",
    "getRelative",
    "elem1",
    "elem2",
    "mode1",
    "mode2",
    "loc1",
    "loc2",
    "getPosition",
    "getOffsetParent",
    "document",
    "offsetParent",
    "test",
    "Location"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n   ======================================================================\n\n   This class contains code based on the following work:\n\n   * jQuery Dimension Plugin\n       http://jquery.com/\n       Version 1.1.3\n\n     Copyright:\n       (c) 2007, Paul Bakaus & Brandon Aaron\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n     Authors:\n       Paul Bakaus\n       Brandon Aaron\n\n************************************************************************ */\n\n/**\n * Query the location of an arbitrary DOM element in relation to its top\n * level body element. Works in all major browsers:\n *\n * * Mozilla 1.5 + 2.0\n * * Internet Explorer 6.0 + 7.0 (both standard & quirks mode)\n * * Opera 9.2\n * * Safari 3.0 beta\n *\n * @ignore(SVGElement)\n */\nqx.Bootstrap.define(\"qx.bom.element.Location\", {\n  statics: {\n    /**\n     * Queries a style property for the given element\n     *\n     * @param elem {Element} DOM element to query\n     * @param style {String} Style property\n     * @return {String} Value of given style property\n     */\n    __style(elem, style) {\n      return qx.bom.element.Style.get(\n        elem,\n        style,\n        qx.bom.element.Style.COMPUTED_MODE,\n        false\n      );\n    },\n\n    /**\n     * Queries a style property for the given element and parses it to an integer value\n     *\n     * @param elem {Element} DOM element to query\n     * @param style {String} Style property\n     * @return {Integer} Value of given style property\n     */\n    __num(elem, style) {\n      return (\n        parseInt(\n          qx.bom.element.Style.get(\n            elem,\n            style,\n            qx.bom.element.Style.COMPUTED_MODE,\n            false\n          ),\n\n          10\n        ) || 0\n      );\n    },\n\n    /**\n     * Computes the scroll offset of the given element relative to the document\n     * <code>body</code>.\n     *\n     * @param elem {Element} DOM element to query\n     * @return {Map} Map which contains the <code>left</code> and <code>top</code> scroll offsets\n     */\n    __computeScroll(elem) {\n      var left = 0,\n        top = 0;\n      // Find window\n      var win = qx.dom.Node.getWindow(elem);\n\n      left -= qx.bom.Viewport.getScrollLeft(win);\n      top -= qx.bom.Viewport.getScrollTop(win);\n\n      return {\n        left: left,\n        top: top\n      };\n    },\n\n    /**\n     * Computes the offset of the given element relative to the document\n     * <code>body</code>.\n     *\n     * @param elem {Element} DOM element to query\n     * @return {Map} Map which contains the <code>left</code> and <code>top</code> offsets\n     */\n    __computeBody: qx.core.Environment.select(\"engine.name\", {\n      mshtml(elem) {\n        // Find body element\n        var doc = qx.dom.Node.getDocument(elem);\n        var body = doc.body;\n\n        var left = 0;\n        var top = 0;\n\n        left -= body.clientLeft + doc.documentElement.clientLeft;\n        top -= body.clientTop + doc.documentElement.clientTop;\n\n        if (!qx.core.Environment.get(\"browser.quirksmode\")) {\n          left += this.__num(body, \"borderLeftWidth\");\n          top += this.__num(body, \"borderTopWidth\");\n        }\n\n        return {\n          left: left,\n          top: top\n        };\n      },\n\n      webkit(elem) {\n        // Find body element\n        var doc = qx.dom.Node.getDocument(elem);\n        var body = doc.body;\n\n        // Start with the offset\n        var left = body.offsetLeft;\n        var top = body.offsetTop;\n\n        return {\n          left: left,\n          top: top\n        };\n      },\n\n      gecko(elem) {\n        // Find body element\n        var body = qx.dom.Node.getDocument(elem).body;\n\n        // Start with the offset\n        var left = body.offsetLeft;\n        var top = body.offsetTop;\n\n        // Correct substracted border (only in content-box mode)\n        if (qx.bom.element.BoxSizing.get(body) !== \"border-box\") {\n          left += this.__num(body, \"borderLeftWidth\");\n          top += this.__num(body, \"borderTopWidth\");\n        }\n\n        return {\n          left: left,\n          top: top\n        };\n      },\n\n      // At the moment only correctly supported by Opera\n      default(elem) {\n        // Find body element\n        var body = qx.dom.Node.getDocument(elem).body;\n\n        // Start with the offset\n        var left = body.offsetLeft;\n        var top = body.offsetTop;\n\n        return {\n          left: left,\n          top: top\n        };\n      }\n    }),\n\n    /**\n     * Computes the sum of all offsets of the given element node.\n     *\n     * @signature function(elem)\n     * @param elem {Element} DOM element to query\n     * @return {Map} Map which contains the <code>left</code> and <code>top</code> offsets\n     */\n    __computeOffset(elem) {\n      var rect = elem.getBoundingClientRect();\n\n      // Firefox 3.0 alpha 6 (gecko 1.9) returns floating point numbers\n      // use Math.round() to round them to style compatible numbers\n      // MSHTML returns integer numbers\n      return {\n        left: Math.round(rect.left),\n        top: Math.round(rect.top)\n      };\n    },\n\n    /**\n     * Computes the location of the given element in context of\n     * the document dimensions.\n     *\n     * Supported modes:\n     *\n     * * <code>margin</code>: Calculate from the margin box of the element (bigger than the visual appearance: including margins of given element)\n     * * <code>box</code>: Calculates the offset box of the element (default, uses the same size as visible)\n     * * <code>border</code>: Calculate the border box (useful to align to border edges of two elements).\n     * * <code>scroll</code>: Calculate the scroll box (relevant for absolute positioned content).\n     * * <code>padding</code>: Calculate the padding box (relevant for static/relative positioned content).\n     *\n     * @param elem {Element} DOM element to query\n     * @param mode {String?box} A supported option. See comment above.\n     * @return {Map} Returns a map with <code>left</code>, <code>top</code>,\n     *   <code>right</code> and <code>bottom</code> which contains the distance\n     *   of the element relative to the document.\n     */\n    get(elem, mode) {\n      if (elem.tagName == \"BODY\") {\n        var location = this.__getBodyLocation(elem);\n        var left = location.left;\n        var top = location.top;\n      } else {\n        var body = this.__computeBody(elem);\n        var offset = this.__computeOffset(elem);\n        // Reduce by viewport scrolling.\n        // Hint: getBoundingClientRect returns the location of the\n        // element in relation to the viewport which includes\n        // the scrolling\n        var scroll = this.__computeScroll(elem);\n\n        var left = offset.left + body.left - scroll.left;\n        var top = offset.top + body.top - scroll.top;\n      }\n\n      var elementWidth;\n      var elementHeight;\n      if (elem instanceof SVGElement) {\n        var rect = elem.getBoundingClientRect();\n        elementWidth = rect.width;\n        elementHeight = rect.height;\n      } else {\n        elementWidth = elem.offsetWidth;\n        elementHeight = elem.offsetHeight;\n      }\n\n      var right = left + elementWidth;\n      var bottom = top + elementHeight;\n\n      if (mode) {\n        // In this modes we want the size as seen from a child what means that we want the full width/height\n        // which may be higher than the outer width/height when the element has scrollbars.\n        if (mode == \"padding\" || mode == \"scroll\") {\n          var overX = qx.bom.element.Style.get(elem, \"overflowX\");\n          if (overX == \"scroll\" || overX == \"auto\") {\n            right +=\n              elem.scrollWidth -\n              elementWidth +\n              this.__num(elem, \"borderLeftWidth\") +\n              this.__num(elem, \"borderRightWidth\");\n          }\n\n          var overY = qx.bom.element.Style.get(elem, \"overflowY\");\n          if (overY == \"scroll\" || overY == \"auto\") {\n            bottom +=\n              elem.scrollHeight -\n              elementHeight +\n              this.__num(elem, \"borderTopWidth\") +\n              this.__num(elem, \"borderBottomWidth\");\n          }\n        }\n\n        switch (mode) {\n          case \"padding\":\n            left += this.__num(elem, \"paddingLeft\");\n            top += this.__num(elem, \"paddingTop\");\n            right -= this.__num(elem, \"paddingRight\");\n            bottom -= this.__num(elem, \"paddingBottom\");\n          // no break here\n\n          case \"scroll\":\n            left -= elem.scrollLeft;\n            top -= elem.scrollTop;\n            right -= elem.scrollLeft;\n            bottom -= elem.scrollTop;\n          // no break here\n\n          case \"border\":\n            left += this.__num(elem, \"borderLeftWidth\");\n            top += this.__num(elem, \"borderTopWidth\");\n            right -= this.__num(elem, \"borderRightWidth\");\n            bottom -= this.__num(elem, \"borderBottomWidth\");\n            break;\n\n          case \"margin\":\n            left -= this.__num(elem, \"marginLeft\");\n            top -= this.__num(elem, \"marginTop\");\n            right += this.__num(elem, \"marginRight\");\n            bottom += this.__num(elem, \"marginBottom\");\n            break;\n        }\n      }\n\n      return {\n        left: left,\n        top: top,\n        right: right,\n        bottom: bottom\n      };\n    },\n\n    /**\n     * Get the location of the body element relative to the document.\n     * @param body {Element} The body element.\n     * @return {Map} map with the keys <code>left</code> and <code>top</code>\n     */\n    __getBodyLocation(body) {\n      var top = body.offsetTop;\n      var left = body.offsetLeft;\n\n      top += this.__num(body, \"marginTop\");\n      left += this.__num(body, \"marginLeft\");\n\n      if (qx.core.Environment.get(\"engine.name\") === \"gecko\") {\n        top += this.__num(body, \"borderLeftWidth\");\n        left += this.__num(body, \"borderTopWidth\");\n      }\n\n      return { left: left, top: top };\n    },\n\n    /**\n     * Computes the location of the given element in context of\n     * the document dimensions. For supported modes please\n     * have a look at the {@link qx.bom.element.Location#get} method.\n     *\n     * @param elem {Element} DOM element to query\n     * @param mode {String} A supported option. See comment above.\n     * @return {Integer} The left distance\n     *   of the element relative to the document.\n     */\n    getLeft(elem, mode) {\n      return this.get(elem, mode).left;\n    },\n\n    /**\n     * Computes the location of the given element in context of\n     * the document dimensions. For supported modes please\n     * have a look at the {@link qx.bom.element.Location#get} method.\n     *\n     * @param elem {Element} DOM element to query\n     * @param mode {String} A supported option. See comment above.\n     * @return {Integer} The top distance\n     *   of the element relative to the document.\n     */\n    getTop(elem, mode) {\n      return this.get(elem, mode).top;\n    },\n\n    /**\n     * Computes the location of the given element in context of\n     * the document dimensions. For supported modes please\n     * have a look at the {@link qx.bom.element.Location#get} method.\n     *\n     * @param elem {Element} DOM element to query\n     * @param mode {String} A supported option. See comment above.\n     * @return {Integer} The right distance\n     *   of the element relative to the document.\n     */\n    getRight(elem, mode) {\n      return this.get(elem, mode).right;\n    },\n\n    /**\n     * Computes the location of the given element in context of\n     * the document dimensions. For supported modes please\n     * have a look at the {@link qx.bom.element.Location#get} method.\n     *\n     * @param elem {Element} DOM element to query\n     * @param mode {String} A supported option. See comment above.\n     * @return {Integer} The bottom distance\n     *   of the element relative to the document.\n     */\n    getBottom(elem, mode) {\n      return this.get(elem, mode).bottom;\n    },\n\n    /**\n     * Returns the distance between two DOM elements. For supported modes please\n     * have a look at the {@link qx.bom.element.Location#get} method.\n     *\n     * @param elem1 {Element} First element\n     * @param elem2 {Element} Second element\n     * @param mode1 {String?null} Mode for first element\n     * @param mode2 {String?null} Mode for second element\n     * @return {Map} Returns a map with <code>left</code> and <code>top</code>\n     *   which contains the distance of the elements from each other.\n     */\n    getRelative(elem1, elem2, mode1, mode2) {\n      var loc1 = this.get(elem1, mode1);\n      var loc2 = this.get(elem2, mode2);\n\n      return {\n        left: loc1.left - loc2.left,\n        top: loc1.top - loc2.top,\n        right: loc1.right - loc2.right,\n        bottom: loc1.bottom - loc2.bottom\n      };\n    },\n\n    /**\n     * Returns the distance between the given element to its offset parent.\n     *\n     * @param elem {Element} DOM element to query\n     * @return {Map} Returns a map with <code>left</code> and <code>top</code>\n     *   which contains the distance of the elements from each other.\n     */\n    getPosition(elem) {\n      return this.getRelative(elem, this.getOffsetParent(elem));\n    },\n\n    /**\n     * Detects the offset parent of the given element\n     *\n     * @param element {Element} Element to query for offset parent\n     * @return {Element} Detected offset parent\n     */\n    getOffsetParent(element) {\n      // Ther is no offsetParent for SVG elements\n      if (element instanceof SVGElement) {\n        return document.body;\n      }\n\n      var offsetParent = element.offsetParent || document.body;\n      var Style = qx.bom.element.Style;\n\n      while (\n        offsetParent &&\n        !/^body|html$/i.test(offsetParent.tagName) &&\n        Style.get(offsetParent, \"position\") === \"static\"\n      ) {\n        offsetParent = offsetParent.offsetParent;\n      }\n\n      return offsetParent;\n    }\n  }\n});\n"
  ]
}