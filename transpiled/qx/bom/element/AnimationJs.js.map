{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/bom/element/AnimationJs.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__maxStepTime",
    "__units",
    "__transitionKeys",
    "scale",
    "rotate",
    "skew",
    "translate",
    "animate",
    "el",
    "desc",
    "duration",
    "_animate",
    "animateReverse",
    "reverse",
    "$$animation",
    "lang",
    "Object",
    "clone",
    "undefined",
    "keyFrames",
    "keys",
    "__getOrderedKeys",
    "stepTime",
    "__getStepTime",
    "steps",
    "parseInt",
    "__normalizeKeyFrames",
    "delta",
    "__calculateDelta",
    "timing",
    "handle",
    "bom",
    "element",
    "AnimationHandle",
    "jsAnimation",
    "i",
    "initValues",
    "repeatSteps",
    "__applyRepeat",
    "repeat",
    "delay",
    "self",
    "delayId",
    "window",
    "setTimeout",
    "play",
    "units",
    "percent",
    "name",
    "prefixed",
    "Style",
    "getPropertyName",
    "prefixedName",
    "getCssName",
    "item",
    "__getUnit",
    "frame",
    "style",
    "getComputedStyle",
    "indexOf",
    "__normalizeKeyFrameTransforms",
    "transforms",
    "transformStyle",
    "Transform",
    "getCss",
    "split",
    "length",
    "replace",
    "Array",
    "keyIndex",
    "last",
    "next",
    "stepsToNext",
    "Math",
    "floor",
    "calculationIndex",
    "nItem",
    "isArray",
    "j",
    "x",
    "__getNextValue",
    "charAt",
    "value0",
    "util",
    "ColorUtil",
    "cssStringToRgb",
    "value1",
    "stepValue",
    "range",
    "timingX",
    "AnimationFrame",
    "calculateTiming",
    "rgbToHexString",
    "isNaN",
    "parseFloat",
    "substring",
    "nextItem",
    "lastItem",
    "emit",
    "id",
    "setInterval",
    "values",
    "get",
    "String",
    "camelCase",
    "AnimationJs",
    "__applyStyles",
    "alternate",
    "stop",
    "animationId",
    "pause",
    "clearInterval",
    "clearTimeout",
    "keep",
    "stopped",
    "ended",
    "Number",
    "MAX_VALUE",
    "styles",
    "key",
    "set",
    "minDiff",
    "min",
    "round",
    "sort",
    "a",
    "b"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n\n************************************************************************ */\n\n/**\n * This class offers the same API as the CSS3 animation layer in\n * {@link qx.bom.element.AnimationCss} but uses JavaScript to fake the behavior.\n *\n * {@link qx.bom.element.Animation} is the class, which takes care of the\n * feature detection for CSS animations and decides which implementation\n * (CSS or JavaScript) should be used. Most likely, this implementation should\n * be the one to use.\n *\n * @ignore(qx.bom.element.Style.*)\n * @use(qx.bom.element.AnimationJs#play)\n */\nqx.Bootstrap.define(\"qx.bom.element.AnimationJs\", {\n  statics: {\n    /**\n     * The maximal time a frame should take.\n     */\n    __maxStepTime: 30,\n\n    /**\n     * The supported CSS units.\n     */\n    __units: [\"%\", \"in\", \"cm\", \"mm\", \"em\", \"ex\", \"pt\", \"pc\", \"px\"],\n\n    /** The used keys for transforms. */\n    __transitionKeys: {\n      scale: true,\n      rotate: true,\n      skew: true,\n      translate: true\n    },\n\n    /**\n     * This is the main function to start the animation. For further details,\n     * take a look at the documentation of the wrapper\n     * {@link qx.bom.element.Animation}.\n     * @param el {Element} The element to animate.\n     * @param desc {Map} Animation description.\n     * @param duration {Integer?} The duration of the animation which will\n     *   override the duration given in the description.\n     * @return {qx.bom.element.AnimationHandle} The handle.\n     */\n    animate(el, desc, duration) {\n      return this._animate(el, desc, duration, false);\n    },\n\n    /**\n     * This is the main function to start the animation in reversed mode.\n     * For further details, take a look at the documentation of the wrapper\n     * {@link qx.bom.element.Animation}.\n     * @param el {Element} The element to animate.\n     * @param desc {Map} Animation description.\n     * @param duration {Integer?} The duration of the animation which will\n     *   override the duration given in the description.\n     * @return {qx.bom.element.AnimationHandle} The handle.\n     */\n    animateReverse(el, desc, duration) {\n      return this._animate(el, desc, duration, true);\n    },\n\n    /**\n     * Helper to start the animation, either in reversed order or not.\n     *\n     * @param el {Element} The element to animate.\n     * @param desc {Map} Animation description.\n     * @param duration {Integer?} The duration of the animation which will\n     *   override the duration given in the description.\n     * @param reverse {Boolean} <code>true</code>, if the animation should be\n     *   reversed.\n     * @return {qx.bom.element.AnimationHandle} The handle.\n     */\n    _animate(el, desc, duration, reverse) {\n      // stop if an animation is already running\n      if (el.$$animation) {\n        return el.$$animation;\n      }\n\n      desc = qx.lang.Object.clone(desc, true);\n\n      if (duration == undefined) {\n        duration = desc.duration;\n      }\n\n      var keyFrames = desc.keyFrames;\n\n      var keys = this.__getOrderedKeys(keyFrames);\n      var stepTime = this.__getStepTime(duration, keys);\n      var steps = parseInt(duration / stepTime, 10);\n\n      this.__normalizeKeyFrames(keyFrames, el);\n\n      var delta = this.__calculateDelta(\n        steps,\n        stepTime,\n        keys,\n        keyFrames,\n        duration,\n        desc.timing\n      );\n\n      var handle = new qx.bom.element.AnimationHandle();\n      handle.jsAnimation = true;\n\n      if (reverse) {\n        delta.reverse();\n        handle.reverse = true;\n      }\n\n      handle.desc = desc;\n      handle.el = el;\n      handle.delta = delta;\n      handle.stepTime = stepTime;\n      handle.steps = steps;\n      el.$$animation = handle;\n\n      handle.i = 0;\n      handle.initValues = {};\n      handle.repeatSteps = this.__applyRepeat(steps, desc.repeat);\n\n      var delay = desc.delay || 0;\n      var self = this;\n      handle.delayId = window.setTimeout(function () {\n        handle.delayId = null;\n        self.play(handle);\n      }, delay);\n      return handle;\n    },\n\n    /**\n     * Try to normalize the keyFrames by adding the default / set values of the\n     * element.\n     * @param keyFrames {Map} The map of key frames.\n     * @param el {Element} The element to animate.\n     */\n    __normalizeKeyFrames(keyFrames, el) {\n      // collect all possible keys and its units\n      var units = {};\n      for (var percent in keyFrames) {\n        for (var name in keyFrames[percent]) {\n          // prefixed key calculation\n          var prefixed = qx.bom.Style.getPropertyName(name);\n          if (prefixed && prefixed != name) {\n            var prefixedName = qx.bom.Style.getCssName(prefixed);\n            keyFrames[percent][prefixedName] = keyFrames[percent][name];\n            delete keyFrames[percent][name];\n            name = prefixedName;\n          }\n          // check for the available units\n          if (units[name] == undefined) {\n            var item = keyFrames[percent][name];\n            if (typeof item == \"string\") {\n              units[name] = this.__getUnit(item);\n            } else {\n              units[name] = \"\";\n            }\n          }\n        }\n      }\n      // add all missing keys\n      for (var percent in keyFrames) {\n        var frame = keyFrames[percent];\n        for (var name in units) {\n          if (frame[name] == undefined) {\n            if (name in el.style) {\n              // get the computed style if possible\n              if (window.getComputedStyle) {\n                frame[name] = window.getComputedStyle(el, null)[name];\n              } else {\n                frame[name] = el.style[name];\n              }\n            } else {\n              frame[name] = el[name];\n            }\n            // if its a unit we know, set 0 as fallback\n            if (frame[name] === \"\" && this.__units.indexOf(units[name]) != -1) {\n              frame[name] = \"0\" + units[name];\n            }\n          }\n        }\n      }\n    },\n\n    /**\n     * Checks for transform keys and returns a cloned frame\n     * with the right transform style set.\n     * @param frame {Map} A single key frame of the description.\n     * @return {Map} A modified clone of the given frame.\n     */\n    __normalizeKeyFrameTransforms(frame) {\n      frame = qx.lang.Object.clone(frame);\n      var transforms;\n      for (var name in frame) {\n        if (name in this.__transitionKeys) {\n          if (!transforms) {\n            transforms = {};\n          }\n          transforms[name] = frame[name];\n          delete frame[name];\n        }\n      }\n      if (transforms) {\n        var transformStyle =\n          qx.bom.element.Transform.getCss(transforms).split(\":\");\n        if (transformStyle.length > 1) {\n          frame[transformStyle[0]] = transformStyle[1].replace(\";\", \"\");\n        }\n      }\n      return frame;\n    },\n\n    /**\n     * Precalculation of the delta which will be applied during the animation.\n     * The whole deltas will be calculated prior to the animation and stored\n     * in a single array. This method takes care of that calculation.\n     *\n     * @param steps {Integer} The amount of steps to take to the end of the\n     *   animation.\n     * @param stepTime {Integer} The amount of milliseconds each step takes.\n     * @param keys {Array} Ordered list of keys in the key frames map.\n     * @param keyFrames {Map} The map of key frames.\n     * @param duration {Integer} Time in milliseconds the animation should take.\n     * @param timing {String} The given timing function.\n     * @return {Array} An array containing the animation deltas.\n     */\n    __calculateDelta(steps, stepTime, keys, keyFrames, duration, timing) {\n      var delta = new Array(steps);\n\n      var keyIndex = 1;\n      delta[0] = this.__normalizeKeyFrameTransforms(keyFrames[0]);\n      var last = keyFrames[0];\n      var next = keyFrames[keys[keyIndex]];\n      var stepsToNext = Math.floor(\n        keys[keyIndex] / ((stepTime / duration) * 100)\n      );\n\n      var calculationIndex = 1; // is used as counter for the timing calculation\n      // for every step\n      for (var i = 1; i < delta.length; i++) {\n        // switch key frames if we crossed a percent border\n        if (((i * stepTime) / duration) * 100 > keys[keyIndex]) {\n          last = next;\n          keyIndex++;\n          next = keyFrames[keys[keyIndex]];\n          stepsToNext =\n            Math.floor(keys[keyIndex] / ((stepTime / duration) * 100)) -\n            stepsToNext;\n          calculationIndex = 1;\n        }\n\n        delta[i] = {};\n\n        var transforms;\n        // for every property\n        for (var name in next) {\n          var nItem = next[name] + \"\";\n\n          // transform values\n          if (name in this.__transitionKeys) {\n            if (!transforms) {\n              transforms = {};\n            }\n\n            if (qx.Bootstrap.isArray(last[name])) {\n              if (!qx.Bootstrap.isArray(next[name])) {\n                next[name] = [next[name]];\n              }\n              transforms[name] = [];\n              for (var j = 0; j < next[name].length; j++) {\n                var item = next[name][j] + \"\";\n                var x = calculationIndex / stepsToNext;\n                transforms[name][j] = this.__getNextValue(\n                  item,\n                  last[name],\n                  timing,\n                  x\n                );\n              }\n            } else {\n              var x = calculationIndex / stepsToNext;\n              transforms[name] = this.__getNextValue(\n                nItem,\n                last[name],\n                timing,\n                x\n              );\n            }\n\n            // color values\n          } else if (nItem.charAt(0) == \"#\") {\n            // get the two values from the frames as RGB arrays\n            var value0 = qx.util.ColorUtil.cssStringToRgb(last[name]);\n            var value1 = qx.util.ColorUtil.cssStringToRgb(nItem);\n            var stepValue = [];\n            // calculate every color channel\n            for (var j = 0; j < value0.length; j++) {\n              var range = value0[j] - value1[j];\n              var x = calculationIndex / stepsToNext;\n              var timingX = qx.bom.AnimationFrame.calculateTiming(timing, x);\n              stepValue[j] = parseInt(value0[j] - range * timingX, 10);\n            }\n\n            delta[i][name] = qx.util.ColorUtil.rgbToHexString(stepValue);\n          } else if (!isNaN(parseFloat(nItem))) {\n            var x = calculationIndex / stepsToNext;\n            delta[i][name] = this.__getNextValue(nItem, last[name], timing, x);\n          } else {\n            delta[i][name] = last[name] + \"\";\n          }\n        }\n        // save all transformations in the delta values\n        if (transforms) {\n          var transformStyle =\n            qx.bom.element.Transform.getCss(transforms).split(\":\");\n          if (transformStyle.length > 1) {\n            delta[i][transformStyle[0]] = transformStyle[1].replace(\";\", \"\");\n          }\n        }\n\n        calculationIndex++;\n      }\n      // make sure the last key frame is right\n      delta[delta.length - 1] = this.__normalizeKeyFrameTransforms(\n        keyFrames[100]\n      );\n\n      return delta;\n    },\n\n    /**\n     * Ties to parse out the unit of the given value.\n     *\n     * @param item {String} A CSS value including its unit.\n     * @return {String} The unit of the given value.\n     */\n    __getUnit(item) {\n      return item.substring((parseFloat(item) + \"\").length, item.length);\n    },\n\n    /**\n     * Returns the next value based on the given arguments.\n     *\n     * @param nextItem {String} The CSS value of the next frame\n     * @param lastItem {String} The CSS value of the last frame\n     * @param timing {String} The timing used for the calculation\n     * @param x {Number} The x position of the animation on the time axis\n     * @return {String} The calculated value including its unit.\n     */\n    __getNextValue(nextItem, lastItem, timing, x) {\n      var range = parseFloat(nextItem) - parseFloat(lastItem);\n      return (\n        parseFloat(lastItem) +\n        range * qx.bom.AnimationFrame.calculateTiming(timing, x) +\n        this.__getUnit(nextItem)\n      );\n    },\n\n    /**\n     * Internal helper for the {@link qx.bom.element.AnimationHandle} to play\n     * the animation.\n     * @internal\n     * @param handle {qx.bom.element.AnimationHandle} The hand which\n     *   represents the animation.\n     * @return {qx.bom.element.AnimationHandle} The handle for chaining.\n     */\n    play(handle) {\n      handle.emit(\"start\", handle.el);\n      var id = window.setInterval(function () {\n        handle.repeatSteps--;\n        var values = handle.delta[handle.i % handle.steps];\n        // save the init values\n        if (handle.i === 0) {\n          for (var name in values) {\n            if (handle.initValues[name] === undefined) {\n              // animate element property\n              if (handle.el[name] !== undefined) {\n                handle.initValues[name] = handle.el[name];\n              }\n              // animate CSS property\n              else if (qx.bom.element.Style) {\n                handle.initValues[name] = qx.bom.element.Style.get(\n                  handle.el,\n                  qx.lang.String.camelCase(name)\n                );\n              } else {\n                handle.initValues[name] =\n                  handle.el.style[qx.lang.String.camelCase(name)];\n              }\n            }\n          }\n        }\n        qx.bom.element.AnimationJs.__applyStyles(handle.el, values);\n\n        handle.i++;\n        // iteration condition\n        if (handle.i % handle.steps == 0) {\n          handle.emit(\"iteration\", handle.el);\n          if (handle.desc.alternate) {\n            handle.delta.reverse();\n          }\n        }\n        // end condition\n        if (handle.repeatSteps < 0) {\n          qx.bom.element.AnimationJs.stop(handle);\n        }\n      }, handle.stepTime);\n\n      handle.animationId = id;\n\n      return handle;\n    },\n\n    /**\n     * Internal helper for the {@link qx.bom.element.AnimationHandle} to pause\n     * the animation.\n     * @internal\n     * @param handle {qx.bom.element.AnimationHandle} The hand which\n     *   represents the animation.\n     * @return {qx.bom.element.AnimationHandle} The handle for chaining.\n     */\n\n    pause(handle) {\n      // stop the interval\n      window.clearInterval(handle.animationId);\n      handle.animationId = null;\n\n      return handle;\n    },\n\n    /**\n     * Internal helper for the {@link qx.bom.element.AnimationHandle} to stop\n     * the animation.\n     * @internal\n     * @param handle {qx.bom.element.AnimationHandle} The hand which\n     *   represents the animation.\n     * @return {qx.bom.element.AnimationHandle} The handle for chaining.\n     */\n    stop(handle) {\n      var desc = handle.desc;\n      var el = handle.el;\n      var initValues = handle.initValues;\n      if (handle.animationId) {\n        window.clearInterval(handle.animationId);\n      }\n\n      // clear the delay if the animation has not been started\n      if (handle.delayId) {\n        window.clearTimeout(handle.delayId);\n      }\n\n      // check if animation is already stopped\n      if (el == undefined) {\n        return handle;\n      }\n\n      // if we should keep a frame\n      var keep = desc.keep;\n      if (keep != undefined && !handle.stopped) {\n        if (\n          handle.reverse ||\n          (desc.alternate && desc.repeat && desc.repeat % 2 == 0)\n        ) {\n          keep = 100 - keep;\n        }\n        this.__applyStyles(\n          el,\n          this.__normalizeKeyFrameTransforms(desc.keyFrames[keep])\n        );\n      } else {\n        this.__applyStyles(el, initValues);\n      }\n\n      el.$$animation = null;\n      handle.el = null;\n      handle.ended = true;\n      handle.animationId = null;\n\n      handle.emit(\"end\", el);\n\n      return handle;\n    },\n\n    /**\n     * Takes care of the repeat key of the description.\n     * @param steps {Integer} The number of steps one iteration would take.\n     * @param repeat {Integer|String} It can be either a number how often the\n     * animation should be repeated or the string 'infinite'.\n     * @return {Integer} The number of steps to animate.\n     */\n    __applyRepeat(steps, repeat) {\n      if (repeat == undefined) {\n        return steps;\n      }\n      if (repeat == \"infinite\") {\n        return Number.MAX_VALUE;\n      }\n      return steps * repeat;\n    },\n\n    /**\n     * Central method to apply css styles and element properties.\n     * @param el {Element} The DOM element to apply the styles.\n     * @param styles {Map} A map containing styles and values.\n     */\n    __applyStyles(el, styles) {\n      for (var key in styles) {\n        // ignore undefined values (might be a bad detection)\n        if (styles[key] === undefined) {\n          continue;\n        }\n\n        // apply element property value - only if a CSS property\n        // is *not* available\n        if (typeof el.style[key] === \"undefined\" && key in el) {\n          el[key] = styles[key];\n          continue;\n        }\n\n        var name = qx.bom.Style.getPropertyName(key) || key;\n        if (qx.bom.element.Style) {\n          qx.bom.element.Style.set(el, name, styles[key]);\n        } else {\n          el.style[name] = styles[key];\n        }\n      }\n    },\n\n    /**\n     * Dynamic calculation of the steps time considering a max step time.\n     * @param duration {Number} The duration of the animation.\n     * @param keys {Array} An array containing the ordered set of key frame keys.\n     * @return {Integer} The best suited step time.\n     */\n    __getStepTime(duration, keys) {\n      // get min difference\n      var minDiff = 100;\n      for (var i = 0; i < keys.length - 1; i++) {\n        minDiff = Math.min(minDiff, keys[i + 1] - keys[i]);\n      }\n\n      var stepTime = (duration * minDiff) / 100;\n      while (stepTime > this.__maxStepTime) {\n        stepTime = stepTime / 2;\n      }\n      return Math.round(stepTime);\n    },\n\n    /**\n     * Helper which returns the ordered keys of the key frame map.\n     * @param keyFrames {Map} The map of key frames.\n     * @return {Array} An ordered list of keys.\n     */\n    __getOrderedKeys(keyFrames) {\n      var keys = Object.keys(keyFrames);\n      for (var i = 0; i < keys.length; i++) {\n        keys[i] = parseInt(keys[i], 10);\n      }\n      keys.sort(function (a, b) {\n        return a - b;\n      });\n      return keys;\n    }\n  }\n});\n"
  ]
}