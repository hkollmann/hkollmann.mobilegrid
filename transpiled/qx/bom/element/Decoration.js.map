{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/bom/element/Decoration.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "DEBUG",
    "__warnings",
    "__alphaFixRepeats",
    "core",
    "Environment",
    "select",
    "mshtml",
    "scale",
    "__repeatToTagname",
    "repeat",
    "update",
    "element",
    "source",
    "style",
    "tag",
    "getTagName",
    "tagName",
    "toLowerCase",
    "Error",
    "ret",
    "getAttributes",
    "src",
    "util",
    "ResourceManager",
    "getInstance",
    "toUri",
    "backgroundPosition",
    "undefined",
    "clip",
    "bom",
    "Style",
    "setStyles",
    "get",
    "filters",
    "apply",
    "e",
    "create",
    "css",
    "compile",
    "isFontUri",
    "font",
    "theme",
    "manager",
    "Font",
    "resolve",
    "match",
    "styles",
    "lang",
    "Object",
    "clone",
    "getStyles",
    "width",
    "height",
    "parseInt",
    "display",
    "verticalAlign",
    "position",
    "_style",
    "hasOwnProperty",
    "getCssName",
    "charCode",
    "fromFontUriToCharCode",
    "String",
    "fromCharCode",
    "endsWith",
    "fontSize",
    "lineHeight",
    "WebkitUserDrag",
    "format",
    "getImageFormat",
    "io",
    "ImageLoader",
    "getFormat",
    "result",
    "dimension",
    "__getDimension",
    "__normalizeWidthHeight",
    "processAlphaFix",
    "__processScale",
    "__processScaleXScaleY",
    "__processRepeats",
    "getImageWidth",
    "getWidth",
    "getImageHeight",
    "getHeight",
    "sizingMethod",
    "filter",
    "backgroundImage",
    "backgroundRepeat",
    "uri",
    "sourceid",
    "clipped",
    "getCombinedFormat",
    "data",
    "getData",
    "combinedid",
    "toDataUri",
    "__getStylesForClippedScaleX",
    "__getStylesForClippedScaleY",
    "imageHeight",
    "top",
    "bottom",
    "imageWidth",
    "left",
    "right",
    "offx",
    "offy",
    "paddingTop",
    "paddingLeft",
    "paddingRight",
    "paddingBottom",
    "bg",
    "Background",
    "key",
    "__getStylesForSingleRepeat",
    "split",
    "isNaN",
    "__checkForPotentialClippedImage",
    "has",
    "indexOf",
    "log",
    "Logger",
    "debug",
    "Decoration"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Alexander Steitz (aback)\n\n************************************************************************ */\n\n/**\n * Powerful creation and update features for images used for decoration\n * purposes like for rounded borders, icons, etc.\n *\n * Includes support for image clipping, PNG alpha channel support, additional\n * repeat options like <code>scale-x</code> or <code>scale-y</code>.\n */\nqx.Class.define(\"qx.bom.element.Decoration\", {\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** @type {Boolean} Whether clipping hints should be logged */\n    DEBUG: false,\n\n    /** @type {Map} Collect warnings for potential clipped images */\n    __warnings: {},\n\n    /** @type {Map} List of repeat modes which supports the IE AlphaImageLoader */\n    __alphaFixRepeats: qx.core.Environment.select(\"engine.name\", {\n      mshtml: {\n        \"scale-x\": true,\n        \"scale-y\": true,\n        scale: true,\n        \"no-repeat\": true\n      },\n\n      default: null\n    }),\n\n    /** @type {Map} Mapping between background repeat and the tag to create */\n    __repeatToTagname: {\n      \"scale-x\": \"img\",\n      \"scale-y\": \"img\",\n      scale: \"img\",\n      repeat: \"div\",\n      \"no-repeat\": \"div\",\n      \"repeat-x\": \"div\",\n      \"repeat-y\": \"div\"\n    },\n\n    /**\n     * Updates the element to display the given source\n     * with the repeat option.\n     *\n     * @param element {Element} DOM element to update\n     * @param source {String} Any valid URI\n     * @param repeat {String} One of <code>scale-x</code>, <code>scale-y</code>,\n     *   <code>scale</code>, <code>repeat</code>, <code>repeat-x</code>,\n     *   <code>repeat-y</code>, <code>repeat</code>\n     * @param style {Map} Additional styles to apply\n     */\n    update(element, source, repeat, style) {\n      var tag = this.getTagName(repeat, source);\n      if (tag != element.tagName.toLowerCase()) {\n        // The \"no-repeat\" means that `getTagName` will suggest a `div` as opposed to an `img` tag, preferring to use\n        //  `img` only for things that need scaling.  The Desktop `qx.ui.*` will always follow this rule, but it\n        //  is valid for virtual DOM (`qx.html.*`) to be used to create a no-repeat `img` tag.  Ignore the validation\n        //  for `no-repeat` `img`.\n        if (repeat != \"no-repeat\" || element.tagName.toLowerCase() != \"img\") {\n          throw new Error(\n            \"Image modification not possible because elements could not be replaced at runtime anymore!\"\n          );\n        }\n      }\n\n      var ret = this.getAttributes(source, repeat, style);\n\n      if (tag === \"img\") {\n        element.src =\n          ret.src ||\n          qx.util.ResourceManager.getInstance().toUri(\"qx/static/blank.gif\");\n      }\n\n      // Fix for old background position\n      if (\n        element.style.backgroundPosition != \"\" &&\n        ret.style.backgroundPosition === undefined\n      ) {\n        ret.style.backgroundPosition = null;\n      }\n\n      // Fix for old clip\n      if (element.style.clip != \"\" && ret.style.clip === undefined) {\n        ret.style.clip = null;\n      }\n\n      // Apply new styles\n      qx.bom.element.Style.setStyles(element, ret.style);\n\n      // we need to apply the filter to prevent black rendering artifacts\n      // http://blog.hackedbrain.com/archive/2007/05/21/6110.aspx\n      if (qx.core.Environment.get(\"css.alphaimageloaderneeded\")) {\n        try {\n          element.filters[\n            \"DXImageTransform.Microsoft.AlphaImageLoader\"\n          ].apply();\n        } catch (e) {}\n      }\n    },\n\n    /**\n     * Creates the HTML for a decorator image element with the given options.\n     *\n     * @param source {String} Any valid URI\n     * @param repeat {String} One of <code>scale-x</code>, <code>scale-y</code>,\n     *   <code>scale</code>, <code>repeat</code>, <code>repeat-x</code>,\n     *   <code>repeat-y</code>, <code>repeat</code>\n     * @param style {Map} Additional styles to apply\n     * @return {String} Decorator image HTML\n     */\n    create(source, repeat, style) {\n      var tag = this.getTagName(repeat, source);\n      var ret = this.getAttributes(source, repeat, style);\n      var css = qx.bom.element.Style.compile(ret.style);\n      var ResourceManager = qx.util.ResourceManager.getInstance();\n\n      if (ResourceManager.isFontUri(source)) {\n        var font = qx.theme.manager.Font.getInstance().resolve(\n          source.match(/@([^/]+)/)[1]\n        );\n\n        var styles = qx.lang.Object.clone(font.getStyles());\n        styles[\"width\"] = style.width;\n        styles[\"height\"] = style.height;\n        styles[\"fontSize\"] =\n          parseInt(style.width) > parseInt(style.height)\n            ? style.height\n            : style.width;\n        styles[\"display\"] = style.display;\n        styles[\"verticalAlign\"] = style.verticalAlign;\n        styles[\"position\"] = style.position;\n\n        var css = \"\";\n        for (var _style in styles) {\n          if (styles.hasOwnProperty(_style)) {\n            css +=\n              qx.bom.Style.getCssName(_style) + \": \" + styles[_style] + \";\";\n          }\n        }\n\n        var charCode = ResourceManager.fromFontUriToCharCode(source);\n\n        return (\n          '<div style=\"' + css + '\">' + String.fromCharCode(charCode) + \"</div>\"\n        );\n      } else {\n        if (tag === \"img\") {\n          return '<img src=\"' + ret.src + '\" style=\"' + css + '\"/>';\n        } else {\n          return '<div style=\"' + css + '\"></div>';\n        }\n      }\n    },\n\n    /**\n     * Translates the given repeat option to a tag name. Useful\n     * for systems which depends on early information of the tag\n     * name to prepare element like {@link qx.html.Image}.\n     *\n     * @param repeat {String} One of <code>scale-x</code>, <code>scale-y</code>,\n     *   <code>scale</code>, <code>repeat</code>, <code>repeat-x</code>,\n     *   <code>repeat-y</code>, <code>repeat</code>\n     * @param source {String?null} Source used to identify the image format\n     * @return {String} The tag name: <code>div</code> or <code>img</code>\n     */\n    getTagName(repeat, source) {\n      if (\n        source &&\n        qx.core.Environment.get(\"css.alphaimageloaderneeded\") &&\n        this.__alphaFixRepeats[repeat] &&\n        source.endsWith(\".png\")\n      ) {\n        return \"div\";\n      }\n\n      return this.__repeatToTagname[repeat];\n    },\n\n    /**\n     * This method is used to collect all needed attributes for\n     * the tag name detected by {@link #getTagName}.\n     *\n     * @param source {String} Image source\n     * @param repeat {String} Repeat mode of the image\n     * @param style {Map} Additional styles to apply\n     * @return {String} Markup for image\n     */\n    getAttributes(source, repeat, style) {\n      if (!style) {\n        style = {};\n      }\n\n      if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\n        // Add a fix for small blocks where IE has a minHeight\n        // of the fontSize in quirks mode\n        style.fontSize = 0;\n        style.lineHeight = 0;\n      } else if (qx.core.Environment.get(\"engine.name\") == \"webkit\") {\n        // This stops images from being draggable in webkit\n        style.WebkitUserDrag = \"none\";\n      }\n\n      var format =\n        qx.util.ResourceManager.getInstance().getImageFormat(source) ||\n        qx.io.ImageLoader.getFormat(source);\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (source != null && format == null) {\n          qx.log.Logger.warn(\n            \"ImageLoader: Not recognized format of external image '\" +\n              source +\n              \"'!\"\n          );\n        }\n      }\n\n      var result;\n\n      // Enable AlphaImageLoader in IE6/IE7/IE8\n      if (\n        qx.core.Environment.get(\"css.alphaimageloaderneeded\") &&\n        this.__alphaFixRepeats[repeat] &&\n        format === \"png\"\n      ) {\n        var dimension = this.__getDimension(source);\n        this.__normalizeWidthHeight(style, dimension.width, dimension.height);\n        result = this.processAlphaFix(style, repeat, source);\n      } else {\n        delete style.clip;\n        if (repeat === \"scale\") {\n          result = this.__processScale(style, repeat, source);\n        } else if (repeat === \"scale-x\" || repeat === \"scale-y\") {\n          result = this.__processScaleXScaleY(style, repeat, source);\n        } else {\n          // Native repeats or \"no-repeat\"\n          result = this.__processRepeats(style, repeat, source);\n        }\n      }\n\n      return result;\n    },\n\n    /**\n     * Normalize the given width and height values\n     *\n     * @param style {Map} style information\n     * @param width {Integer?null} width as number or null\n     * @param height {Integer?null} height as number or null\n     */\n    __normalizeWidthHeight(style, width, height) {\n      if (style.width == null && width != null) {\n        style.width = width + \"px\";\n      }\n\n      if (style.height == null && height != null) {\n        style.height = height + \"px\";\n      }\n    },\n\n    /**\n     * Returns the dimension of the image by calling\n     * {@link qx.util.ResourceManager} or {@link qx.io.ImageLoader}\n     * depending on if the image is a managed one.\n     *\n     * @param source {String} image source\n     * @return {Map} dimension of image\n     */\n    __getDimension(source) {\n      var width =\n        qx.util.ResourceManager.getInstance().getImageWidth(source) ||\n        qx.io.ImageLoader.getWidth(source);\n      var height =\n        qx.util.ResourceManager.getInstance().getImageHeight(source) ||\n        qx.io.ImageLoader.getHeight(source);\n\n      return {\n        width: width,\n        height: height\n      };\n    },\n\n    /**\n     * Get all styles for IE browser which need to load the image\n     * with the help of the AlphaImageLoader\n     *\n     * @param style {Map} style information\n     * @param repeat {String} repeat mode\n     * @param source {String} image source\n     *\n     * @return {Map} style infos\n     */\n    processAlphaFix(style, repeat, source) {\n      if (repeat == \"repeat\" || repeat == \"repeat-x\" || repeat == \"repeat-y\") {\n        return style;\n      }\n      var sizingMethod = repeat == \"no-repeat\" ? \"crop\" : \"scale\";\n      var filter =\n        \"progid:DXImageTransform.Microsoft.AlphaImageLoader(src='\" +\n        qx.util.ResourceManager.getInstance().toUri(source) +\n        \"', sizingMethod='\" +\n        sizingMethod +\n        \"')\";\n\n      style.filter = filter;\n      style.backgroundImage = style.backgroundRepeat = \"\";\n      delete style[\"background-image\"];\n      delete style[\"background-repeat\"];\n\n      return {\n        style: style\n      };\n    },\n\n    /**\n     * Process scaled images.\n     *\n     * @param style {Map} style information\n     * @param repeat {String} repeat mode\n     * @param source {String} image source\n     *\n     * @return {Map} image URI and style infos\n     */\n    __processScale(style, repeat, source) {\n      var uri = qx.util.ResourceManager.getInstance().toUri(source);\n      var dimension = this.__getDimension(source);\n\n      this.__normalizeWidthHeight(style, dimension.width, dimension.height);\n\n      return {\n        src: uri,\n        style: style\n      };\n    },\n\n    /**\n     * Process images which are either scaled horizontally or\n     * vertically.\n     *\n     * @param style {Map} style information\n     * @param repeat {String} repeat mode\n     * @param sourceid {String} image resource id\n     *\n     * @return {Map} image URI and style infos\n     */\n    __processScaleXScaleY(style, repeat, sourceid) {\n      var ResourceManager = qx.util.ResourceManager.getInstance();\n      var clipped = ResourceManager.getCombinedFormat(sourceid);\n      var dimension = this.__getDimension(sourceid);\n      var uri;\n\n      if (clipped) {\n        var data = ResourceManager.getData(sourceid);\n        var combinedid = data[4];\n        if (clipped == \"b64\") {\n          uri = ResourceManager.toDataUri(sourceid);\n        } else {\n          uri = ResourceManager.toUri(combinedid);\n        }\n\n        if (repeat === \"scale-x\") {\n          style = this.__getStylesForClippedScaleX(\n            style,\n            data,\n            dimension.height\n          );\n        } else {\n          style = this.__getStylesForClippedScaleY(\n            style,\n            data,\n            dimension.width\n          );\n        }\n\n        return {\n          src: uri,\n          style: style\n        };\n      }\n\n      // No clipped image available\n      else {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.__checkForPotentialClippedImage(sourceid);\n        }\n\n        if (repeat == \"scale-x\") {\n          style.height =\n            dimension.height == null ? null : dimension.height + \"px\";\n          // note: width is given by the user\n        } else if (repeat == \"scale-y\") {\n          style.width = dimension.width == null ? null : dimension.width + \"px\";\n          // note: height is given by the user\n        }\n\n        uri = ResourceManager.toUri(sourceid);\n        return {\n          src: uri,\n          style: style\n        };\n      }\n    },\n\n    /**\n     * Generates the style infos for horizontally scaled clipped images.\n     *\n     * @param style {Map} style infos\n     * @param data {Array} image data retrieved from the {@link qx.util.ResourceManager}\n     * @param height {Integer} image height\n     *\n     * @return {Map} style infos and image URI\n     */\n    __getStylesForClippedScaleX(style, data, height) {\n      // Use clipped image (multi-images on x-axis)\n      var imageHeight = qx.util.ResourceManager.getInstance().getImageHeight(\n        data[4]\n      );\n\n      // Add size and clipping\n      style.clip = { top: -data[6], height: height };\n      style.height = imageHeight + \"px\";\n\n      // note: width is given by the user\n\n      // Fix user given y-coordinate to include the combined image offset\n      if (style.top != null) {\n        style.top = parseInt(style.top, 10) + data[6] + \"px\";\n      } else if (style.bottom != null) {\n        style.bottom =\n          parseInt(style.bottom, 10) + height - imageHeight - data[6] + \"px\";\n      }\n\n      return style;\n    },\n\n    /**\n     * Generates the style infos for vertically scaled clipped images.\n     *\n     * @param style {Map} style infos\n     * @param data {Array} image data retrieved from the {@link qx.util.ResourceManager}\n     * @param width {Integer} image width\n     *\n     * @return {Map} style infos and image URI\n     */\n    __getStylesForClippedScaleY(style, data, width) {\n      // Use clipped image (multi-images on x-axis)\n      var imageWidth = qx.util.ResourceManager.getInstance().getImageWidth(\n        data[4]\n      );\n\n      // Add size and clipping\n      style.clip = { left: -data[5], width: width };\n      style.width = imageWidth + \"px\";\n\n      // note: height is given by the user\n\n      // Fix user given x-coordinate to include the combined image offset\n      if (style.left != null) {\n        style.left = parseInt(style.left, 10) + data[5] + \"px\";\n      } else if (style.right != null) {\n        style.right =\n          parseInt(style.right, 10) + width - imageWidth - data[5] + \"px\";\n      }\n\n      return style;\n    },\n\n    /**\n     * Process repeated images.\n     *\n     * @param style {Map} style information\n     * @param repeat {String} repeat mode\n     * @param sourceid {String} image resource id\n     *\n     * @return {Map} image URI and style infos\n     */\n    __processRepeats(style, repeat, sourceid) {\n      var ResourceManager = qx.util.ResourceManager.getInstance();\n      var clipped = ResourceManager.getCombinedFormat(sourceid);\n      var dimension = this.__getDimension(sourceid);\n\n      // Double axis repeats cannot be clipped\n      if (clipped && repeat !== \"repeat\") {\n        // data = [ 8, 5, \"png\", \"qx\", \"qx/decoration/Modern/arrows-combined.png\", -36, 0]\n        var data = ResourceManager.getData(sourceid);\n        var combinedid = data[4];\n        if (clipped == \"b64\") {\n          var uri = ResourceManager.toDataUri(sourceid);\n          var offx = 0;\n          var offy = 0;\n        } else {\n          var uri = ResourceManager.toUri(combinedid);\n          var offx = data[5];\n          var offy = data[6];\n\n          // honor padding for combined images\n          if (\n            style.paddingTop ||\n            style.paddingLeft ||\n            style.paddingRight ||\n            style.paddingBottom\n          ) {\n            var top = style.paddingTop || 0;\n            var left = style.paddingLeft || 0;\n\n            offx += style.paddingLeft || 0;\n            offy += style.paddingTop || 0;\n\n            style.clip = {\n              left: left,\n              top: top,\n              width: dimension.width,\n              height: dimension.height\n            };\n          }\n        }\n\n        var bg = qx.bom.element.Background.getStyles(uri, repeat, offx, offy);\n        for (var key in bg) {\n          style[key] = bg[key];\n        }\n\n        if (\n          dimension.width != null &&\n          style.width == null &&\n          (repeat == \"repeat-y\" || repeat === \"no-repeat\")\n        ) {\n          style.width = dimension.width + \"px\";\n        }\n\n        if (\n          dimension.height != null &&\n          style.height == null &&\n          (repeat == \"repeat-x\" || repeat === \"no-repeat\")\n        ) {\n          style.height = dimension.height + \"px\";\n        }\n\n        return {\n          style: style\n        };\n      } else {\n        // honor padding\n        var top = style.paddingTop || 0;\n        var left = style.paddingLeft || 0;\n        style.backgroundPosition = left + \"px \" + top + \"px\";\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          if (repeat !== \"repeat\") {\n            this.__checkForPotentialClippedImage(sourceid);\n          }\n        }\n\n        this.__normalizeWidthHeight(style, dimension.width, dimension.height);\n        this.__getStylesForSingleRepeat(style, sourceid, repeat);\n\n        return {\n          style: style\n        };\n      }\n    },\n\n    /**\n     * Generate all style infos for single repeated images\n     *\n     * @param style {Map} style information\n     * @param repeat {String} repeat mode\n     * @param source {String} image source\n     */\n    __getStylesForSingleRepeat(style, source, repeat) {\n      // retrieve the \"backgroundPosition\" style if available to prevent\n      // overwriting with default values\n      var top = null;\n      var left = null;\n      if (style.backgroundPosition) {\n        var backgroundPosition = style.backgroundPosition.split(\" \");\n\n        left = parseInt(backgroundPosition[0], 10);\n        if (isNaN(left)) {\n          left = backgroundPosition[0];\n        }\n\n        top = parseInt(backgroundPosition[1], 10);\n        if (isNaN(top)) {\n          top = backgroundPosition[1];\n        }\n      }\n\n      var bg = qx.bom.element.Background.getStyles(source, repeat, left, top);\n      for (var key in bg) {\n        style[key] = bg[key];\n      }\n\n      // Reset the AlphaImageLoader filter if applied\n      // This prevents IE from setting BOTH CSS filter AND backgroundImage\n      // This is only a fallback if the image is not recognized as PNG\n      // If it's a Alpha-PNG file it *may* result in display problems\n      if (style.filter) {\n        style.filter = \"\";\n      }\n    },\n\n    /**\n     * Output a warning if the image can be clipped.\n     *\n     * @param source {String} image source\n     */\n    __checkForPotentialClippedImage(source) {\n      if (\n        this.DEBUG &&\n        qx.util.ResourceManager.getInstance().has(source) &&\n        source.indexOf(\"qx/icon\") == -1\n      ) {\n        if (!this.__warnings[source]) {\n          qx.log.Logger.debug(\"Potential clipped image candidate: \" + source);\n          this.__warnings[source] = true;\n        }\n      }\n    }\n  }\n});\n"
  ]
}