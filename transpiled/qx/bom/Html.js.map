{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/bom/Html.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__fixNonDirectlyClosableHelper",
    "all",
    "front",
    "tag",
    "match",
    "__convertMap",
    "opt",
    "leg",
    "table",
    "tr",
    "td",
    "col",
    "def",
    "core",
    "Environment",
    "select",
    "mshtml",
    "fixEmptyTags",
    "html",
    "replace",
    "__convertHtmlString",
    "context",
    "div",
    "createElement",
    "bom",
    "Html",
    "tags",
    "substring",
    "toLowerCase",
    "wrap",
    "map",
    "indexOf",
    "innerHTML",
    "depth",
    "lastChild",
    "get",
    "hasBody",
    "test",
    "tbody",
    "firstChild",
    "childNodes",
    "j",
    "length",
    "tagName",
    "parentNode",
    "removeChild",
    "insertBefore",
    "createTextNode",
    "lang",
    "Array",
    "fromCollection",
    "clean",
    "objs",
    "fragment",
    "document",
    "ownerDocument",
    "exec",
    "obj",
    "ret",
    "i",
    "l",
    "nodeType",
    "push",
    "type",
    "BaseArray",
    "qxWeb",
    "apply",
    "prototype",
    "slice",
    "call",
    "toElement",
    "extractScripts",
    "elements",
    "scripts",
    "elem",
    "scriptList",
    "getElementsByTagName",
    "splice",
    "concat",
    "appendChild"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2009 Sebastian Werner, http://sebastian-werner.net\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n   ======================================================================\n\n   This class contains code based on the following work:\n\n   * jQuery\n     http://jquery.com\n     Version 1.3.1\n\n     Copyright:\n       2009 John Resig\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n************************************************************************ */\n\n/**\n * This class is mainly a convenience wrapper for DOM elements to\n * qooxdoo's event system.\n *\n * @ignore(qxWeb)\n */\nqx.Bootstrap.define(\"qx.bom.Html\", {\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Helper method for XHTML replacement.\n     *\n     * @param all {String} Complete string\n     * @param front {String} Front of the match\n     * @param tag {String} Tag name\n     * @return {String} XHTML corrected tag\n     */\n    __fixNonDirectlyClosableHelper(all, front, tag) {\n      return tag.match(\n        /^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$/i\n      )\n        ? all\n        : front + \"></\" + tag + \">\";\n    },\n\n    /** @type {Map} Contains wrap fragments for specific HTML matches */\n    __convertMap: {\n      opt: [1, \"<select multiple='multiple'>\", \"</select>\"], // option or optgroup\n      leg: [1, \"<fieldset>\", \"</fieldset>\"],\n      table: [1, \"<table>\", \"</table>\"],\n      tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n      td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n      col: [2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\"],\n      def: qx.core.Environment.select(\"engine.name\", {\n        mshtml: [1, \"div<div>\", \"</div>\"],\n        default: null\n      })\n    },\n\n    /**\n     * Fixes \"XHTML\"-style tags in all browsers.\n     * Replaces tags which are not allowed to be closed directly such as\n     * <code>div</code> or <code>p</code>. They are patched to use opening and\n     * closing tags instead, e.g. <code>&lt;p&gt;</code> => <code>&lt;p&gt;&lt;/p&gt;</code>\n     *\n     * @param html {String} HTML to fix\n     * @return {String} Fixed HTML\n     */\n    fixEmptyTags(html) {\n      return html.replace(\n        /(<(\\w+)[^>]*?)\\/>/g,\n        this.__fixNonDirectlyClosableHelper\n      );\n    },\n\n    /**\n     * Translates a HTML string into an array of elements.\n     *\n     * @param html {String} HTML string\n     * @param context {Document} Context document in which (helper) elements should be created\n     * @return {Array} List of resulting elements\n     */\n    __convertHtmlString(html, context) {\n      var div = context.createElement(\"div\");\n\n      html = qx.bom.Html.fixEmptyTags(html);\n\n      // Trim whitespace, otherwise indexOf won't work as expected\n      var tags = html.replace(/^\\s+/, \"\").substring(0, 5).toLowerCase();\n\n      // Auto-wrap content into required DOM structure\n      var wrap,\n        map = this.__convertMap;\n      if (!tags.indexOf(\"<opt\")) {\n        wrap = map.opt;\n      } else if (!tags.indexOf(\"<leg\")) {\n        wrap = map.leg;\n      } else if (tags.match(/^<(thead|tbody|tfoot|colg|cap)/)) {\n        wrap = map.table;\n      } else if (!tags.indexOf(\"<tr\")) {\n        wrap = map.tr;\n      } else if (!tags.indexOf(\"<td\") || !tags.indexOf(\"<th\")) {\n        wrap = map.td;\n      } else if (!tags.indexOf(\"<col\")) {\n        wrap = map.col;\n      } else {\n        wrap = map.def;\n      }\n\n      // Omit string concat when no wrapping is needed\n      if (wrap) {\n        // Go to html and back, then peel off extra wrappers\n        div.innerHTML = wrap[1] + html + wrap[2];\n\n        // Move to the right depth\n        var depth = wrap[0];\n        while (depth--) {\n          div = div.lastChild;\n        }\n      } else {\n        div.innerHTML = html;\n      }\n\n      // Fix IE specific bugs\n      if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\n        // Remove IE's autoinserted <tbody> from table fragments\n        // String was a <table>, *may* have spurious <tbody>\n        var hasBody = /<tbody/i.test(html);\n\n        // String was a bare <thead> or <tfoot>\n        var tbody =\n          !tags.indexOf(\"<table\") && !hasBody\n            ? div.firstChild && div.firstChild.childNodes\n            : wrap[1] == \"<table>\" && !hasBody\n            ? div.childNodes\n            : [];\n\n        for (var j = tbody.length - 1; j >= 0; --j) {\n          if (\n            tbody[j].tagName.toLowerCase() === \"tbody\" &&\n            !tbody[j].childNodes.length\n          ) {\n            tbody[j].parentNode.removeChild(tbody[j]);\n          }\n        }\n\n        // IE completely kills leading whitespace when innerHTML is used\n        if (/^\\s/.test(html)) {\n          div.insertBefore(\n            context.createTextNode(html.match(/^\\s*/)[0]),\n            div.firstChild\n          );\n        }\n      }\n\n      return qx.lang.Array.fromCollection(div.childNodes);\n    },\n\n    /**\n     * Cleans-up the given HTML and append it to a fragment\n     *\n     * When no <code>context</code> is given the global document is used to\n     * create new DOM elements.\n     *\n     * When a <code>fragment</code> is given the nodes are appended to this\n     * fragment except the script tags. These are returned in a separate Array.\n     *\n     * Please note: HTML coming from user input must be validated prior\n     * to passing it to this method. HTML is temporarily inserted to the DOM\n     * using <code>innerHTML</code>. As a consequence, scripts included in\n     * attribute event handlers may be executed.\n     *\n     * @param objs {Element[]|String[]} Array of DOM elements or HTML strings\n     * @param context {Document?document} Context in which the elements should be created\n     * @param fragment {Element?null} Document fragment to appends elements to\n     * @return {Element[]} Array of elements (when a fragment is given it only contains script elements)\n     */\n    clean(objs, context, fragment) {\n      context = context || document;\n\n      // !context.createElement fails in IE with an error but returns typeof 'object'\n      if (typeof context.createElement === \"undefined\") {\n        context =\n          context.ownerDocument ||\n          (context[0] && context[0].ownerDocument) ||\n          document;\n      }\n\n      // Fast-Path:\n      // If a single string is passed in and it's a single tag\n      // just do a createElement and skip the rest\n      if (!fragment && objs.length === 1 && typeof objs[0] === \"string\") {\n        var match = /^<(\\w+)\\s*\\/?>$/.exec(objs[0]);\n        if (match) {\n          return [context.createElement(match[1])];\n        }\n      }\n\n      // Iterate through items in incoming array\n      var obj,\n        ret = [];\n      for (var i = 0, l = objs.length; i < l; i++) {\n        obj = objs[i];\n\n        // Convert HTML string into DOM nodes\n        if (typeof obj === \"string\") {\n          obj = this.__convertHtmlString(obj, context);\n        }\n\n        // Append or merge depending on type\n        if (obj.nodeType) {\n          ret.push(obj);\n        } else if (\n          obj instanceof qx.type.BaseArray ||\n          (typeof qxWeb !== \"undefined\" && obj instanceof qxWeb)\n        ) {\n          ret.push.apply(ret, Array.prototype.slice.call(obj, 0));\n        } else if (obj.toElement) {\n          ret.push(obj.toElement());\n        } else {\n          ret.push.apply(ret, obj);\n        }\n      }\n\n      // Append to fragment and filter out scripts... or...\n      if (fragment) {\n        return qx.bom.Html.extractScripts(ret, fragment);\n      }\n\n      // Otherwise return the array of all elements\n      return ret;\n    },\n\n    /**\n     * Extracts script elements from an element list. Optionally\n     * attaches them to a given document fragment\n     *\n     * @param elements {Element[]} list of elements\n     * @param fragment {Document?} document fragment\n     * @return {Element[]} Array containing the script elements\n     */\n    extractScripts(elements, fragment) {\n      var scripts = [],\n        elem;\n      for (var i = 0; elements[i]; i++) {\n        elem = elements[i];\n\n        if (\n          elem.nodeType == 1 &&\n          elem.tagName.toLowerCase() === \"script\" &&\n          (!elem.type || elem.type.toLowerCase() === \"text/javascript\")\n        ) {\n          // Trying to remove the element from DOM\n          if (elem.parentNode) {\n            elem.parentNode.removeChild(elements[i]);\n          }\n\n          // Store in script list\n          scripts.push(elem);\n        } else {\n          if (elem.nodeType === 1) {\n            // Recursively search for scripts and append them to the list of elements to process\n            var scriptList = qx.lang.Array.fromCollection(\n              elem.getElementsByTagName(\"script\")\n            );\n\n            elements.splice.apply(elements, [i + 1, 0].concat(scriptList));\n          }\n\n          // Finally append element to fragment\n          if (fragment) {\n            fragment.appendChild(elem);\n          }\n        }\n      }\n\n      return scripts;\n    }\n  }\n});\n"
  ]
}