{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/qx_packages/qooxdoo_deprecated_qx_io_remote_v1_0_2/source/class/qx/io/remote/Request.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "vUrl",
    "vMethod",
    "vResponseType",
    "__requestHeaders",
    "__urlParameters",
    "__dataParameters",
    "__formFields",
    "undefined",
    "setUrl",
    "setMethod",
    "setResponseType",
    "setProhibitCaching",
    "__seqNum",
    "io",
    "remote",
    "Request",
    "events",
    "created",
    "configured",
    "sending",
    "receiving",
    "completed",
    "aborted",
    "failed",
    "timeout",
    "statics",
    "methodAllowsRequestBody",
    "httpMethod",
    "properties",
    "url",
    "check",
    "init",
    "method",
    "apply",
    "asynchronous",
    "data",
    "nullable",
    "username",
    "password",
    "state",
    "event",
    "responseType",
    "prohibitCaching",
    "v",
    "crossDomain",
    "fileUpload",
    "transport",
    "useBasicHttpAuth",
    "parseJson",
    "members",
    "send",
    "RequestQueue",
    "getInstance",
    "add",
    "abort",
    "reset",
    "getState",
    "error",
    "isConfigured",
    "isQueued",
    "isSending",
    "isReceiving",
    "isCompleted",
    "isAborted",
    "isTimeout",
    "isFailed",
    "__forwardEvent",
    "GlobalError",
    "observeMethod",
    "e",
    "clonedEvent",
    "clone",
    "setTarget",
    "dispatchEvent",
    "_onqueued",
    "setState",
    "_onsending",
    "_onreceiving",
    "_oncompleted",
    "dispose",
    "_onaborted",
    "_ontimeout",
    "_onfailed",
    "_applyState",
    "value",
    "old",
    "_applyProhibitCaching",
    "removeParameter",
    "removeRequestHeader",
    "getMethod",
    "setParameter",
    "Date",
    "valueOf",
    "setRequestHeader",
    "_applyMethod",
    "getProhibitCaching",
    "_applyResponseType",
    "vId",
    "vValue",
    "getRequestHeader",
    "getRequestHeaders",
    "bAsData",
    "bFromData",
    "getParameter",
    "getParameters",
    "setFormField",
    "removeFormField",
    "getFormField",
    "getFormFields",
    "getSequenceNumber",
    "destruct",
    "setTransport"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n     2006 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * This class is used to send HTTP requests to the server.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.io.remote.Request\", {\n  extend: qx.core.Object,\n  implement: [qx.core.IDisposable],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param vUrl {String}\n   *   Target url to issue the request to.\n   *\n   * @param vMethod {String}\n   *   Determines http method (GET, POST, PUT, etc.) to use. See \"method\" property\n   *   for valid values and default value.\n   *\n   * @param vResponseType {String}\n   *   The mime type of the response. Default is text/plain.\n   */\n  construct(vUrl, vMethod, vResponseType) {\n    super();\n\n    this.__requestHeaders = {};\n    this.__urlParameters = {};\n    this.__dataParameters = {};\n    this.__formFields = {};\n\n    if (vUrl !== undefined) {\n      this.setUrl(vUrl);\n    }\n\n    if (vMethod !== undefined) {\n      this.setMethod(vMethod);\n    }\n\n    if (vResponseType !== undefined) {\n      this.setResponseType(vResponseType);\n    }\n\n    this.setProhibitCaching(true);\n\n    // Get the next sequence number for this request\n    this.__seqNum = ++qx.io.remote.Request.__seqNum;\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Fired when the Request object changes its state to 'created' */\n    created: \"qx.event.type.Event\",\n\n    /** Fired when the Request object changes its state to 'configured' */\n    configured: \"qx.event.type.Event\",\n\n    /** Fired when the Request object changes its state to 'sending' */\n    sending: \"qx.event.type.Event\",\n\n    /** Fired when the Request object changes its state to 'receiving' */\n    receiving: \"qx.event.type.Event\",\n\n    /**\n     * Fired once the request has finished successfully. The event object\n     * can be used to read the transferred data.\n     */\n    completed: \"qx.io.remote.Response\",\n\n    /** Fired when the pending request has been aborted. */\n    aborted: \"qx.event.type.Event\",\n\n    /** Fired when the pending request fails. */\n    failed: \"qx.io.remote.Response\",\n\n    /** Fired when the pending request times out. */\n    timeout: \"qx.io.remote.Response\",\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /*\n    ---------------------------------------------------------------------------\n      SEQUENCE NUMBER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sequence (id) number of a request, used to associate a response or error\n     * with its initiating request.\n     */\n    __seqNum: 0,\n\n    /**\n     * Returns true if the given HTTP method allows a request body being transferred to the server.\n     * This is currently POST and PUT. Other methods require their data being encoded into\n     * the URL\n     *\n     * @param httpMethod {String} one of the values of the method property\n     * @return {Boolean}\n     */\n    methodAllowsRequestBody(httpMethod) {\n      return httpMethod == \"POST\" || httpMethod == \"PUT\";\n    },\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * Target url to issue the request to.\n     */\n    url: {\n      check: \"String\",\n      init: \"\",\n    },\n\n    /**\n     * Determines what type of request to issue (GET, POST, PUT, HEAD, DELETE).\n     */\n    method: {\n      check: [\"GET\", \"POST\", \"PUT\", \"HEAD\", \"DELETE\"],\n      apply: \"_applyMethod\",\n      init: \"GET\",\n    },\n\n    /**\n     * Set the request to asynchronous.\n     */\n    asynchronous: {\n      check: \"Boolean\",\n      init: true,\n    },\n\n    /**\n     * Set the data to be sent via this request\n     */\n    data: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /**\n     * Username to use for HTTP authentication.\n     * Set to NULL if HTTP authentication is not used.\n     */\n    username: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /**\n     * Password to use for HTTP authentication.\n     * Set to NULL if HTTP authentication is not used.\n     */\n    password: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /**\n     * The state that the request is in, while being processed.\n     */\n    state: {\n      check: [\n        \"configured\",\n        \"queued\",\n        \"sending\",\n        \"receiving\",\n        \"completed\",\n        \"aborted\",\n        \"timeout\",\n        \"failed\",\n      ],\n      init: \"configured\",\n      apply: \"_applyState\",\n      event: \"changeState\",\n    },\n\n    /**\n     * Response type of request.\n     *\n     * The response type is a MIME type, default is text/plain. Other supported\n     * MIME types are text/javascript, text/html, application/json,\n     * application/xml.\n     */\n    responseType: {\n      check: [\n        \"text/plain\",\n        \"text/javascript\",\n        \"application/json\",\n        \"application/xml\",\n        \"text/html\",\n      ],\n      init: \"text/plain\",\n      apply: \"_applyResponseType\",\n    },\n\n    /**\n     * Number of milliseconds before the request is being timed out.\n     *\n     * If this property is null, the timeout for the request comes is the\n     * qx.io.remote.RequestQueue's property defaultTimeout.\n     */\n    timeout: {\n      check: \"Integer\",\n      nullable: true,\n    },\n\n    /**\n     * Prohibit request from being cached.\n     *\n     * Setting the value to <i>true</i> adds a parameter \"nocache\" to the\n     * request URL with a value of the current time, as well as adding request\n     * headers Pragma:no-cache and Cache-Control:no-cache.\n     *\n     * Setting the value to <i>false</i> removes the parameter and request\n     * headers.\n     *\n     * As a special case, this property may be set to the string value\n     * \"no-url-params-on-post\" which will prevent the nocache parameter from\n     * being added to the URL if the POST method is used but will still add\n     * the Pragma and Cache-Control headers.  This is useful if your backend\n     * does nasty things like mixing parameters specified in the URL into\n     * form fields in the POST request.  (One example of this nasty behavior\n     * is known as \"mixed mode\" in Oracle, as described here:\n     * http://docs.oracle.com/cd/B32110_01/web.1013/b28963/concept.htm#i1005684)\n     */\n    prohibitCaching: {\n      check(v) {\n        return typeof v == \"boolean\" || v === \"no-url-params-on-post\";\n      },\n      init: true,\n      apply: \"_applyProhibitCaching\",\n    },\n\n    /**\n     * Indicate that the request is cross domain.\n     *\n     * A request is cross domain if the request's URL points to a host other than\n     * the local host. This switches the concrete implementation that is used for\n     * sending the request from qx.io.remote.transport.XmlHttp to\n     * qx.io.remote.transport.Script, because only the latter can handle cross\n     * domain requests.\n     */\n    crossDomain: {\n      check: \"Boolean\",\n      init: false,\n    },\n\n    /**\n     * Indicate that the request will be used for a file upload.\n     *\n     * The request will be used for a file upload.  This switches the concrete\n     * implementation that is used for sending the request from\n     * qx.io.remote.transport.XmlHttp to qx.io.remote.IFrameTransport, because only\n     * the latter can handle file uploads.\n     */\n    fileUpload: {\n      check: \"Boolean\",\n      init: false,\n    },\n\n    /**\n     * The transport instance used for the request.\n     *\n     * This is necessary to be able to abort an asynchronous request.\n     */\n    transport: {\n      check: \"qx.io.remote.Exchange\",\n      nullable: true,\n    },\n\n    /**\n     * Use Basic HTTP Authentication.\n     */\n    useBasicHttpAuth: {\n      check: \"Boolean\",\n      init: false,\n    },\n\n    /**\n     * If true and the responseType property is set to \"application/json\", getContent() will\n     * return a Javascript map containing the JSON contents, i. e. the result qx.lang.Json.parse().\n     * If false, the raw string data will be returned and the parsing must be done manually.\n     * This is useful for special JSON dialects / extensions which are not supported by\n     * qx.lang.Json.\n     *\n     * Note that this is currently only respected by qx.io.remote.transport.XmlHttp, i. e.\n     * if the transport used is the one using XMLHttpRequests. The other transports\n     * do not support JSON parsing, so this property has no effect.\n     */\n    parseJson: {\n      check: \"Boolean\",\n      init: true,\n    },\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __requestHeaders: null,\n    __urlParameters: null,\n    __dataParameters: null,\n    __formFields: null,\n    __seqNum: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      CORE METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Schedule this request for transport to server.\n     *\n     * The request is added to the singleton class qx.io.remote.RequestQueue's\n     * list of pending requests.\n     *\n     */\n    send() {\n      qx.io.remote.RequestQueue.getInstance().add(this);\n    },\n\n    /**\n     * Abort sending this request.\n     *\n     * The request is removed from the singleton class qx.io.remote.RequestQueue's\n     * list of pending events. If the request haven't been scheduled this\n     * method is a noop.\n     *\n     */\n    abort() {\n      qx.io.remote.RequestQueue.getInstance().abort(this);\n    },\n\n    /**\n     * Abort sending this request if it has not already been aborted.\n     *\n     */\n    reset() {\n      switch (this.getState()) {\n        case \"sending\":\n        case \"receiving\":\n          this.error(\"Aborting already sent request!\");\n\n        // no break\n\n        case \"queued\":\n          this.abort();\n          break;\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      STATE ALIASES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Determine if this request is in the configured state.\n     *\n     * @return {Boolean} <true> if the request is in the configured state; <false> otherwise.\n     */\n    isConfigured() {\n      return this.getState() === \"configured\";\n    },\n\n    /**\n     * Determine if this request is in the queued state.\n     *\n     * @return {Boolean} <true> if the request is in the queued state; <false> otherwise.\n     */\n    isQueued() {\n      return this.getState() === \"queued\";\n    },\n\n    /**\n     * Determine if this request is in the sending state.\n     *\n     * @return {Boolean} <true> if the request is in the sending state; <false> otherwise.\n     */\n    isSending() {\n      return this.getState() === \"sending\";\n    },\n\n    /**\n     * Determine if this request is in the receiving state.\n     *\n     * @return {Boolean} <true> if the request is in the receiving state; <false> otherwise.\n     */\n    isReceiving() {\n      return this.getState() === \"receiving\";\n    },\n\n    /**\n     * Determine if this request is in the completed state.\n     *\n     * @return {Boolean} <true> if the request is in the completed state; <false> otherwise.\n     */\n    isCompleted() {\n      return this.getState() === \"completed\";\n    },\n\n    /**\n     * Determine if this request is in the aborted state.\n     *\n     * @return {Boolean} <true> if the request is in the aborted state; <false> otherwise.\n     */\n    isAborted() {\n      return this.getState() === \"aborted\";\n    },\n\n    /**\n     * Determine if this request is in the timeout state.\n     *\n     * @return {Boolean} <true> if the request is in the timeout state; <false> otherwise.\n     */\n    isTimeout() {\n      return this.getState() === \"timeout\";\n    },\n\n    /**\n     * Determine if this request is in the failed state.\n     *\n     * @return {Boolean} <true> if the request is in the failed state; <false> otherwise.\n     */\n    isFailed() {\n      return this.getState() === \"failed\";\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Dispatches a clone of the given event on this instance\n     *\n     * @param e {qx.event.type.Event} The original event\n     */\n    __forwardEvent: qx.event.GlobalError.observeMethod(function (e) {\n      var clonedEvent = e.clone();\n      clonedEvent.setTarget(this);\n      this.dispatchEvent(clonedEvent);\n    }),\n\n    /**\n     * Event handler called when the request enters the queued state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _onqueued(e) {\n      // Modify internal state\n      this.setState(\"queued\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n    },\n\n    /**\n     * Event handler called when the request enters the sending state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _onsending(e) {\n      // Modify internal state\n      this.setState(\"sending\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n    },\n\n    /**\n     * Event handler called when the request enters the receiving state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _onreceiving(e) {\n      // Modify internal state\n      this.setState(\"receiving\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n    },\n\n    /**\n     * Event handler called when the request enters the completed state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _oncompleted(e) {\n      // Modify internal state\n      this.setState(\"completed\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n\n      // Automatically dispose after event completion\n      this.dispose();\n    },\n\n    /**\n     * Event handler called when the request enters the aborted state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _onaborted(e) {\n      // Modify internal state\n      this.setState(\"aborted\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n\n      // Automatically dispose after event completion\n      this.dispose();\n    },\n\n    /**\n     * Event handler called when the request enters the timeout state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _ontimeout(e) {\n      /*\n        // User's handler can block until timeout.\n        switch(this.getState())\n        {\n          // If we're no longer running...\n          case \"completed\":\n          case \"timeout\":\n          case \"aborted\":\n          case \"failed\":\n            // then don't bubble up the timeout event\n            return;\n        }\n      */\n\n      // Modify internal state\n      this.setState(\"timeout\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n\n      // Automatically dispose after event completion\n      this.dispose();\n    },\n\n    /**\n     * Event handler called when the request enters the failed state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _onfailed(e) {\n      // Modify internal state\n      this.setState(\"failed\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n\n      // Automatically dispose after event completion\n      this.dispose();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyState(value, old) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (qx.core.Environment.get(\"qx.debug.io.remote\")) {\n          this.debug(\"State: \" + value);\n        }\n      }\n    },\n\n    // property apply\n    _applyProhibitCaching(value, old) {\n      if (!value) {\n        this.removeParameter(\"nocache\");\n        this.removeRequestHeader(\"Pragma\");\n        this.removeRequestHeader(\"Cache-Control\");\n        return;\n      }\n\n      // If value isn't \"no-url-params-on-post\" or this isn't a POST request\n      if (value !== \"no-url-params-on-post\" || this.getMethod() != \"POST\") {\n        // ... then add a parameter to the URL to make it unique on each\n        // request.  The actual id, \"nocache\" is irrelevant; it's the fact\n        // that a (usually) different date is added to the URL on each request\n        // that prevents caching.\n        this.setParameter(\"nocache\", new Date().valueOf());\n      } else {\n        // Otherwise, we don't want the nocache parameter in the URL.\n        this.removeParameter(\"nocache\");\n      }\n\n      // Add the HTTP 1.0 request to avoid use of a cache\n      this.setRequestHeader(\"Pragma\", \"no-cache\");\n\n      // Add the HTTP 1.1 request to avoid use of a cache\n      this.setRequestHeader(\"Cache-Control\", \"no-cache\");\n    },\n\n    // property apply\n    _applyMethod(value, old) {\n      if (qx.io.remote.Request.methodAllowsRequestBody(value)) {\n        this.setRequestHeader(\n          \"Content-Type\",\n          \"application/x-www-form-urlencoded\"\n        );\n      } else {\n        this.removeRequestHeader(\"Content-Type\");\n      }\n\n      // Re-test the prohibit caching property.  We may need to add or remove\n      // the \"nocache\" parameter.  We explicitly call the _apply method since\n      // it wouldn't be called normally when setting the value to its already\n      // existant value.\n      var prohibitCaching = this.getProhibitCaching();\n      this._applyProhibitCaching(prohibitCaching, prohibitCaching);\n    },\n\n    // property apply\n    _applyResponseType(value, old) {\n      this.setRequestHeader(\"X-Qooxdoo-Response-Type\", value);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      REQUEST HEADER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Add a request header to the request.\n     *\n     * Example: request.setRequestHeader(\"Content-Type\", \"text/html\")\n     *\n     * Please note: Some browsers, such as Safari 3 and 4, will capitalize\n     * header field names. This is in accordance with RFC 2616[1], which states\n     * that HTTP 1.1 header names are case-insensitive, so your server backend\n     * should be case-agnostic when dealing with request headers.\n     *\n     * [1]<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\">RFC 2616: HTTP Message Headers</a>\n     *\n     * @param vId {String} The identifier to use for this added header\n     * @param vValue {String} The value to use for this added header\n     */\n    setRequestHeader(vId, vValue) {\n      this.__requestHeaders[vId] = vValue;\n    },\n\n    /**\n     * Remove a previously-added request header\n     *\n     * @param vId {String} The id of the header to be removed\n     */\n    removeRequestHeader(vId) {\n      delete this.__requestHeaders[vId];\n    },\n\n    /**\n     * Retrieve the value of a header which was previously set\n     *\n     * @param vId {String} The id of the header value being requested\n     * @return {String} The value of the header with the specified id\n     */\n    getRequestHeader(vId) {\n      return this.__requestHeaders[vId] || null;\n    },\n\n    /**\n     * Return the object containing all of the headers which have been added.\n     *\n     * @return {Object} The returned object has as its property names each of the ids of headers\n     *     which have been added, and as each property value, the value of the\n     *     property corresponding to that id.\n     */\n    getRequestHeaders() {\n      return this.__requestHeaders;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PARAMETERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Add a parameter to the request.\n     *\n     * @param vId {String}\n     *   String identifier of the parameter to add.\n     *\n     * @param vValue {var}\n     *   Value of parameter. May be a string (for one parameter) or an array\n     *   of strings (for setting multiple parameter values with the same\n     *   parameter name).\n     *\n     * @param bAsData {Boolean}\n     *   If <i>false</i>, add the parameter to the URL.  If <i>true</i> then\n     *   instead the parameters added by calls to this method will be combined\n     *   into a string added as the request data, as if the entire set of\n     *   parameters had been pre-build and passed to setData().\n     *\n     * Note: Parameters requested to be sent as data will be silently dropped\n     *       if data is manually added via a call to setData().\n     *\n     * Note: Some transports, e.g. Script, do not support passing parameters\n     *       as data.\n     *\n     */\n    setParameter(vId, vValue, bAsData) {\n      if (bAsData) {\n        this.__dataParameters[vId] = vValue;\n      } else {\n        this.__urlParameters[vId] = vValue;\n      }\n    },\n\n    /**\n     * Remove a parameter from the request.\n     *\n     * @param vId {String}\n     *   Identifier of the parameter to remove.\n     *\n     * @param bFromData {Boolean}\n     *   If <i>false</i> then remove the parameter of the URL parameter list.\n     *   If <i>true</i> then remove it from the list of parameters to be sent\n     *   as request data.\n     *\n     */\n    removeParameter(vId, bFromData) {\n      if (bFromData) {\n        delete this.__dataParameters[vId];\n      } else {\n        delete this.__urlParameters[vId];\n      }\n    },\n\n    /**\n     * Get a parameter in the request.\n     *\n     * @param vId {String}\n     *   Identifier of the parameter to get.\n     *\n     * @param bFromData {Boolean}\n     *   If <i>false</i> then retrieve the parameter from the URL parameter\n     *   list. If <i>true</i> then retrieve it from the list of parameters to\n     *   be sent as request data.\n     *\n     * @return {var}\n     *   The requested parameter value\n     *\n     */\n    getParameter(vId, bFromData) {\n      if (bFromData) {\n        return this.__dataParameters[vId] || null;\n      } else {\n        return this.__urlParameters[vId] || null;\n      }\n    },\n\n    /**\n     * Returns the object containing all parameters for the request.\n     *\n     * @param bFromData {Boolean}\n     *   If <i>false</i> then retrieve the URL parameter list.\n     *   If <i>true</i> then retrieve the data parameter list.\n     *\n     * @return {Object}\n     *   The returned object has as its property names each of the ids of\n     *   parameters which have been added, and as each property value, the\n     *   value of the property corresponding to that id.\n     */\n    getParameters(bFromData) {\n      return bFromData ? this.__dataParameters : this.__urlParameters;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      FORM FIELDS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Add a form field to the POST request.\n     *\n     * NOTE: Adding any programmatic form fields using this method will switch the\n     *       Transport implementation to IframeTransport.\n     *\n     * NOTE: Use of these programmatic form fields disallow use of synchronous\n     *       requests and cross-domain requests.  Be sure that you do not need\n     *       those features when setting these programmatic form fields.\n     *\n     * @param vId {String} String identifier of the form field to add.\n     * @param vValue {String} Value of form field\n     */\n    setFormField(vId, vValue) {\n      this.__formFields[vId] = vValue;\n    },\n\n    /**\n     * Remove a form field from the POST request.\n     *\n     * @param vId {String} Identifier of the form field to remove.\n     */\n    removeFormField(vId) {\n      delete this.__formFields[vId];\n    },\n\n    /**\n     * Get a form field in the POST request.\n     *\n     * @param vId {String} Identifier of the form field to get.\n     * @return {String|null} Value of form field or <code>null</code> if no value\n     *    exists for the passed identifier.\n     */\n    getFormField(vId) {\n      return this.__formFields[vId] || null;\n    },\n\n    /**\n     * Returns the object containing all form fields for the POST request.\n     *\n     * @return {Object} The returned object has as its property names each of the ids of\n     *     form fields which have been added, and as each property value, the value\n     *     of the property corresponding to that id.\n     */\n    getFormFields() {\n      return this.__formFields;\n    },\n\n    /**\n     * Obtain the sequence (id) number used for this request\n     *\n     * @return {Integer} The sequence number of this request\n     */\n    getSequenceNumber() {\n      return this.__seqNum;\n    },\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this.setTransport(null);\n    this.__requestHeaders =\n      this.__urlParameters =\n      this.__dataParameters =\n      this.__formFields =\n        null;\n  },\n});\n"
  ]
}