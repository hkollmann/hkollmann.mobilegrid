{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/qx_packages/qooxdoo_deprecated_qx_io_remote_v1_0_2/source/class/qx/io/remote/transport/Abstract.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "setRequestHeaders",
    "setParameters",
    "setFormFields",
    "events",
    "created",
    "configured",
    "sending",
    "receiving",
    "completed",
    "aborted",
    "failed",
    "timeout",
    "properties",
    "url",
    "check",
    "nullable",
    "method",
    "init",
    "asynchronous",
    "data",
    "username",
    "password",
    "state",
    "event",
    "apply",
    "requestHeaders",
    "parameters",
    "formFields",
    "responseType",
    "useBasicHttpAuth",
    "members",
    "send",
    "Error",
    "abort",
    "setState",
    "setRequestHeader",
    "vLabel",
    "vValue",
    "getResponseHeader",
    "getResponseHeaders",
    "getStatusCode",
    "getStatusText",
    "getResponseText",
    "getResponseXml",
    "getFetchedLength",
    "_applyState",
    "value",
    "old",
    "fireEvent",
    "destruct",
    "io",
    "remote",
    "transport",
    "Abstract"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,iCAAhB,EAAmD;AACjDC,IAAAA,IAAI,EAAE,UAD2C;AAEjDC,IAAAA,MAAM,EAAEP,EAAE,CAACQ,IAAH,CAAQC,MAFiC;;AAIjD;AACF;AACA;AACA;AACA;AAEEC,IAAAA,SAViD,uBAUrC;AACV;AAEA,WAAKC,iBAAL,CAAuB,EAAvB;AACA,WAAKC,aAAL,CAAmB,EAAnB;AACA,WAAKC,aAAL,CAAmB,EAAnB;AACD,KAhBgD;;AAkBjD;AACF;AACA;AACA;AACA;AAEEC,IAAAA,MAAM,EAAE;AACN;AACAC,MAAAA,OAAO,EAAE,qBAFH;;AAIN;AACAC,MAAAA,UAAU,EAAE,qBALN;;AAON;AACAC,MAAAA,OAAO,EAAE,qBARH;;AAUN;AACAC,MAAAA,SAAS,EAAE,qBAXL;;AAaN;AACAC,MAAAA,SAAS,EAAE,qBAdL;;AAgBN;AACAC,MAAAA,OAAO,EAAE,qBAjBH;;AAmBN;AACAC,MAAAA,MAAM,EAAE,qBApBF;;AAsBN;AACAC,MAAAA,OAAO,EAAE;AAvBH,KAxByC;;AAkDjD;AACF;AACA;AACA;AACA;AAEEC,IAAAA,UAAU,EAAE;AACV;AACAC,MAAAA,GAAG,EAAE;AACHC,QAAAA,KAAK,EAAE,QADJ;AAEHC,QAAAA,QAAQ,EAAE;AAFP,OAFK;;AAOV;AACAC,MAAAA,MAAM,EAAE;AACNF,QAAAA,KAAK,EAAE,QADD;AAENC,QAAAA,QAAQ,EAAE,IAFJ;AAGNE,QAAAA,IAAI,EAAE;AAHA,OARE;;AAcV;AACAC,MAAAA,YAAY,EAAE;AACZJ,QAAAA,KAAK,EAAE,SADK;AAEZC,QAAAA,QAAQ,EAAE,IAFE;AAGZE,QAAAA,IAAI,EAAE;AAHM,OAfJ;;AAqBV;AACAE,MAAAA,IAAI,EAAE;AACJL,QAAAA,KAAK,EAAE,QADH;AAEJC,QAAAA,QAAQ,EAAE;AAFN,OAtBI;;AA2BV;AACAK,MAAAA,QAAQ,EAAE;AACRN,QAAAA,KAAK,EAAE,QADC;AAERC,QAAAA,QAAQ,EAAE;AAFF,OA5BA;;AAiCV;AACAM,MAAAA,QAAQ,EAAE;AACRP,QAAAA,KAAK,EAAE,QADC;AAERC,QAAAA,QAAQ,EAAE;AAFF,OAlCA;;AAuCV;AACAO,MAAAA,KAAK,EAAE;AACLR,QAAAA,KAAK,EAAE,CACL,SADK,EAEL,YAFK,EAGL,SAHK,EAIL,WAJK,EAKL,WALK,EAML,SANK,EAOL,SAPK,EAQL,QARK,CADF;AAWLG,QAAAA,IAAI,EAAE,SAXD;AAYLM,QAAAA,KAAK,EAAE,aAZF;AAaLC,QAAAA,KAAK,EAAE;AAbF,OAxCG;;AAwDV;AACAC,MAAAA,cAAc,EAAE;AACdX,QAAAA,KAAK,EAAE,QADO;AAEdC,QAAAA,QAAQ,EAAE;AAFI,OAzDN;;AA8DV;AACAW,MAAAA,UAAU,EAAE;AACVZ,QAAAA,KAAK,EAAE,QADG;AAEVC,QAAAA,QAAQ,EAAE;AAFA,OA/DF;;AAoEV;AACAY,MAAAA,UAAU,EAAE;AACVb,QAAAA,KAAK,EAAE,QADG;AAEVC,QAAAA,QAAQ,EAAE;AAFA,OArEF;;AA0EV;AACAa,MAAAA,YAAY,EAAE;AACZd,QAAAA,KAAK,EAAE,QADK;AAEZC,QAAAA,QAAQ,EAAE;AAFE,OA3EJ;;AAgFV;AACAc,MAAAA,gBAAgB,EAAE;AAChBf,QAAAA,KAAK,EAAE,SADS;AAEhBC,QAAAA,QAAQ,EAAE;AAFM;AAjFR,KAxDqC;;AA+IjD;AACF;AACA;AACA;AACA;AAEEe,IAAAA,OAAO,EAAE;AACP;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,IAhBO,kBAgBA;AACL,cAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD,OAlBM;;AAoBP;AACJ;AACA;AACA;AACA;AACA;AACIC,MAAAA,KA1BO,mBA0BC;AAON,aAAKC,QAAL,CAAc,SAAd;AACD,OAlCM;;AAoCP;AACJ;AACA;AACA;AACA;AACA;AACIvB,MAAAA,OA1CO,qBA0CG;AAOR,aAAKuB,QAAL,CAAc,SAAd;AACD,OAlDM;;AAoDP;AACJ;AACA;AACA;AACA;AACA;AACIxB,MAAAA,MA1DO,oBA0DE;AAOP,aAAKwB,QAAL,CAAc,QAAd;AACD,OAlEM;;AAoEP;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,gBArFO,4BAqFUC,MArFV,EAqFkBC,MArFlB,EAqF0B;AAC/B,cAAM,IAAIL,KAAJ,CAAU,8BAAV,CAAN;AACD,OAvFM;;AAyFP;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIM,MAAAA,iBA1GO,6BA0GWF,MA1GX,EA0GmB;AACxB,cAAM,IAAIJ,KAAJ,CAAU,+BAAV,CAAN;AACD,OA5GM;;AA8GP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIO,MAAAA,kBAxHO,gCAwHc;AACnB,cAAM,IAAIP,KAAJ,CAAU,gCAAV,CAAN;AACD,OA1HM;;AA4HP;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIQ,MAAAA,aA5IO,2BA4IS;AACd,cAAM,IAAIR,KAAJ,CAAU,2BAAV,CAAN;AACD,OA9IM;;AAgJP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIS,MAAAA,aA1JO,2BA0JS;AACd,cAAM,IAAIT,KAAJ,CAAU,2BAAV,CAAN;AACD,OA5JM;;AA8JP;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIU,MAAAA,eAhLO,6BAgLW;AAChB,cAAM,IAAIV,KAAJ,CAAU,6BAAV,CAAN;AACD,OAlLM;;AAoLP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIW,MAAAA,cAhMO,4BAgMU;AACf,cAAM,IAAIX,KAAJ,CAAU,4BAAV,CAAN;AACD,OAlMM;;AAoMP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIY,MAAAA,gBA9MO,8BA8MY;AACjB,cAAM,IAAIZ,KAAJ,CAAU,8BAAV,CAAN;AACD,OAhNM;;AAkNP;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACIa,MAAAA,WA/NO,uBA+NKC,KA/NL,EA+NYC,GA/NZ,EA+NiB;AAOtB,gBAAQD,KAAR;AACE,eAAK,SAAL;AACE,iBAAKE,SAAL,CAAe,SAAf;AACA;;AAEF,eAAK,YAAL;AACE,iBAAKA,SAAL,CAAe,YAAf;AACA;;AAEF,eAAK,SAAL;AACE,iBAAKA,SAAL,CAAe,SAAf;AACA;;AAEF,eAAK,WAAL;AACE,iBAAKA,SAAL,CAAe,WAAf;AACA;;AAEF,eAAK,WAAL;AACE,iBAAKA,SAAL,CAAe,WAAf;AACA;;AAEF,eAAK,SAAL;AACE,iBAAKA,SAAL,CAAe,SAAf;AACA;;AAEF,eAAK,QAAL;AACE,iBAAKA,SAAL,CAAe,QAAf;AACA;;AAEF,eAAK,SAAL;AACE,iBAAKA,SAAL,CAAe,SAAf;AACA;AA/BJ;;AAkCA,eAAO,IAAP;AACD;AAzQM,KArJwC;;AAiajD;AACF;AACA;AACA;AACA;AAEEC,IAAAA,QAvaiD,sBAuatC;AACT,WAAKjD,iBAAL,CAAuB,IAAvB;AACA,WAAKC,aAAL,CAAmB,IAAnB;AACA,WAAKC,aAAL,CAAmB,IAAnB;AACD;AA3agD,GAAnD;AAtBAb,EAAAA,EAAE,CAAC6D,EAAH,CAAMC,MAAN,CAAaC,SAAb,CAAuBC,QAAvB,CAAgC7D,aAAhC,GAAgDA,aAAhD",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * Abstract for all transport implementations\n */\nqx.Class.define(\"qx.io.remote.transport.Abstract\", {\n  type: \"abstract\",\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n\n    this.setRequestHeaders({});\n    this.setParameters({});\n    this.setFormFields({});\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Event when a request is created */\n    created: \"qx.event.type.Event\",\n\n    /** Event when a request is configured */\n    configured: \"qx.event.type.Event\",\n\n    /** Event when a request is send */\n    sending: \"qx.event.type.Event\",\n\n    /** Event when a request is received */\n    receiving: \"qx.event.type.Event\",\n\n    /** Event when a request is completed */\n    completed: \"qx.event.type.Event\",\n\n    /** Event when a request is aborted */\n    aborted: \"qx.event.type.Event\",\n\n    /** Event when a request has failed */\n    failed: \"qx.event.type.Event\",\n\n    /** Event when a request has timed out */\n    timeout: \"qx.event.type.Event\",\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** Target url to issue the request to */\n    url: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /** Determines what type of request to issue */\n    method: {\n      check: \"String\",\n      nullable: true,\n      init: \"GET\",\n    },\n\n    /** Set the request to asynchronous */\n    asynchronous: {\n      check: \"Boolean\",\n      nullable: true,\n      init: true,\n    },\n\n    /** Set the data to be sent via this request */\n    data: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /** Username to use for HTTP authentication */\n    username: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /** Password to use for HTTP authentication */\n    password: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /** The state of the current request */\n    state: {\n      check: [\n        \"created\",\n        \"configured\",\n        \"sending\",\n        \"receiving\",\n        \"completed\",\n        \"aborted\",\n        \"timeout\",\n        \"failed\",\n      ],\n      init: \"created\",\n      event: \"changeState\",\n      apply: \"_applyState\",\n    },\n\n    /** Request headers */\n    requestHeaders: {\n      check: \"Object\",\n      nullable: true,\n    },\n\n    /** Request parameters to send. */\n    parameters: {\n      check: \"Object\",\n      nullable: true,\n    },\n\n    /** Request form fields to send. */\n    formFields: {\n      check: \"Object\",\n      nullable: true,\n    },\n\n    /** Response Type */\n    responseType: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /** Use Basic HTTP Authentication */\n    useBasicHttpAuth: {\n      check: \"Boolean\",\n      nullable: true,\n    },\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /*\n    ---------------------------------------------------------------------------\n      USER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sending a request.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @throws {Error} the abstract function warning.\n     */\n    send() {\n      throw new Error(\"send is abstract\");\n    },\n\n    /**\n     * Force the transport into the aborted state (\"aborted\").\n     *\n     * Listeners of the \"aborted\" signal are notified about the event.\n     *\n     */\n    abort() {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (qx.core.Environment.get(\"qx.debug.io.remote\")) {\n          this.warn(\"Aborting...\");\n        }\n      }\n\n      this.setState(\"aborted\");\n    },\n\n    /**\n     * Force the transport into the timeout state (\"timeout\").\n     *\n     * Listeners of the \"timeout\" signal are notified about the event.\n     *\n     */\n    timeout() {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (qx.core.Environment.get(\"qx.debug.io.remote\")) {\n          this.warn(\"Timeout...\");\n        }\n      }\n\n      this.setState(\"timeout\");\n    },\n\n    /**\n     * Force the transport into the failed state (\"failed\").\n     *\n     * Listeners of the \"failed\" signal are notified about the event.\n     *\n     */\n    failed() {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (qx.core.Environment.get(\"qx.debug.io.remote\")) {\n          this.warn(\"Failed...\");\n        }\n      }\n\n      this.setState(\"failed\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      REQUEST HEADER SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Add a request header to this transports qx.io.remote.Request.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @param vLabel {String} Request header name\n     * @param vValue {var} Value for the header\n     * @throws {Error} the abstract function warning.\n     */\n    setRequestHeader(vLabel, vValue) {\n      throw new Error(\"setRequestHeader is abstract\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      RESPONSE HEADER SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the request header of the request.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @param vLabel {String} Response header name\n     * @return {Object}\n     * @throws {Error} the abstract function warning.\n     */\n    getResponseHeader(vLabel) {\n      throw new Error(\"getResponseHeader is abstract\");\n    },\n\n    /**\n     * Provides an hash of all response headers.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @return {Object}\n     * @throws {Error} the abstract function warning.\n     */\n    getResponseHeaders() {\n      throw new Error(\"getResponseHeaders is abstract\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      STATUS SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the current status code of the request if available or -1 if not.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @return {Integer}\n     * @throws {Error} the abstract function warning.\n     */\n    getStatusCode() {\n      throw new Error(\"getStatusCode is abstract\");\n    },\n\n    /**\n     * Provides the status text for the current request if available and null otherwise.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @return {String}\n     * @throws {Error} the abstract function warning.\n     */\n    getStatusText() {\n      throw new Error(\"getStatusText is abstract\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      RESPONSE DATA SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Provides the response text from the request when available and null otherwise.\n     * By passing true as the \"partial\" parameter of this method, incomplete data will\n     * be made available to the caller.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @return {String}\n     * @throws {Error} the abstract function warning.\n     */\n    getResponseText() {\n      throw new Error(\"getResponseText is abstract\");\n    },\n\n    /**\n     * Provides the XML provided by the response if any and null otherwise.\n     * By passing true as the \"partial\" parameter of this method, incomplete data will\n     * be made available to the caller.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @return {Object}\n     * @throws {Error} the abstract function warning.\n     */\n    getResponseXml() {\n      throw new Error(\"getResponseXml is abstract\");\n    },\n\n    /**\n     * Returns the length of the content as fetched thus far.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @return {Integer}\n     * @throws {Error} the abstract function warning.\n     */\n    getFetchedLength() {\n      throw new Error(\"getFetchedLength is abstract\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Apply method for \"state\" property. For each state value a corresponding\n     * event is fired to inform the listeners.\n     *\n     * @param value {var} Current value\n     * @param old {var} Previous value\n     */\n    _applyState(value, old) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (qx.core.Environment.get(\"qx.debug.io.remote\")) {\n          this.debug(\"State: \" + value);\n        }\n      }\n\n      switch (value) {\n        case \"created\":\n          this.fireEvent(\"created\");\n          break;\n\n        case \"configured\":\n          this.fireEvent(\"configured\");\n          break;\n\n        case \"sending\":\n          this.fireEvent(\"sending\");\n          break;\n\n        case \"receiving\":\n          this.fireEvent(\"receiving\");\n          break;\n\n        case \"completed\":\n          this.fireEvent(\"completed\");\n          break;\n\n        case \"aborted\":\n          this.fireEvent(\"aborted\");\n          break;\n\n        case \"failed\":\n          this.fireEvent(\"failed\");\n          break;\n\n        case \"timeout\":\n          this.fireEvent(\"timeout\");\n          break;\n      }\n\n      return true;\n    },\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this.setRequestHeaders(null);\n    this.setParameters(null);\n    this.setFormFields(null);\n  },\n});\n"
  ]
}