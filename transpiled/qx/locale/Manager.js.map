{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/locale/Manager.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "__translations",
    "$$translations",
    "__locales",
    "$$locales",
    "initLocale",
    "__clientLocale",
    "getLocale",
    "statics",
    "tr",
    "messageId",
    "varargs",
    "args",
    "lang",
    "Array",
    "fromArguments",
    "arguments",
    "locale",
    "Manager",
    "getInstance",
    "translate",
    "trn",
    "singularMessageId",
    "pluralMessageId",
    "count",
    "splice",
    "trc",
    "hint",
    "trnc",
    "marktr",
    "properties",
    "check",
    "apply",
    "event",
    "init",
    "Environment",
    "get",
    "variant",
    "members",
    "__defaultLocale",
    "__locale",
    "__language",
    "getLanguage",
    "getTerritory",
    "split",
    "getAvailableLocales",
    "includeNonloaded",
    "locales",
    "push",
    "__extractLanguage",
    "language",
    "pos",
    "indexOf",
    "substring",
    "_applyLocale",
    "value",
    "old",
    "addTranslation",
    "languageCode",
    "translationMap",
    "catalog",
    "key",
    "addLocale",
    "localeCode",
    "localeMap",
    "__lookupAndExpand",
    "localize",
    "txt",
    "length",
    "translatedArgs",
    "i",
    "arg",
    "String",
    "format",
    "LocalizedString"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The qx.locale.Manager provides static translation methods (like tr()) and\n * general locale information.\n *\n * @require(qx.event.dispatch.Direct)\n * @require(qx.locale.LocalizedString)\n * @require(qx.bom.client.Locale)\n *\n * Note: \"translating\" the empty string, e.g. tr(\"\") will return the header\n * of the respective .po file. See also https://www.gnu.org/software/gettext/manual/html_node/PO-Files.html#PO-Files\n *\n * @cldr()\n */\n\nqx.Class.define(\"qx.locale.Manager\", {\n  type: \"singleton\",\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n\n    this.__translations = qx.$$translations || {};\n    this.__locales = qx.$$locales || {};\n\n    this.initLocale();\n    this.__clientLocale = this.getLocale();\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Translate a message\n     *\n     * @param messageId {String} message id (may contain format strings)\n     * @param varargs {Object} variable number of arguments applied to the format string\n     * @return {String | LocalizedString} The translated message or localized string\n     * @see qx.lang.String.format\n     */\n    tr(messageId, varargs) {\n      var args = qx.lang.Array.fromArguments(arguments, 1);\n\n      return qx.locale.Manager.getInstance().translate(messageId, args);\n    },\n\n    /**\n     * Translate a plural message\n     *\n     * Depending on the third argument the plural or the singular form is chosen.\n     *\n     * @param singularMessageId {String} message id of the singular form (may contain format strings)\n     * @param pluralMessageId {String} message id of the plural form (may contain format strings)\n     * @param count {Integer} singular form if equals 1, otherwise plural\n     * @param varargs {Object} variable number of arguments applied to the format string\n     * @return {String | LocalizedString} The translated message or localized string\n     * @see qx.lang.String.format\n     */\n    trn(singularMessageId, pluralMessageId, count, varargs) {\n      var args = qx.lang.Array.fromArguments(arguments);\n      args.splice(0, 3);\n\n      // assumes \"Two forms, singular used for one only\" (seems to be the most common form)\n      // (http://www.gnu.org/software/gettext/manual/html_node/gettext_150.html#Plural-forms)\n      // closely related with bug #745\n      if (count != 1) {\n        return qx.locale.Manager.getInstance().translate(pluralMessageId, args);\n      } else {\n        return qx.locale.Manager.getInstance().translate(\n          singularMessageId,\n          args\n        );\n      }\n    },\n\n    /**\n     * Translate a message with translation hint (from developer addressed to translator).\n     *\n     * @param hint {String} hint for the translator of the message. Will be included in the .po file.\n     * @param messageId {String} message id (may contain format strings)\n     * @param varargs {Object} variable number of arguments applied to the format string\n     * @return {String | LocalizedString} The translated message or localized string\n     * @see qx.lang.String.format\n     */\n    trc(hint, messageId, varargs) {\n      var args = qx.lang.Array.fromArguments(arguments);\n      args.splice(0, 2);\n\n      return qx.locale.Manager.getInstance().translate(messageId, args);\n    },\n\n    /**\n     * Translate a plural message with translation hint (from developer addressed to translator).\n     *\n     * Depending on the third argument the plural or the singular form is chosen.\n     *\n     * @param hint {String} hint for the translator of the message. Will be included in the .po file.\n     * @param singularMessageId {String} message id of the singular form (may contain format strings)\n     * @param pluralMessageId {String} message id of the plural form (may contain format strings)\n     * @param count {Integer} singular form if equals 1, otherwise plural\n     * @param varargs {Object} variable number of arguments applied to the format string\n     * @return {String | LocalizedString} The translated message or localized string\n     * @see qx.lang.String.format\n     */\n    trnc(hint, singularMessageId, pluralMessageId, count, varargs) {\n      var args = qx.lang.Array.fromArguments(arguments);\n      args.splice(0, 4);\n\n      // see trn()\n      if (count != 1) {\n        return qx.locale.Manager.getInstance().translate(pluralMessageId, args);\n      } else {\n        return qx.locale.Manager.getInstance().translate(\n          singularMessageId,\n          args\n        );\n      }\n    },\n\n    /**\n     * Mark the message for translation but return the original message.\n     *\n     * @param messageId {String} the message ID\n     * @return {String} messageId\n     */\n    marktr(messageId) {\n      return messageId;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** current locale. locale is an language code like de, de_AT, en, en_GB, fr, ... */\n    locale: {\n      check: \"String\",\n      apply: \"_applyLocale\",\n      event: \"changeLocale\",\n      init: (function () {\n        var locale = qx.core.Environment.get(\"locale\");\n        if (!locale || locale === \"\") {\n          return qx.core.Environment.get(\"locale.default\");\n        }\n        var variant = qx.core.Environment.get(\"locale.variant\");\n        if (variant !== \"\") {\n          locale += \"_\" + variant;\n        }\n        return locale;\n      })()\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __defaultLocale: qx.core.Environment.get(\"locale.default\"),\n    __locale: null,\n    __language: null,\n    __translations: null,\n    __locales: null,\n    __clientLocale: null,\n\n    /**\n     * Get the language code of the current locale\n     *\n     * This is the first part of a locale definition. The language for \"de_DE\" would be \"de\"\n     *\n     * @return {String} language code\n     */\n    getLanguage() {\n      return this.__language;\n    },\n\n    /**\n     * Get the territory code of the current locale\n     *\n     * This is the second part of a locale definition. The territory for \"de_DE\" would be \"DE\"\n     *\n     * @return {String} territory code\n     */\n    getTerritory() {\n      return this.getLocale().split(\"_\")[1] || \"\";\n    },\n\n    /**\n     * Return the available application locales\n     *\n     * This corresponds to the LOCALES setting in config.json. Without argument,\n     * it only returns the currently loaded locales, with an argument of true\n     * all locales that went into the build. This is particularly interesting if\n     * locales were generated as dedicated I18N parts, and have to be loaded\n     * explicitly before being available.\n     *\n     * @param includeNonloaded {Boolean?null} include locales not yet loaded\n     * @return {String[]} array of available locales\n     */\n    getAvailableLocales(includeNonloaded) {\n      var locales = [];\n\n      for (var locale in this.__locales) {\n        if (locale != this.__defaultLocale) {\n          if (this.__locales[locale] === null && !includeNonloaded) {\n            continue; // skip not yet loaded locales\n          }\n          locales.push(locale);\n        }\n      }\n\n      return locales;\n    },\n\n    /**\n     * Extract the language part from a locale.\n     *\n     * @param locale {String} locale to be used\n     * @return {String} language\n     */\n    __extractLanguage(locale) {\n      var language;\n      if (locale == null) {\n        return null;\n      }\n      var pos = locale.indexOf(\"_\");\n\n      if (pos == -1) {\n        language = locale;\n      } else {\n        language = locale.substring(0, pos);\n      }\n\n      return language;\n    },\n\n    // property apply\n    _applyLocale(value, old) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (!(value in this.__locales || value == this.__clientLocale)) {\n          qx.log.Logger.warn(\"Locale: \" + value + \" not available.\");\n        }\n      }\n\n      this.__locale = value;\n      this.__language = this.__extractLanguage(value);\n    },\n\n    /**\n     * Add a translation to the translation manager.\n     *\n     * If <code>languageCode</code> already exists, its map will be updated with\n     * <code>translationMap</code> (new keys will be added, existing keys will be\n     * overwritten).\n     *\n     * @param languageCode {String} language code of the translation like <i>de, de_AT, en, en_GB, fr, ...</i>\n     * @param translationMap {Map} mapping of message identifiers to message strings in the target\n     *                             language, e.g. <i>{\"greeting_short\" : \"Hello\"}</i>. Plural forms\n     *                             are separate keys.\n     */\n    addTranslation(languageCode, translationMap) {\n      var catalog = this.__translations;\n      if (catalog[languageCode]) {\n        for (var key in translationMap) {\n          catalog[languageCode][key] = translationMap[key];\n        }\n      } else {\n        catalog[languageCode] = translationMap;\n      }\n    },\n\n    /**\n     * Add a localization to the localization manager.\n     *\n     * If <code>localeCode</code> already exists, its map will be updated with\n     * <code>localeMap</code> (new keys will be added, existing keys will be overwritten).\n     *\n     * @param localeCode {String} locale code of the translation like <i>de, de_AT, en, en_GB, fr, ...</i>\n     * @param localeMap {Map} mapping of locale keys to the target locale values, e.g.\n     *                        <i>{\"cldr_date_format_short\" : \"M/d/yy\"}</i>.\n     */\n    addLocale(localeCode, localeMap) {\n      var catalog = this.__locales;\n      if (catalog[localeCode]) {\n        for (var key in localeMap) {\n          catalog[localeCode][key] = localeMap[key];\n        }\n      } else {\n        catalog[localeCode] = localeMap;\n      }\n    },\n\n    /**\n     * Translate a message using the current locale and apply format string to the arguments.\n     *\n     * Implements the lookup chain locale (e.g. en_US) -> language (e.g. en) ->\n     * default locale (e.g. C). Localizes the arguments if possible and splices\n     * them into the message. If qx.dynlocale is on, returns a {@link\n     * LocalizedString}.\n     *\n     * @param messageId {String} message id (may contain format strings)\n     * @param args {Object[]} array of objects, which are inserted into the format string\n     * @param locale {String ? #locale} locale to be used; if not given, defaults to the value of {@link #locale}\n     * @return {String | LocalizedString} translated message or localized string\n     */\n    translate(messageId, args, locale) {\n      var catalog = this.__translations;\n      return this.__lookupAndExpand(catalog, messageId, args, locale);\n    },\n\n    /**\n     * Provide localization (CLDR) data.\n     *\n     * Implements the lookup chain locale (e.g. en_US) -> language (e.g. en) ->\n     * default locale (e.g. C). Localizes the arguments if possible and splices\n     * them into the message. If qx.dynlocale is on, returns a {@link\n     * LocalizedString}.\n     *\n     * @param messageId {String} message id (may contain format strings)\n     * @param args {Object[]} array of objects, which are inserted into the format string\n     * @param locale {String ? #locale} locale to be used; if not given, defaults to the value of {@link #locale}\n     * @return {String | LocalizedString} translated message or localized string\n     */\n    localize(messageId, args, locale) {\n      var catalog = this.__locales;\n      return this.__lookupAndExpand(catalog, messageId, args, locale);\n    },\n\n    /**\n     * Look up an I18N key in a catalog and expand format strings.\n     *\n     * Implements the lookup chain locale (e.g. en_US) -> language (e.g. en) ->\n     * default locale (e.g. C). Localizes the arguments if possible and splices\n     * them into the message. If qx.dynlocale is on, returns a {@link\n     * LocalizedString}.\n     *\n     * @param catalog {Map} map of I18N keys and their values\n     * @param messageId {String} message id (may contain format strings)\n     * @param args {Object[]} array of objects, which are inserted into the format string\n     * @param locale {String ? #locale} locale to be used; if not given, defaults to the value of {@link #locale}\n     * @return {String | LocalizedString} translated message or localized string\n     */\n    __lookupAndExpand(catalog, messageId, args, locale) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertObject(catalog);\n        this.assertString(messageId);\n        this.assertArray(args);\n      }\n      var txt;\n\n      if (!catalog) {\n        return messageId;\n      }\n\n      if (locale) {\n        var language = this.__extractLanguage(locale);\n      } else {\n        locale = this.__locale;\n        language = this.__language;\n      }\n\n      // e.g. DE_at\n      if (!txt && catalog[locale]) {\n        txt = catalog[locale][messageId];\n      }\n\n      // e.g. DE\n      if (!txt && catalog[language]) {\n        txt = catalog[language][messageId];\n      }\n\n      // C\n      if (!txt && catalog[this.__defaultLocale]) {\n        txt = catalog[this.__defaultLocale][messageId];\n      }\n\n      if (!txt) {\n        txt = messageId;\n      }\n\n      if (args.length > 0) {\n        var translatedArgs = [];\n        for (var i = 0; i < args.length; i++) {\n          var arg = args[i];\n          if (arg && arg.translate) {\n            translatedArgs[i] = arg.translate();\n          } else {\n            translatedArgs[i] = arg;\n          }\n        }\n        txt = qx.lang.String.format(txt, translatedArgs);\n      }\n\n      if (qx.core.Environment.get(\"qx.dynlocale\")) {\n        txt = new qx.locale.LocalizedString(\n          txt,\n          messageId,\n          args,\n          catalog === this.__locales\n        );\n      }\n\n      return txt;\n    }\n  }\n});\n"
  ]
}