{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/util/DeferredCallManager.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "implement",
    "IDisposable",
    "construct",
    "__calls",
    "__timeoutWrapper",
    "lang",
    "Function",
    "bind",
    "__timeout",
    "__hasCalls",
    "members",
    "__timeoutId",
    "__currentQueue",
    "schedule",
    "deferredCall",
    "window",
    "setTimeout",
    "callKey",
    "toHashCode",
    "refreshTimeout",
    "cancel",
    "isEmpty",
    "clearTimeout",
    "event",
    "GlobalError",
    "observeMethod",
    "clone",
    "key",
    "call",
    "destruct",
    "util",
    "DeferredCallManager"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This class manages the timer used for deferred calls. All\n * {@link qx.util.DeferredCall} instances use the single timer from this class.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.util.DeferredCallManager\", {\n  extend: qx.core.Object,\n  type: \"singleton\",\n  implement: [qx.core.IDisposable],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    this.__calls = {};\n    this.__timeoutWrapper = qx.lang.Function.bind(this.__timeout, this);\n    this.__hasCalls = false;\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __timeoutId: null,\n    __currentQueue: null,\n    __calls: null,\n    __hasCalls: null,\n    __timeoutWrapper: null,\n\n    /**\n     * Schedule a deferred call\n     *\n     * @param deferredCall {qx.util.DeferredCall} The call to schedule\n     */\n    schedule(deferredCall) {\n      if (this.__timeoutId == null) {\n        this.__timeoutId = window.setTimeout(this.__timeoutWrapper, 0);\n      }\n\n      var callKey = deferredCall.toHashCode();\n\n      // the flush is currently running and the call is already\n      // scheduled\n      if (this.__currentQueue && this.__currentQueue[callKey]) {\n        return;\n      }\n\n      this.__calls[callKey] = deferredCall;\n      this.__hasCalls = true;\n    },\n\n    /**\n     * Refresh the timeout if the current one is not active anymore.\n     * This is a very special case which can happen in unit tests using\n     * fakeTimers, which overrides the window.setTimeout function (amongst others)\n     * after restoring the sinon sandbox the timeout must be refreshed otherwise\n     * DeferredCalls would never fire.\n     */\n    refreshTimeout() {\n      if (this.__timeoutId !== null) {\n        this.__timeoutId = window.setTimeout(this.__timeoutWrapper, 0);\n      }\n    },\n\n    /**\n     * Cancel a scheduled deferred call\n     *\n     * @param deferredCall {qx.util.DeferredCall} The call to schedule\n     */\n    cancel(deferredCall) {\n      var callKey = deferredCall.toHashCode();\n\n      // the flush is currently running and the call is already\n      // scheduled -> remove it from the current queue\n      if (this.__currentQueue && this.__currentQueue[callKey]) {\n        this.__currentQueue[callKey] = null;\n        return;\n      }\n\n      delete this.__calls[callKey];\n\n      // stop timer if no other calls are waiting\n      if (qx.lang.Object.isEmpty(this.__calls) && this.__timeoutId != null) {\n        window.clearTimeout(this.__timeoutId);\n        this.__timeoutId = null;\n      }\n    },\n\n    /**\n     * Helper function for the timer.\n     *\n     * @signature function()\n     */\n    __timeout: qx.event.GlobalError.observeMethod(function () {\n      this.__timeoutId = null;\n\n      // the queue may change while doing the flush so we work on a copy of\n      // the queue and loop while the queue has any entries.\n      while (this.__hasCalls) {\n        this.__currentQueue = qx.lang.Object.clone(this.__calls);\n        this.__calls = {};\n        this.__hasCalls = false;\n\n        for (var key in this.__currentQueue) {\n          var call = this.__currentQueue[key];\n          if (call) {\n            this.__currentQueue[key] = null;\n            call.call();\n          }\n        }\n      }\n\n      this.__currentQueue = null;\n    })\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    if (this.__timeoutId != null) {\n      window.clearTimeout(this.__timeoutId);\n    }\n    this.__timeoutWrapper = this.__calls = null;\n  }\n});\n"
  ]
}