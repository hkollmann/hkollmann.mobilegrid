{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/util/format/NumberFormat.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "util",
    "format",
    "IFormat",
    "IDisposable",
    "construct",
    "locale",
    "arguments",
    "length",
    "lang",
    "Type",
    "isString",
    "setLocale",
    "Error",
    "Manager",
    "getInstance",
    "getLocale",
    "bind",
    "properties",
    "minimumIntegerDigits",
    "check",
    "init",
    "maximumIntegerDigits",
    "nullable",
    "minimumFractionDigits",
    "maximumFractionDigits",
    "groupingUsed",
    "prefix",
    "event",
    "postfix",
    "members",
    "num",
    "isNaN",
    "Infinity",
    "negative",
    "getMaximumFractionDigits",
    "mover",
    "Math",
    "pow",
    "round",
    "integerDigits",
    "String",
    "floor",
    "numStr",
    "integerStr",
    "substring",
    "getMinimumIntegerDigits",
    "getMaximumIntegerDigits",
    "fractionStr",
    "getMinimumFractionDigits",
    "getGroupingUsed",
    "origIntegerStr",
    "groupPos",
    "Number",
    "getGroupSeparator",
    "getPrefix",
    "getPostfix",
    "str",
    "getDecimalSeparator",
    "parse",
    "groupSepEsc",
    "escapeRegexpChars",
    "decimalSepEsc",
    "regex",
    "RegExp",
    "hit",
    "exec",
    "replace",
    "asStr",
    "parseFloat",
    "destruct",
    "removeRelatedBindings",
    "NumberFormat"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * A formatter and parser for numbers.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.util.format.NumberFormat\", {\n  extend: qx.core.Object,\n  implement: [qx.util.format.IFormat, qx.core.IDisposable],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param locale {String} optional locale to be used\n   * @throws {Error} If the argument is not a string.\n   */\n  construct(locale) {\n    super();\n\n    if (arguments.length > 0) {\n      if (arguments.length === 1) {\n        if (qx.lang.Type.isString(locale)) {\n          this.setLocale(locale);\n        } else {\n          throw new Error(\"Wrong argument type. String is expected.\");\n        }\n      } else {\n        throw new Error(\"Wrong number of arguments.\");\n      }\n    }\n\n    if (!locale) {\n      this.setLocale(qx.locale.Manager.getInstance().getLocale());\n      if (qx.core.Environment.get(\"qx.dynlocale\")) {\n        qx.locale.Manager.getInstance().bind(\"locale\", this, \"locale\");\n      }\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * The minimum number of integer digits (digits before the decimal separator).\n     * Missing digits will be filled up with 0 (\"19\" -> \"0019\").\n     */\n    minimumIntegerDigits: {\n      check: \"Number\",\n      init: 0\n    },\n\n    /**\n     * The maximum number of integer digits (superfluous digits will be cut off\n     * (\"1923\" -> \"23\").\n     */\n    maximumIntegerDigits: {\n      check: \"Number\",\n      nullable: true\n    },\n\n    /**\n     * The minimum number of fraction digits (digits after the decimal separator).\n     * Missing digits will be filled up with 0 (\"1.5\" -> \"1.500\")\n     */\n    minimumFractionDigits: {\n      check: \"Number\",\n      init: 0\n    },\n\n    /**\n     * The maximum number of fraction digits (digits after the decimal separator).\n     * Superfluous digits will cause rounding (\"1.8277\" -> \"1.83\")\n     */\n    maximumFractionDigits: {\n      check: \"Number\",\n      nullable: true\n    },\n\n    /** Whether thousand groupings should be used {e.g. \"1,432,234.65\"}. */\n    groupingUsed: {\n      check: \"Boolean\",\n      init: true\n    },\n\n    /** The prefix to put before the number {\"EUR \" -> \"EUR 12.31\"}. */\n    prefix: {\n      check: \"String\",\n      init: \"\",\n      event: \"changeNumberFormat\"\n    },\n\n    /** Sets the postfix to put after the number {\" %\" -> \"56.13 %\"}. */\n    postfix: {\n      check: \"String\",\n      init: \"\",\n      event: \"changeNumberFormat\"\n    },\n\n    /** Locale used */\n    locale: {\n      check: \"String\",\n      init: null,\n      event: \"changeLocale\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /**\n     * Formats a number.\n     *\n     * @param num {Number} the number to format.\n     * @return {String} the formatted number as a string.\n     */\n    format(num) {\n      // handle special cases\n      if (isNaN(num)) {\n        return \"NaN\";\n      }\n\n      switch (num) {\n        case Infinity:\n          return \"Infinity\";\n\n        case -Infinity:\n          return \"-Infinity\";\n      }\n\n      var negative = num < 0;\n\n      if (negative) {\n        num = -num;\n      }\n\n      if (this.getMaximumFractionDigits() != null) {\n        // Do the rounding\n        var mover = Math.pow(10, this.getMaximumFractionDigits());\n        num = Math.round(num * mover) / mover;\n      }\n\n      var integerDigits = String(Math.floor(num)).length;\n\n      var numStr = \"\" + num;\n\n      // Prepare the integer part\n      var integerStr = numStr.substring(0, integerDigits);\n\n      while (integerStr.length < this.getMinimumIntegerDigits()) {\n        integerStr = \"0\" + integerStr;\n      }\n\n      if (\n        this.getMaximumIntegerDigits() != null &&\n        integerStr.length > this.getMaximumIntegerDigits()\n      ) {\n        // NOTE: We cut off even though we did rounding before, because there\n        //     may be rounding errors (\"12.24000000000001\" -> \"12.24\")\n        integerStr = integerStr.substring(\n          integerStr.length - this.getMaximumIntegerDigits()\n        );\n      }\n\n      // Prepare the fraction part\n      var fractionStr = numStr.substring(integerDigits + 1);\n\n      while (fractionStr.length < this.getMinimumFractionDigits()) {\n        fractionStr += \"0\";\n      }\n\n      if (\n        this.getMaximumFractionDigits() != null &&\n        fractionStr.length > this.getMaximumFractionDigits()\n      ) {\n        // We have already rounded -> Just cut off the rest\n        fractionStr = fractionStr.substring(0, this.getMaximumFractionDigits());\n      }\n\n      // Add the thousand groupings\n      if (this.getGroupingUsed()) {\n        var origIntegerStr = integerStr;\n        integerStr = \"\";\n        var groupPos;\n\n        for (groupPos = origIntegerStr.length; groupPos > 3; groupPos -= 3) {\n          integerStr =\n            \"\" +\n            qx.locale.Number.getGroupSeparator(this.getLocale()) +\n            origIntegerStr.substring(groupPos - 3, groupPos) +\n            integerStr;\n        }\n\n        integerStr = origIntegerStr.substring(0, groupPos) + integerStr;\n      }\n\n      // Workaround: prefix and postfix are null even their defaultValue is \"\" and\n      //             allowNull is set to false?!?\n      var prefix = this.getPrefix() ? this.getPrefix() : \"\";\n      var postfix = this.getPostfix() ? this.getPostfix() : \"\";\n\n      // Assemble the number\n      var str = prefix + (negative ? \"-\" : \"\") + integerStr;\n\n      if (fractionStr.length > 0) {\n        str +=\n          \"\" +\n          qx.locale.Number.getDecimalSeparator(this.getLocale()) +\n          fractionStr;\n      }\n\n      str += postfix;\n\n      return str;\n    },\n\n    /**\n     * Parses a number.\n     *\n     * @param str {String} the string to parse.\n     * @return {Double} the number.\n     * @throws {Error} If the number string does not match the number format.\n     */\n    parse(str) {\n      // use the escaped separators for regexp\n      var groupSepEsc = qx.lang.String.escapeRegexpChars(\n        qx.locale.Number.getGroupSeparator(this.getLocale()) + \"\"\n      );\n\n      var decimalSepEsc = qx.lang.String.escapeRegexpChars(\n        qx.locale.Number.getDecimalSeparator(this.getLocale()) + \"\"\n      );\n\n      var regex = new RegExp(\n        \"^(\" +\n          qx.lang.String.escapeRegexpChars(this.getPrefix()) +\n          \")?([-+]){0,1}\" +\n          \"([0-9]{1,3}(?:\" +\n          groupSepEsc +\n          \"{0,1}[0-9]{3}){0,}){0,1}\" +\n          \"(\" +\n          decimalSepEsc +\n          \"\\\\d+){0,1}(\" +\n          qx.lang.String.escapeRegexpChars(this.getPostfix()) +\n          \")?$\"\n      );\n\n      var hit = regex.exec(str);\n\n      if (hit == null) {\n        throw new Error(\n          \"Number string '\" + str + \"' does not match the number format\"\n        );\n      }\n\n      // hit[1] = potential prefix\n      var negative = hit[2] == \"-\";\n      var integerStr = hit[3] || \"0\";\n      var fractionStr = hit[4];\n      // hit[5] = potential postfix\n\n      // Remove the thousand groupings\n      integerStr = integerStr.replace(new RegExp(groupSepEsc, \"g\"), \"\");\n\n      var asStr = (negative ? \"-\" : \"\") + integerStr;\n\n      if (fractionStr != null && fractionStr.length != 0) {\n        // Remove the leading decimal separator from the fractions string\n        fractionStr = fractionStr.replace(new RegExp(decimalSepEsc), \"\");\n        asStr += \".\" + fractionStr;\n      }\n\n      return parseFloat(asStr);\n    }\n  },\n\n  destruct() {\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().removeRelatedBindings(this);\n    }\n  }\n});\n"
  ]
}