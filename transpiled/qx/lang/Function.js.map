{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/lang/Function.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "getCaller",
    "args",
    "caller",
    "callee",
    "getName",
    "fcn",
    "displayName",
    "$$original",
    "wrapper",
    "classname",
    "$$mixin",
    "key",
    "$$members",
    "name",
    "self",
    "clazz",
    "constructor",
    "prototype",
    "fcnReResult",
    "toString",
    "match",
    "length",
    "globalEval",
    "data",
    "window",
    "execScript",
    "eval",
    "call",
    "create",
    "func",
    "options",
    "delay",
    "periodical",
    "attempt",
    "always",
    "event",
    "lang",
    "Array",
    "fromArguments",
    "arguments",
    "concat",
    "returns",
    "apply",
    "core",
    "Environment",
    "get",
    "GlobalError",
    "observeMethod",
    "setTimeout",
    "setInterval",
    "ret",
    "ex",
    "bind",
    "varargs",
    "curry",
    "listener",
    "optargs",
    "push",
    "interval",
    "Function"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n   ======================================================================\n\n   This class contains code based on the following work:\n\n   * Mootools\n     http://mootools.net\n     Version 1.1.1\n\n     Copyright:\n       2007 Valerio Proietti\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n************************************************************************ */\n\n/**\n * Collection of helper methods operating on functions.\n *\n * @ignore(qx.core.Object)\n * @require(qx.lang.Array)\n */\nqx.Bootstrap.define(\"qx.lang.Function\", {\n  statics: {\n    /**\n     * Extract the caller of a function from the arguments variable.\n     * This will not work in Opera < 9.6.\n     *\n     * @param args {arguments} The local arguments variable\n     * @return {Function} A reference to the calling function or \"undefined\" if caller is not supported.\n     */\n    getCaller(args) {\n      return args.caller ? args.caller.callee : args.callee.caller;\n    },\n\n    /**\n     * Try to get a sensible textual description of a function object.\n     * This may be the class/mixin and method name of a function\n     * or at least the signature of the function.\n     *\n     * @param fcn {Function} function the get the name for.\n     * @return {String} Name of the function.\n     */\n    getName(fcn) {\n      if (fcn.displayName) {\n        return fcn.displayName;\n      }\n\n      if (fcn.$$original || fcn.wrapper || fcn.classname) {\n        return fcn.classname + \".constructor()\";\n      }\n\n      if (fcn.$$mixin) {\n        //members\n        for (var key in fcn.$$mixin.$$members) {\n          if (fcn.$$mixin.$$members[key] == fcn) {\n            return fcn.$$mixin.name + \".prototype.\" + key + \"()\";\n          }\n        }\n\n        // statics\n        for (var key in fcn.$$mixin) {\n          if (fcn.$$mixin[key] == fcn) {\n            return fcn.$$mixin.name + \".\" + key + \"()\";\n          }\n        }\n      }\n\n      if (fcn.self) {\n        var clazz = fcn.self.constructor;\n        if (clazz) {\n          // members\n          for (var key in clazz.prototype) {\n            if (clazz.prototype[key] == fcn) {\n              return clazz.classname + \".prototype.\" + key + \"()\";\n            }\n          }\n          // statics\n          for (var key in clazz) {\n            if (clazz[key] == fcn) {\n              return clazz.classname + \".\" + key + \"()\";\n            }\n          }\n        }\n      }\n\n      var fcnReResult = fcn.toString().match(/function\\s*(\\w*)\\s*\\(.*/);\n      if (fcnReResult && fcnReResult.length >= 1 && fcnReResult[1]) {\n        return fcnReResult[1] + \"()\";\n      }\n\n      return \"anonymous()\";\n    },\n\n    /**\n     * Evaluates JavaScript code globally\n     *\n     * @lint ignoreDeprecated(eval)\n     *\n     * @param data {String} JavaScript commands\n     * @return {var} Result of the execution\n     */\n    globalEval(data) {\n      if (window.execScript) {\n        return window.execScript(data);\n      } else {\n        return eval.call(window, data);\n      }\n    },\n\n    /**\n     * Base function for creating functional closures which is used by most other methods here.\n     *\n     * *Syntax*\n     *\n     * <pre class='javascript'>var createdFunction = qx.lang.Function.create(myFunction, [options]);</pre>\n     *\n     * @param func {Function} Original function to wrap\n     * @param options {Map?} Map of options\n     * <ul>\n     * <li><strong>self</strong>: The object that the \"this\" of the function will refer to. Default is the same as the wrapper function is called.</li>\n     * <li><strong>args</strong>: An array of arguments that will be passed as arguments to the function when called.\n     *     Default is no custom arguments; the function will receive the standard arguments when called.</li>\n     * <li><strong>delay</strong>: If set, the returned function will delay the actual execution by this amount of milliseconds and return a timer handle when called.\n     *     Default is no delay.</li>\n     * <li><strong>periodical</strong>: If set the returned function will periodically perform the actual execution with this specified interval\n     *      and return a timer handle when called. Default is no periodical execution.</li>\n     * <li><strong>attempt</strong>: If set to true, the returned function will try to execute and return either the results or false on error. Default is false.</li>\n     * <li><strong>always</strong>: Always wrap the function with a closure, even if the options suggest that it is not necessary</li>\n     * </ul>\n     *\n     * @return {Function} Wrapped function\n     */\n    create(func, options) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert &&\n          qx.core.Assert.assertFunction(func, \"Invalid parameter 'func'.\");\n      }\n\n      // Nothing to be done when there are no options.\n      if (!options) {\n        return func;\n      }\n\n      // Check for at least one attribute.\n      if (\n        !(\n          options.self ||\n          options.args ||\n          options.delay != null ||\n          options.periodical != null ||\n          options.attempt ||\n          options.always\n        )\n      ) {\n        return func;\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        function testSelf(self) {\n          if (\n            qx.core.Object &&\n            self &&\n            qx.Bootstrap.isObject(self) &&\n            self.isDisposed &&\n            qx.Bootstrap.isFunction(self.isDisposed)\n          ) {\n            if (self.isDisposed()) {\n              qx.core.Assert &&\n                qx.core.Assert.fail(\n                  \"Trying to call a bound function with a disposed object as context: \" +\n                    self.toString() +\n                    \" :: \" +\n                    qx.lang.Function.getName(func)\n                );\n            }\n          }\n        }\n      }\n\n      return function (event) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          testSelf(options.self || this);\n        }\n\n        // Convert (and copy) incoming arguments\n        var args = qx.lang.Array.fromArguments(arguments);\n\n        // Prepend static arguments\n        if (options.args) {\n          args = options.args.concat(args);\n        }\n\n        if (options.delay || options.periodical) {\n          var returns = function () {\n            return func.apply(options.self || this, args);\n          };\n\n          if (qx.core.Environment.get(\"qx.globalErrorHandling\")) {\n            returns = qx.event.GlobalError.observeMethod(returns);\n          }\n\n          if (options.delay) {\n            return window.setTimeout(returns, options.delay);\n          }\n\n          if (options.periodical) {\n            return window.setInterval(returns, options.periodical);\n          }\n        } else if (options.attempt) {\n          var ret = false;\n\n          try {\n            ret = func.apply(options.self || this, args);\n          } catch (ex) {}\n\n          return ret;\n        } else {\n          return func.apply(options.self || this, args);\n        }\n      };\n    },\n\n    /**\n     * Returns a function whose \"this\" is altered.\n     *\n     *\n     * *Native way*\n     *\n     * This is also a feature of JavaScript 1.8.5 and will be supplied\n     * by modern browsers. Including {@link qx.lang.normalize.Function}\n     * will supply a cross browser normalization of the native\n     * implementation. We like to encourage you to use the native function!\n     *\n     *\n     * *Syntax*\n     *\n     * <pre class='javascript'>qx.lang.Function.bind(myFunction, [self, [varargs...]]);</pre>\n     *\n     * *Example*\n     *\n     * <pre class='javascript'>\n     * function myFunction()\n     * {\n     *   this.setStyle('color', 'red');\n     *   // note that 'this' here refers to myFunction, not an element\n     *   // we'll need to bind this function to the element we want to alter\n     * };\n     *\n     * var myBoundFunction = qx.lang.Function.bind(myFunction, myElement);\n     * myBoundFunction(); // this will make the element myElement red.\n     * </pre>\n     *\n     * If you find yourself using this static method a lot, you may be\n     * interested in the bindTo() method in the mixin qx.core.MBindTo.\n     *\n     * @see qx.core.MBindTo\n     *\n     * @param func {Function} Original function to wrap\n     * @param self {Object ? null} The object that the \"this\" of the function will refer to.\n     * @param varargs {arguments ? null} The arguments to pass to the function.\n     * @return {Function} The bound function.\n     */\n    bind(func, self, varargs) {\n      return this.create(func, {\n        self: self,\n        args:\n          arguments.length > 2\n            ? qx.lang.Array.fromArguments(arguments, 2)\n            : null\n      });\n    },\n\n    /**\n     * Returns a function whose arguments are pre-configured.\n     *\n     * *Syntax*\n     *\n     * <pre class='javascript'>qx.lang.Function.curry(myFunction, [varargs...]);</pre>\n     *\n     * *Example*\n     *\n     * <pre class='javascript'>\n     * function myFunction(elem) {\n     *   elem.setStyle('color', 'red');\n     * };\n     *\n     * var myBoundFunction = qx.lang.Function.curry(myFunction, myElement);\n     * myBoundFunction(); // this will make the element myElement red.\n     * </pre>\n     *\n     * @param func {Function} Original function to wrap\n     * @param varargs {arguments} The arguments to pass to the function.\n     * @return {var} The pre-configured function.\n     */\n    curry(func, varargs) {\n      return this.create(func, {\n        args:\n          arguments.length > 1\n            ? qx.lang.Array.fromArguments(arguments, 1)\n            : null\n      });\n    },\n\n    /**\n     * Returns a function which could be used as a listener for a native event callback.\n     *\n     * *Syntax*\n     *\n     * <pre class='javascript'>qx.lang.Function.listener(myFunction, [self, [varargs...]]);</pre>\n     *\n     * @param func {Function} Original function to wrap\n     * @param self {Object ? null} The object that the \"this\" of the function will refer to.\n     * @param varargs {arguments ? null} The arguments to pass to the function.\n     * @return {var} The bound function.\n     */\n    listener(func, self, varargs) {\n      if (arguments.length < 3) {\n        return function (event) {\n          // Directly execute, but force first parameter to be the event object.\n          return func.call(self || this, event || window.event);\n        };\n      } else {\n        var optargs = qx.lang.Array.fromArguments(arguments, 2);\n\n        return function (event) {\n          var args = [event || window.event];\n\n          // Append static arguments\n          args.push.apply(args, optargs);\n\n          // Finally execute original method\n          func.apply(self || this, args);\n        };\n      }\n    },\n\n    /**\n     * Tries to execute the function.\n     *\n     * *Syntax*\n     *\n     * <pre class='javascript'>var result = qx.lang.Function.attempt(myFunction, [self, [varargs...]]);</pre>\n     *\n     * *Example*\n     *\n     * <pre class='javascript'>\n     * var myObject = {\n     *   'cow': 'moo!'\n     * };\n     *\n     * var myFunction = function()\n     * {\n     *   for(var i = 0; i < arguments.length; i++) {\n     *     if(!this[arguments[i]]) throw('doh!');\n     *   }\n     * };\n     *\n     * var result = qx.lang.Function.attempt(myFunction, myObject, 'pig', 'cow'); // false\n     * </pre>\n     *\n     * @param func {Function} Original function to wrap\n     * @param self {Object ? null} The object that the \"this\" of the function will refer to.\n     * @param varargs {arguments ? null} The arguments to pass to the function.\n     * @return {Boolean|var} <code>false</code> if an exception is thrown, else the function's return.\n     */\n    attempt(func, self, varargs) {\n      return this.create(func, {\n        self: self,\n        attempt: true,\n        args:\n          arguments.length > 2\n            ? qx.lang.Array.fromArguments(arguments, 2)\n            : null\n      })();\n    },\n\n    /**\n     * Delays the execution of a function by a specified duration.\n     *\n     * *Syntax*\n     *\n     * <pre class='javascript'>var timeoutID = qx.lang.Function.delay(myFunction, [delay, [self, [varargs...]]]);</pre>\n     *\n     * *Example*\n     *\n     * <pre class='javascript'>\n     * var myFunction = function(){ alert('moo! Element id is: ' + this.id); };\n     * //wait 50 milliseconds, then call myFunction and bind myElement to it\n     * qx.lang.Function.delay(myFunction, 50, myElement); // alerts: 'moo! Element id is: ... '\n     *\n     * // An anonymous function, example\n     * qx.lang.Function.delay(function(){ alert('one second later...'); }, 1000); //wait a second and alert\n     * </pre>\n     *\n     * @param func {Function} Original function to wrap\n     * @param delay {Integer} The duration to wait (in milliseconds).\n     * @param self {Object ? null} The object that the \"this\" of the function will refer to.\n     * @param varargs {arguments ? null} The arguments to pass to the function.\n     * @return {Integer} The JavaScript Timeout ID (useful for clearing delays).\n     */\n    delay(func, delay, self, varargs) {\n      return this.create(func, {\n        delay: delay,\n        self: self,\n        args:\n          arguments.length > 3\n            ? qx.lang.Array.fromArguments(arguments, 3)\n            : null\n      })();\n    },\n\n    /**\n     * Executes a function in the specified intervals of time\n     *\n     * *Syntax*\n     *\n     * <pre class='javascript'>var intervalID = qx.lang.Function.periodical(myFunction, [period, [self, [varargs...]]]);</pre>\n     *\n     * *Example*\n     *\n     * <pre class='javascript'>\n     * var Site = { counter: 0 };\n     * var addCount = function(){ this.counter++; };\n     * qx.lang.Function.periodical(addCount, 1000, Site); // will add the number of seconds at the Site\n     * </pre>\n     *\n     * @param func {Function} Original function to wrap\n     * @param interval {Integer} The duration of the intervals between executions.\n     * @param self {Object ? null} The object that the \"this\" of the function will refer to.\n     * @param varargs {arguments ? null} The arguments to pass to the function.\n     * @return {Integer} The Interval ID (useful for clearing a periodical).\n     */\n    periodical(func, interval, self, varargs) {\n      return this.create(func, {\n        periodical: interval,\n        self: self,\n        args:\n          arguments.length > 3\n            ? qx.lang.Array.fromArguments(arguments, 3)\n            : null\n      })();\n    }\n  }\n});\n"
  ]
}