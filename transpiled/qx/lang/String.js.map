{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/lang/String.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__unicodeLetters",
    "__unicodeFirstLetterInWordRegexp",
    "__camelCaseMap",
    "__hyphenationMap",
    "__characterTypes",
    "camelCase",
    "str",
    "result",
    "replace",
    "match",
    "chr",
    "toUpperCase",
    "hyphenate",
    "charAt",
    "toLowerCase",
    "capitalize",
    "unicodeEscapePrefix",
    "RegExp",
    "isUpperCase",
    "lang",
    "String",
    "__characterRx",
    "upper",
    "test",
    "isLowerCase",
    "lower",
    "isLetters",
    "letter",
    "isDigits",
    "digit",
    "clean",
    "trim",
    "trimLeft",
    "trimRight",
    "startsWith",
    "fullstr",
    "substr",
    "endsWith",
    "repeat",
    "times",
    "length",
    "Array",
    "join",
    "pad",
    "ch",
    "padLength",
    "firstUp",
    "firstLow",
    "contains",
    "substring",
    "indexOf",
    "format",
    "pattern",
    "args",
    "regexp",
    "isArray",
    "argsIsObject",
    "matchedSubString",
    "numberArgument",
    "namedArgument",
    "index",
    "escapeRegexpChars",
    "toArray",
    "split",
    "stripTags",
    "stripScripts",
    "exec",
    "scripts",
    "text",
    "arguments",
    "Function",
    "globalEval",
    "quote",
    "defer"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n   ======================================================================\n\n   This class contains code based on the following work:\n\n   * Mootools\n     http://mootools.net/\n     Version 1.1.1\n\n     Copyright:\n       (c) 2007 Valerio Proietti\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n   and\n\n   * XRegExp\n   http://xregexp.com/\n   Version 1.5\n\n   Copyright:\n       (c) 2006-2007, Steven Levithan <http://stevenlevithan.com>\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n     Authors:\n       * Steven Levithan\n\n************************************************************************ */\n\n/**\n * String helper functions\n *\n * The native JavaScript String is not modified by this class. However,\n * there are modifications to the native String in {@link qx.lang.normalize.String} for\n * browsers that do not support certain features.\n *\n * @require(qx.lang.normalize.String)\n */\nqx.Bootstrap.define(\"qx.lang.String\", {\n  statics: {\n    /**\n     * Unicode letters.  they are taken from Steve Levithan's excellent XRegExp library [http://xregexp.com/addons/unicode/unicode-base.js]\n     */\n    __unicodeLetters:\n      \"0041-005A0061-007A00AA00B500BA00C0-00D600D8-00F600F8-02C102C6-02D102E0-02E402EC02EE0370-037403760377037A-037D03860388-038A038C038E-03A103A3-03F503F7-0481048A-05250531-055605590561-058705D0-05EA05F0-05F20621-064A066E066F0671-06D306D506E506E606EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA07F407F507FA0800-0815081A082408280904-0939093D09500958-0961097109720979-097F0985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10D05-0D0C0D0E-0D100D12-0D280D2A-0D390D3D0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E460E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EC60EDC0EDD0F000F40-0F470F49-0F6C0F88-0F8B1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10A0-10C510D0-10FA10FC1100-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA1700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317D717DC1820-18771880-18A818AA18B0-18F51900-191C1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541AA71B05-1B331B45-1B4B1B83-1BA01BAE1BAF1C00-1C231C4D-1C4F1C5A-1C7D1CE9-1CEC1CEE-1CF11D00-1DBF1E00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FBC1FBE1FC2-1FC41FC6-1FCC1FD0-1FD31FD6-1FDB1FE0-1FEC1FF2-1FF41FF6-1FFC2071207F2090-209421022107210A-211321152119-211D212421262128212A-212D212F-2139213C-213F2145-2149214E218321842C00-2C2E2C30-2C5E2C60-2CE42CEB-2CEE2D00-2D252D30-2D652D6F2D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2E2F300530063031-3035303B303C3041-3096309D-309F30A1-30FA30FC-30FF3105-312D3131-318E31A0-31B731F0-31FF3400-4DB54E00-9FCBA000-A48CA4D0-A4FDA500-A60CA610-A61FA62AA62BA640-A65FA662-A66EA67F-A697A6A0-A6E5A717-A71FA722-A788A78BA78CA7FB-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2A9CFAA00-AA28AA40-AA42AA44-AA4BAA60-AA76AA7AAA80-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADB-AADDABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA2DFA30-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF21-FF3AFF41-FF5AFF66-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC\",\n\n    /**\n     * A RegExp that matches the first letter in a word - unicode aware\n     */\n    __unicodeFirstLetterInWordRegexp: null,\n\n    /**\n     * @type {Map} Cache for often used string operations [camelCasing and hyphenation]\n     * e.g. marginTop => margin-top\n     */\n    __camelCaseMap: {},\n\n    /**\n     * {Map} Cache for often used hyphenation operations\n     * e.g. marginTop => margin-top\n     */\n    __hyphenationMap: {},\n\n    /** @type{Map<char, String} character types, key is the character and the vaklue is `upper`, `lower`, or `digit` */\n    __characterTypes: null,\n\n    /**\n     * Converts a hyphenated string (separated by '-') to camel case.\n     *\n     * Example:\n     * <pre class='javascript'>qx.lang.String.camelCase(\"I-like-cookies\"); //returns \"ILikeCookies\"</pre>\n     *\n     * @param str {String} hyphenated string\n     * @return {String} camelcase string\n     */\n    camelCase(str) {\n      var result = this.__camelCaseMap[str];\n      if (!result) {\n        result = str.replace(/\\-([a-z])/g, function (match, chr) {\n          return chr.toUpperCase();\n        });\n        this.__camelCaseMap[str] = result;\n      }\n      return result;\n    },\n\n    /**\n     * Converts a camelcased string to a hyphenated (separated by '-') string.\n     *\n     * Example:\n     * <pre class='javascript'>qx.lang.String.hyphenate(\"weLikeCookies\"); //returns \"we-like-cookies\"</pre>\n     *\n     * @param str {String} camelcased string\n     * @return {String} hyphenated string\n     */\n    hyphenate(str) {\n      var result = this.__hyphenationMap[str];\n      if (!result) {\n        result = str.replace(/[A-Z]/g, function (match) {\n          return \"-\" + match.charAt(0).toLowerCase();\n        });\n        this.__hyphenationMap[str] = result;\n      }\n      return result;\n    },\n\n    /**\n     * Converts a string to camel case.\n     *\n     * Example:\n     * <pre class='javascript'>qx.lang.String.camelCase(\"i like cookies\"); //returns \"I Like Cookies\"</pre>\n     *\n     * @param str {String} any string\n     * @return {String} capitalized string\n     */\n    capitalize(str) {\n      if (this.__unicodeFirstLetterInWordRegexp === null) {\n        var unicodeEscapePrefix = \"\\\\u\";\n        this.__unicodeFirstLetterInWordRegexp = new RegExp(\n          \"(^|[^\" +\n            this.__unicodeLetters.replace(/[0-9A-F]{4}/g, function (match) {\n              return unicodeEscapePrefix + match;\n            }) +\n            \"])[\" +\n            this.__unicodeLetters.replace(/[0-9A-F]{4}/g, function (match) {\n              return unicodeEscapePrefix + match;\n            }) +\n            \"]\",\n          \"g\"\n        );\n      }\n      return str.replace(\n        this.__unicodeFirstLetterInWordRegexp,\n        function (match) {\n          return match.toUpperCase();\n        }\n      );\n    },\n\n    /**\n     * Detects whether the string is all upper case\n     * @param {String} str\n     * @returns {Boolean}\n     */\n    isUpperCase(str) {\n      return qx.lang.String.__characterRx.upper.test(str);\n    },\n\n    /**\n     * Detects whether the string is all lower case\n     * @param {String} str\n     * @returns {Boolean}\n     */\n    isLowerCase(str) {\n      return qx.lang.String.__characterRx.lower.test(str);\n    },\n\n    /**\n     * Detects whether the string is all letters\n     * @param {String} str\n     * @returns {Boolean}\n     */\n    isLetters(str) {\n      return qx.lang.String.__characterRx.letter.test(str);\n    },\n\n    /**\n     * Detects whether the string is all digits\n     * @param {String} str\n     * @returns {Boolean}\n     */\n    isDigits(str) {\n      return qx.lang.String.__characterRx.digit.test(str);\n    },\n\n    /**\n     * Removes all extraneous whitespace from a string and trims it\n     *\n     * Example:\n     *\n     * <code>\n     * qx.lang.String.clean(\" i      like     cookies      \\n\\n\");\n     * </code>\n     *\n     * Returns \"i like cookies\"\n     *\n     * @param str {String} the string to clean up\n     * @return {String} Cleaned up string\n     */\n    clean(str) {\n      return str.replace(/\\s+/g, \" \").trim();\n    },\n\n    /**\n     * removes white space from the left side of a string\n     *\n     * @param str {String} the string to trim\n     * @return {String} the trimmed string\n     */\n    trimLeft(str) {\n      return str.replace(/^\\s+/, \"\");\n    },\n\n    /**\n     * removes white space from the right side of a string\n     *\n     * @param str {String} the string to trim\n     * @return {String} the trimmed string\n     */\n    trimRight(str) {\n      return str.replace(/\\s+$/, \"\");\n    },\n\n    /**\n     * Check whether the string starts with the given substring\n     *\n     * @deprecated {6.0} Please use String instance startsWith method instead\n     *\n     * @param fullstr {String} the string to search in\n     * @param substr {String} the substring to look for\n     * @return {Boolean} whether the string starts with the given substring\n     */\n    startsWith(fullstr, substr) {\n      return fullstr.startsWith(substr);\n    },\n\n    /**\n     * Check whether the string ends with the given substring\n     *\n     * @deprecated {6.0} Please use String instance endsWith method instead\n     *\n     * @param fullstr {String} the string to search in\n     * @param substr {String} the substring to look for\n     * @return {Boolean} whether the string ends with the given substring\n     */\n    endsWith(fullstr, substr) {\n      return fullstr.endsWith(substr);\n    },\n\n    /**\n     * Returns a string, which repeats a string 'length' times\n     *\n     * @param str {String} string used to repeat\n     * @param times {Integer} the number of repetitions\n     * @return {String} repeated string\n     */\n    repeat(str, times) {\n      return str.length > 0 ? new Array(times + 1).join(str) : \"\";\n    },\n\n    /**\n     * Pad a string up to a given length. Padding characters are added to the left of the string.\n     *\n     * @param str {String} the string to pad\n     * @param length {Integer} the final length of the string\n     * @param ch {String} character used to fill up the string\n     * @return {String} padded string\n     */\n    pad(str, length, ch) {\n      var padLength = length - str.length;\n      if (padLength > 0) {\n        if (typeof ch === \"undefined\") {\n          ch = \"0\";\n        }\n        return this.repeat(ch, padLength) + str;\n      } else {\n        return str;\n      }\n    },\n\n    /**\n     * Convert the first character of the string to upper case.\n     *\n     * @signature function(str)\n     * @param str {String} the string\n     * @return {String} the string with an upper case first character\n     */\n    firstUp: qx.Bootstrap.firstUp,\n\n    /**\n     * Convert the first character of the string to lower case.\n     *\n     * @signature function(str)\n     * @param str {String} the string\n     * @return {String} the string with a lower case first character\n     */\n    firstLow: qx.Bootstrap.firstLow,\n\n    /**\n     * Check whether the string contains a given substring\n     *\n     * @param str {String} the string\n     * @param substring {String} substring to search for\n     * @return {Boolean} whether the string contains the substring\n     */\n    contains(str, substring) {\n      return str.indexOf(substring) != -1;\n    },\n\n    /**\n     * Print a list of arguments using a format string\n     * In the format string occurrences of %n are replaced by the n'th element of the args list.\n     * You can give an object as argument.\n     * In this case you should specify namedArgument in your string with %{namedArgument}.\n     * The named argument will be replace by the value of the property of the object named \"namedArgument\"\n     * Example:\n     * <pre class='javascript'>qx.lang.String.format(\"Hello %1, my name is %2\", [\"Egon\", \"Franz\"]) == \"Hello Egon, my name is Franz\"</pre>\n     * <pre class='javascript'>qx.lang.String.format(\"Hello %{yourName}, my name is %{myName}\", {yourName: \"Egon\", myName: \"Franz\"}) == \"Hello Egon, my name is Franz\"</pre>\n     *\n     * @param pattern {String} format string\n     * @param args {Array} array of arguments to insert into the format string\n     * @return {String} the formatted string\n     */\n    format(pattern, args) {\n      var str = pattern;\n      var regexp = /%(\\d+)|%{(\\S[^}\\s]*)}/g;\n      if (!Array.isArray(args)) {\n        args = [args];\n      }\n\n      var argsIsObject = args.length === 1 && typeof args[0] === \"object\";\n\n      str = str.replace(\n        regexp,\n        function (matchedSubString, numberArgument, namedArgument) {\n          if (namedArgument) {\n            if (argsIsObject) {\n              return args[0][namedArgument];\n            }\n\n            return namedArgument;\n          }\n\n          if (\n            numberArgument &&\n            numberArgument > 0 &&\n            args.length >= numberArgument\n          ) {\n            var index = numberArgument - 1;\n            return args[index];\n          }\n\n          return matchedSubString;\n        }\n      );\n\n      return str;\n    },\n\n    /**\n     * Escapes all chars that have a special meaning in regular expressions\n     *\n     * @param str {String} the string where to escape the chars.\n     * @return {String} the string with the escaped chars.\n     */\n    escapeRegexpChars(str) {\n      return str.replace(/([.*+?^${}()|[\\]\\/\\\\])/g, \"\\\\$1\");\n    },\n\n    /**\n     * Converts a string to an array of characters.\n     * <pre>\"hello\" => [ \"h\", \"e\", \"l\", \"l\", \"o\" ];</pre>\n     *\n     * @param str {String} the string which should be split\n     * @return {Array} the result array of characters\n     */\n    toArray(str) {\n      return str.split(/\\B|\\b/g);\n    },\n\n    /**\n     * Remove HTML/XML tags from a string\n     * Example:\n     * <pre class='javascript'>qx.lang.String.stripTags(\"&lt;h1>Hello&lt;/h1>\") == \"Hello\"</pre>\n     *\n     * @param str {String} string containing tags\n     * @return {String} the string with stripped tags\n     */\n    stripTags(str) {\n      return str.replace(/<\\/?[^>]+>/gi, \"\");\n    },\n\n    /**\n     * Strips <script> tags including its content from the given string.\n     *\n     * @param str {String} string containing tags\n     * @param exec {Boolean?false} Whether the filtered code should be executed\n     * @return {String} The filtered string\n     */\n    stripScripts(str, exec) {\n      var scripts = \"\";\n      var text = str.replace(\n        /<script[^>]*>([\\s\\S]*?)<\\/script>/gi,\n        function () {\n          scripts += arguments[1] + \"\\n\";\n          return \"\";\n        }\n      );\n\n      if (exec === true) {\n        qx.lang.Function.globalEval(scripts);\n      }\n\n      return text;\n    },\n\n    /**\n     * Quotes the given string.\n     * @param str {String} String to quote.\n     * @return {String} The quoted string.\n     */\n    quote(str) {\n      return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\\"/g, '\\\\\"') + '\"';\n    }\n  },\n\n  defer(statics) {\n    statics.__characterRx = {\n      letter: RegExp(/^\\p{General_Category=Letter}+$/u),\n      upper: RegExp(/^\\p{General_Category=Uppercase_Letter}+$/u),\n      lower: RegExp(/^\\p{General_Category=Lowercase_Letter}+$/u),\n      digit: RegExp(/^\\p{General_Category=Decimal_Number}+$/u)\n    };\n  }\n});\n"
  ]
}