{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/lang/Array.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "cast",
    "object",
    "constructor",
    "offset",
    "data",
    "IListData",
    "Class",
    "hasInterface",
    "toArray",
    "ret",
    "core",
    "Environment",
    "get",
    "item",
    "i",
    "l",
    "length",
    "push",
    "Object",
    "prototype",
    "toString",
    "call",
    "apply",
    "Array",
    "slice",
    "fromArguments",
    "args",
    "undefined",
    "fromCollection",
    "coll",
    "arr",
    "fromShortHand",
    "input",
    "len",
    "result",
    "lang",
    "clone",
    "concat",
    "insertAt",
    "obj",
    "splice",
    "insertBefore",
    "obj2",
    "indexOf",
    "insertAfter",
    "removeAt",
    "removeAll",
    "append",
    "arr1",
    "arr2",
    "exclude",
    "forEach",
    "index",
    "remove",
    "contains",
    "includes",
    "equals",
    "toNativeArray",
    "sum",
    "max",
    "min",
    "unique",
    "doneStrings",
    "doneNumbers",
    "doneObjects",
    "value",
    "count",
    "key",
    "Date",
    "now",
    "hasNull",
    "hasFalse",
    "hasTrue",
    "hash",
    "ex",
    "ex1",
    "Error",
    "range",
    "start",
    "stop",
    "step",
    "arguments",
    "Math",
    "ceil",
    "idx",
    "replace",
    "dest",
    "src",
    "Type",
    "isArray",
    "toDataArray"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n   ======================================================================\n\n   This class contains code based on the following work:\n\n   * jQuery\n     http://jquery.com\n     Version 1.3.1\n\n     Copyright:\n       2009 John Resig\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n   * Underscore.js\n     http://underscorejs.org\n\n     Copyright:\n       2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n************************************************************************ */\n\n/**\n * Static helper functions for arrays with a lot of often used convenience\n * methods like <code>remove</code> or <code>contains</code>.\n *\n * The native JavaScript Array is not modified by this class. However,\n * there are modifications to the native Array in {@link qx.lang.normalize.Array} for\n * browsers that do not support certain JavaScript features natively .\n *\n * @ignore(qx.data)\n * @ignore(qx.data.IListData)\n * @ignore(qx.Class.*)\n * @require(qx.lang.normalize.Date)\n */\nqx.Bootstrap.define(\"qx.lang.Array\", {\n  statics: {\n    /**\n     * Converts an array like object to any other array like\n     * object.\n     *\n     * Attention: The returned array may be same\n     * instance as the incoming one if the constructor is identical!\n     *\n     * @param object {var} any array-like object\n     * @param constructor {Function} constructor of the new instance\n     * @param offset {Integer?0} position to start from\n     * @return {Array} the converted array\n     */\n    cast(object, constructor, offset) {\n      if (object.constructor === constructor) {\n        return object;\n      }\n\n      if (qx.data && qx.data.IListData) {\n        if (qx.Class && qx.Class.hasInterface(object, qx.data.IListData)) {\n          var object = object.toArray();\n        }\n      }\n\n      // Create from given constructor\n      var ret = new constructor();\n\n      // Some collections in mshtml are not able to be sliced.\n      // These lines are a special workaround for this client.\n      if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\n        if (object.item) {\n          for (var i = offset || 0, l = object.length; i < l; i++) {\n            ret.push(object[i]);\n          }\n\n          return ret;\n        }\n      }\n\n      // Copy over items\n      if (\n        Object.prototype.toString.call(object) === \"[object Array]\" &&\n        offset == null\n      ) {\n        ret.push.apply(ret, object);\n      } else {\n        ret.push.apply(ret, Array.prototype.slice.call(object, offset || 0));\n      }\n\n      return ret;\n    },\n\n    /**\n     * Convert an arguments object into an array.\n     *\n     * @param args {arguments} arguments object\n     * @param offset {Integer?0} position to start from\n     * @return {Array} a newly created array (copy) with the content of the arguments object.\n     */\n    fromArguments(args, offset) {\n      // Optimising for this use case can make a big difference (eg x100)\n      if (args.length === 0 && (offset === undefined || offset === 0)) {\n        return [];\n      }\n      return Array.prototype.slice.call(args, offset || 0);\n    },\n\n    /**\n     * Convert a (node) collection into an array\n     *\n     * @param coll {var} node collection\n     * @return {Array} a newly created array (copy) with the content of the node collection.\n     */\n    fromCollection(coll) {\n      // The native Array.slice cannot be used with some Array-like objects\n      // including NodeLists in older IEs\n      if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\n        if (coll.item) {\n          var arr = [];\n          for (var i = 0, l = coll.length; i < l; i++) {\n            arr[i] = coll[i];\n          }\n\n          return arr;\n        }\n      }\n\n      return Array.prototype.slice.call(coll, 0);\n    },\n\n    /**\n     * Expand shorthand definition to a four element list.\n     * This is an utility function for padding/margin and all other shorthand handling.\n     *\n     * @param input {Array} arr with one to four elements\n     * @return {Array} an arr with four elements\n     */\n    fromShortHand(input) {\n      var len = input.length;\n      var result = qx.lang.Array.clone(input);\n\n      // Copy Values (according to the length)\n      switch (len) {\n        case 1:\n          result[1] = result[2] = result[3] = result[0];\n          break;\n\n        case 2:\n          result[2] = result[0];\n        // no break here\n\n        case 3:\n          result[3] = result[1];\n      }\n\n      // Return list with 4 items\n      return result;\n    },\n\n    /**\n     * Return a copy of the given array\n     *\n     * @param arr {Array} the array to copy\n     * @return {Array} copy of the array\n     */\n    clone(arr) {\n      return arr.concat();\n    },\n\n    /**\n     * Insert an element at a given position into the array\n     *\n     * @param arr {Array} the array\n     * @param obj {var} the element to insert\n     * @param i {Integer} position where to insert the element into the array\n     * @return {Array} the array\n     */\n    insertAt(arr, obj, i) {\n      arr.splice(i, 0, obj);\n\n      return arr;\n    },\n\n    /**\n     * Insert an element into the array before a given second element.\n     *\n     * @param arr {Array} the array\n     * @param obj {var} object to be inserted\n     * @param obj2 {var} insert obj1 before this object\n     * @return {Array} the array\n     */\n    insertBefore(arr, obj, obj2) {\n      var i = arr.indexOf(obj2);\n\n      if (i == -1) {\n        arr.push(obj);\n      } else {\n        arr.splice(i, 0, obj);\n      }\n\n      return arr;\n    },\n\n    /**\n     * Insert an element into the array after a given second element.\n     *\n     * @param arr {Array} the array\n     * @param obj {var} object to be inserted\n     * @param obj2 {var} insert obj1 after this object\n     * @return {Array} the array\n     */\n    insertAfter(arr, obj, obj2) {\n      var i = arr.indexOf(obj2);\n\n      if (i == -1 || i == arr.length - 1) {\n        arr.push(obj);\n      } else {\n        arr.splice(i + 1, 0, obj);\n      }\n\n      return arr;\n    },\n\n    /**\n     * Remove an element from the array at the given index\n     *\n     * @param arr {Array} the array\n     * @param i {Integer} index of the element to be removed\n     * @return {var} The removed element.\n     */\n    removeAt(arr, i) {\n      return arr.splice(i, 1)[0];\n    },\n\n    /**\n     * Remove all elements from the array\n     *\n     * @param arr {Array} the array\n     * @return {Array} empty array\n     */\n    removeAll(arr) {\n      arr.length = 0;\n      return this;\n    },\n\n    /**\n     * Append the elements of an array to the array\n     *\n     * @param arr1 {Array} the array\n     * @param arr2 {Array} the elements of this array will be appended to other one\n     * @return {Array} The modified array.\n     * @throws {Error} if one of the arguments is not an array\n     */\n    append(arr1, arr2) {\n      if (arr1 instanceof qx.data.Array) {\n        return arr1.append(arr2);\n      }\n      if (arr2 instanceof qx.data.Array) {\n        arr2 = arr2.toArray();\n      }\n\n      // this check is important because opera throws an uncatchable error if apply is called without\n      // an arr as second argument.\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert &&\n          qx.core.Assert.assertArray(\n            arr1,\n            \"The first parameter must be an array.\"\n          );\n\n        qx.core.Assert &&\n          qx.core.Assert.assertArray(\n            arr2,\n            \"The second parameter must be an array.\"\n          );\n      }\n\n      Array.prototype.push.apply(arr1, arr2);\n      return arr1;\n    },\n\n    /**\n     * Modifies the first array as it removes all elements\n     * which are listed in the second array as well.\n     *\n     * @param arr1 {Array} the array\n     * @param arr2 {Array} the elements of this array will be excluded from the other one\n     * @return {Array} The modified array.\n     * @throws {Error} if one of the arguments is not an array\n     */\n    exclude(arr1, arr2) {\n      if (arr1 instanceof qx.data.Array) {\n        return arr1.exclude(arr2);\n      }\n\n      // this check is important because opera throws an uncatchable error if apply is called without\n      // an arr as second argument.\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert &&\n          qx.core.Assert.assertArray(\n            arr1,\n            \"The first parameter must be an array.\"\n          );\n\n        qx.core.Assert &&\n          qx.core.Assert.assertArray(\n            arr2,\n            \"The second parameter must be an array.\"\n          );\n      }\n\n      arr2.forEach(function (item) {\n        var index = arr1.indexOf(item);\n        if (index != -1) {\n          arr1.splice(index, 1);\n        }\n      });\n\n      return arr1;\n    },\n\n    /**\n     * Remove an element from the array.\n     *\n     * @param arr {Array} the array\n     * @param obj {var} element to be removed from the array\n     * @return {var} the removed element\n     */\n    remove(arr, obj) {\n      if (arr instanceof qx.data.Array) {\n        return arr.remove(obj);\n      }\n\n      var i = arr.indexOf(obj);\n\n      if (i != -1) {\n        arr.splice(i, 1);\n        return obj;\n      }\n    },\n\n    /**\n     * Whether the array contains the given element\n     *\n     * @deprecated {6.0} Please use Array instance include method instead\n     *\n     * @param arr {Array} the array\n     * @param obj {var} object to look for\n     * @return {Boolean} whether the arr contains the element\n     */\n    contains(arr, obj) {\n      return arr.includes(obj);\n    },\n\n    /**\n     * Check whether the two arrays have the same content. Checks only the\n     * equality of the arrays' content.\n     *\n     * @param arr1 {Array} first array\n     * @param arr2 {Array} second array\n     * @return {Boolean} Whether the two arrays are equal\n     */\n    equals(arr1, arr2) {\n      if (arr1 instanceof qx.data.Array) {\n        return arr1.equals(arr2);\n      }\n      arr2 = qx.lang.Array.toNativeArray(arr2);\n\n      var length = arr1.length;\n\n      if (length !== arr2.length) {\n        return false;\n      }\n\n      for (var i = 0; i < length; i++) {\n        if (arr1[i] !== arr2[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * Returns the sum of all values in the given array. Supports\n     * numeric values only.\n     *\n     * @param arr {Number[]} Array to process\n     * @return {Number} The sum of all values.\n     */\n    sum(arr) {\n      var result = 0;\n      for (var i = 0, l = arr.length; i < l; i++) {\n        if (arr[i] != undefined) {\n          result += arr[i];\n        }\n      }\n\n      return result;\n    },\n\n    /**\n     * Returns the highest value in the given array. Supports\n     * numeric values only.\n     *\n     * @param arr {Number[]} Array to process\n     * @return {Number | null} The highest of all values or undefined if array is empty.\n     */\n    max(arr) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert &&\n          qx.core.Assert.assertArray(arr, \"Parameter must be an array.\");\n      }\n\n      var i,\n        len = arr.length,\n        result = arr[0];\n\n      for (i = 1; i < len; i++) {\n        if (arr[i] > result) {\n          result = arr[i];\n        }\n      }\n\n      return result === undefined ? null : result;\n    },\n\n    /**\n     * Returns the lowest value in the given array. Supports\n     * numeric values only.\n     *\n     * @param arr {Number[]} Array to process\n     * @return {Number | null} The lowest of all values or undefined if array is empty.\n     */\n    min(arr) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert &&\n          qx.core.Assert.assertArray(arr, \"Parameter must be an array.\");\n      }\n\n      var i,\n        len = arr.length,\n        result = arr[0];\n\n      for (i = 1; i < len; i++) {\n        if (arr[i] < result) {\n          result = arr[i];\n        }\n      }\n\n      return result === undefined ? null : result;\n    },\n\n    /**\n     * Recreates an array which is free of all duplicate elements from the original.\n     *\n     * This method does not modify the original array!\n     *\n     * Keep in mind that this methods deletes undefined indexes.\n     *\n     * @param arr {Array} Incoming array\n     * @return {Array} Returns a copy with no duplicates\n     */\n    unique(arr) {\n      var ret = [],\n        doneStrings = {},\n        doneNumbers = {},\n        doneObjects = {};\n      var value,\n        count = 0;\n      var key = \"qx\" + Date.now();\n      var hasNull = false,\n        hasFalse = false,\n        hasTrue = false;\n\n      // Rebuild array and omit duplicates\n      for (var i = 0, len = arr.length; i < len; i++) {\n        value = arr[i];\n\n        // Differ between null, primitives and reference types\n        if (value === null) {\n          if (!hasNull) {\n            hasNull = true;\n            ret.push(value);\n          }\n        } else if (value === undefined) {\n          // pass\n        } else if (value === false) {\n          if (!hasFalse) {\n            hasFalse = true;\n            ret.push(value);\n          }\n        } else if (value === true) {\n          if (!hasTrue) {\n            hasTrue = true;\n            ret.push(value);\n          }\n        } else if (typeof value === \"string\") {\n          if (!doneStrings[value]) {\n            doneStrings[value] = 1;\n            ret.push(value);\n          }\n        } else if (typeof value === \"number\") {\n          if (!doneNumbers[value]) {\n            doneNumbers[value] = 1;\n            ret.push(value);\n          }\n        } else {\n          var hash = value[key];\n\n          if (hash == null) {\n            hash = value[key] = count++;\n          }\n\n          if (!doneObjects[hash]) {\n            doneObjects[hash] = value;\n            ret.push(value);\n          }\n        }\n      }\n\n      // Clear object hashs\n      for (var hash in doneObjects) {\n        try {\n          delete doneObjects[hash][key];\n        } catch (ex) {\n          try {\n            doneObjects[hash][key] = null;\n          } catch (ex1) {\n            throw new Error(\n              \"Cannot clean-up map entry doneObjects[\" + hash + \"][\" + key + \"]\"\n            );\n          }\n        }\n      }\n\n      return ret;\n    },\n\n    /**\n     * Returns a new array with integers from start to stop incremented or decremented by step.\n     *\n     * @param start {Integer} start of the new array, defaults to 0\n     * @param stop {Integer} stop of the new array\n     * @param step {Integer} increment / decrement - depends whether you use positive or negative values\n     * @return {Array} Returns a new array with integers\n     */\n    range(start, stop, step) {\n      if (arguments.length <= 1) {\n        stop = start || 0;\n        start = 0;\n      }\n      step = arguments[2] || 1;\n\n      var length = Math.max(Math.ceil((stop - start) / step), 0);\n      var idx = 0;\n      var range = Array(length);\n\n      while (idx < length) {\n        range[idx++] = start;\n        start += step;\n      }\n\n      return range;\n    },\n\n    /**\n     * Replaces the contents of the array `dest`\n     *\n     * @param dest {Array|qx.data.Array} the array to edit (if null then a new array is created)\n     * @param src {Array|qx.data.Array} the array to copy from, or null\n     * @return {Array} the edited array (or the new array, if dest is null)\n     */\n    replace(dest, src) {\n      if (dest instanceof qx.data.Array) {\n        return dest.replace(src);\n      }\n\n      if (src === null) {\n        if (dest === null) {\n          return null;\n        } else {\n          return [];\n        }\n      }\n\n      src = qx.lang.Array.toNativeArray(src);\n      if (dest === null) {\n        dest = src.slice(0);\n      } else {\n        var args = [0, dest.length];\n        src.forEach(function (item) {\n          args.push(item);\n        });\n        dest.splice.apply(dest, args);\n      }\n      return dest;\n    },\n\n    /**\n     * Returns a native array from src where possible; qx.data.Array is converted to its native array,\n     * in which case unless `clone` parameter is set to true the rules of qx.data.Array.toArray should\n     * be followed, ie that the array should not be manipulated directly.\n     *\n     * @param src {qx.data.Array|Array} the object to return as an array\n     * @param clone{Boolean?} whether to make the returned array a clone, ie editable by the calling code\n     * @return {Array}\n     */\n    toNativeArray(src, clone) {\n      if (src === undefined || src === null) {\n        return src;\n      }\n      if (src instanceof qx.data.Array) {\n        if (clone) {\n          return src.toArray().slice(0);\n        }\n        return src.toArray();\n      }\n      if (qx.lang.Type.isArray(src)) {\n        if (clone) {\n          return src.slice(0);\n        }\n        return src;\n      }\n      return [src];\n    },\n\n    /**\n     * Returns a `qx.data.Array` array from src where possible; if `clone` is true then the result will\n     * always be a new instance of `qx.data.Array` even if it is already a `qx.data.Array`\n     *\n     * @param src {qx.data.Array|Array} the object to return as `qx.data.Array`\n     * @param clone{Boolean?} whether to make the returned array a clone, ie editable by the calling code\n     * @return {Array}\n     */\n    toDataArray(src, clone) {\n      if (src === undefined || src === null) {\n        return src;\n      }\n      if (src instanceof qx.data.Array) {\n        if (clone) {\n          return new qx.data.Array(src.toArray());\n        }\n        return src;\n      }\n      if (qx.lang.Type.isArray(src)) {\n        return new qx.data.Array(src);\n      }\n      return new qx.data.Array([src]);\n    }\n  }\n});\n"
  ]
}