{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/Class.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__Property",
    "core",
    "Property",
    "name",
    "config",
    "__defineImpl",
    "ex",
    "Class",
    "$$brokenClassDefinitions",
    "include",
    "getClass",
    "implement",
    "implicitType",
    "hasOwnProperty",
    "type",
    "clazz",
    "__createClass",
    "extend",
    "construct",
    "destruct",
    "forEach",
    "id",
    "__attachAnno",
    "properties",
    "__addProperties",
    "members",
    "__addMembers",
    "events",
    "__addEvents",
    "i",
    "l",
    "length",
    "__addMixin",
    "Error",
    "environment",
    "key",
    "Environment",
    "add",
    "__addInterface",
    "defer",
    "self",
    "addPendingDefer",
    "getByName",
    "classname",
    "prototype",
    "undefine",
    "$$registry",
    "ns",
    "split",
    "objects",
    "window",
    "push",
    "last",
    "parent",
    "isFunction",
    "objectGetLength",
    "isDefined",
    "util",
    "OOUtil",
    "classIsDefined",
    "getTotalNumber",
    "mixin",
    "patch",
    "isClass",
    "obj",
    "$$type",
    "constructor",
    "isSubClassOf",
    "superClass",
    "getPropertyDefinition",
    "getProperties",
    "list",
    "$$properties",
    "apply",
    "Object",
    "keys",
    "superclass",
    "getByProperty",
    "hasProperty",
    "getEventType",
    "supportsEvent",
    "hasOwnMixin",
    "$$includes",
    "indexOf",
    "getByMixin",
    "$$flatIncludes",
    "getMixins",
    "hasMixin",
    "hasOwnInterface",
    "iface",
    "$$implements",
    "getByInterface",
    "getInterfaces",
    "$$flatImplements",
    "hasInterface",
    "implementsInterface",
    "Interface",
    "objectImplements",
    "classImplements",
    "getInstance",
    "$$instance",
    "$$allowconstruct",
    "getSubclasses",
    "subclasses",
    "registry",
    "genericToString",
    "__allowedKeys",
    "select",
    "__staticAllowedKeys",
    "__validateConfig",
    "allowed",
    "maps",
    "undefined",
    "$$hash",
    "isObject",
    "a",
    "Mixin",
    "checkCompatibility",
    "message",
    "substr",
    "settings",
    "variants",
    "__validateAbstractInterfaces",
    "$$classtype",
    "interfaces",
    "assert",
    "group",
    "anno",
    "$$annotations",
    "lang",
    "Type",
    "isArray",
    "mixins",
    "isStrictMode",
    "setDisplayNames",
    "__createDefaultConstructor",
    "__wrapConstructor",
    "setDisplayName",
    "staticValue",
    "charAt",
    "basename",
    "createNamespace",
    "toString",
    "extendClass",
    "$$destructor",
    "$$events",
    "proto",
    "refine",
    "init",
    "event",
    "async",
    "inheritable",
    "$$inheritable",
    "$$refreshInheritables",
    "attachRefreshInheritables",
    "attachMethods",
    "__validateProperty",
    "has",
    "existingProperty",
    "warn",
    "$$allowedGroupKeys",
    "$$allowedKeys",
    "transform",
    "check",
    "isString",
    "base",
    "wrap",
    "member",
    "annoKey",
    "substring",
    "$$install",
    "Function",
    "create",
    "always",
    "flatten",
    "entry",
    "$$members",
    "defaultConstructor",
    "arguments",
    "wrapper",
    "retval",
    "$$original",
    "$$constructor"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,UAApB,EAAgC;AAC9BC,IAAAA,OAAO,EAAE;AACP;AACJ;AACA;AACA;AACIC,MAAAA,OAAU,EAAE,OACRN,EAAE,CAACO,IAAH,CAAQC,QADA,GAER,IAPG;;AASP;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIJ,MAAAA,MAnFO,kBAmFAK,IAnFA,EAmFMC,MAnFN,EAmFc;AACnB,YAAI;AACF,iBAAO,KAAKC,OAAL,CAAkBF,IAAlB,EAAwBC,MAAxB,CAAP;AACD,SAFD,CAEE,OAAOE,EAAP,EAAW;AACXZ,UAAAA,EAAE,CAACa,K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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * John Spackman (john.spackman@zenesis.com)\n\n************************************************************************ */\n\n/**\n * This class is one of the most important parts of qooxdoo's\n * object-oriented features.\n *\n * Its {@link #define} method is used to create qooxdoo classes.\n *\n * Each instance of a class defined by {@link #define} has\n * the following keys attached to the constructor and the prototype:\n *\n * <table>\n * <tr><th><code>classname</code></th><td>The fully-qualified name of the class (e.g. <code>\"qx.ui.core.Widget\"</code>).</td></tr>\n * <tr><th><code>basename</code></th><td>The namespace part of the class name (e.g. <code>\"qx.ui.core\"</code>).</td></tr>\n * <tr><th><code>constructor</code></th><td>A reference to the constructor of the class.</td></tr>\n * <tr><th><code>superclass</code></th><td>A reference to the constructor of the super class.</td></tr>\n * </table>\n *\n * Each method may access static members of the same class by using\n * <code>this.self(arguments)</code> ({@link qx.core.Object#self}):\n * <pre class='javascript'>\n * statics : { FOO : \"bar\" },\n * members: {\n *   baz: function(x) {\n *     this.self(arguments).FOO;\n *     ...\n *   }\n * }\n * </pre>\n *\n * Each overriding method may call the overridden method by using\n * <code>this.base(arguments [, ...])</code> ({@link qx.core.Object#base}). This is also true for calling\n * the constructor of the superclass.\n * <pre class='javascript'>\n * members: {\n *   foo: function(x) {\n *     this.base(arguments, x);\n *     ...\n *   }\n * }\n * </pre>\n *\n * By using <code>qx.Class</code> within an app, the native JS data types are\n * conveniently polyfilled according to {@link qx.lang.normalize}.\n *\n * Annotations can be added to classes, constructors, destructors, and methods, properties, and statics -\n * see <code>qx.Annotation</code> for examples and means access annotations at runtime.\n *\n * @require(qx.Interface)\n * @require(qx.Mixin)\n * @require(qx.lang.normalize.Array)\n * @require(qx.lang.normalize.Date)\n * @require(qx.lang.normalize.Error)\n * @require(qx.lang.normalize.Function)\n * @require(qx.lang.normalize.String)\n * @require(qx.lang.normalize.Object)\n * @require(qx.lang.normalize.Number)\n */\nqx.Bootstrap.define(\"qx.Class\", {\n  statics: {\n    /**\n     * A static reference to the property implementation in the case it\n     * should be included.\n     */\n    __Property: qx.core.Environment.get(\"module.property\")\n      ? qx.core.Property\n      : null,\n\n    /*\n    ---------------------------------------------------------------------------\n       PUBLIC METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Define a new class using the qooxdoo class system. This sets up the\n     * namespace for the class and generates the class from the definition map.\n     *\n     * Example:\n     * <pre class='javascript'>\n     * qx.Class.define(\"name\",\n     * {\n     *   extend : Object, // superclass\n     *   implement : [Interfaces],\n     *   include : [Mixins],\n     *\n     *   statics:\n     *   {\n     *     CONSTANT : 3.141,\n     *\n     *     publicMethod: function() {},\n     *     _protectedMethod: function() {},\n     *     __privateMethod: function() {}\n     *   },\n     *\n     *   properties:\n     *   {\n     *     \"tabIndex\": { check: \"Number\", init : -1 }\n     *   },\n     *\n     *   members:\n     *   {\n     *     publicField: \"foo\",\n     *     publicMethod: function() {},\n     *\n     *     _protectedField: \"bar\",\n     *     _protectedMethod: function() {},\n     *\n     *     __privateField: \"baz\",\n     *     __privateMethod: function() {}\n     *   }\n     * });\n     * </pre>\n     *\n     * @param name {String?null} Name of the class. If <code>null</code>, the class\n     *   will not be added to any namespace which could be handy for testing.\n     * @param config {Map ? null} Class definition structure. The configuration map has the following keys:\n     *     <table>\n     *       <tr><th>Name</th><th>Type</th><th>Description</th></tr>\n     *       <tr><th>type</th><td>String</td><td>\n     *           Type of the class. Valid types are \"abstract\", \"static\" and \"singleton\".\n     *           If unset it defaults to a regular non-static class.\n     *       </td></tr>\n     *       <tr><th>extend</th><td>Class</td><td>The super class the current class inherits from.</td></tr>\n     *       <tr><th>implement</th><td>Interface | Interface[]</td><td>Single interface or array of interfaces the class implements.</td></tr>\n     *       <tr><th>include</th><td>Mixin | Mixin[]</td><td>Single mixin or array of mixins, which will be merged into the class.</td></tr>\n     *       <tr><th>construct</th><td>Function</td><td>The constructor of the class.</td></tr>\n     *       <tr><th>statics</th><td>Map</td><td>Map of static members of the class.</td></tr>\n     *       <tr><th>properties</th><td>Map</td><td>Map of property definitions. For a description of the format of a property definition see\n     *           {@link qx.core.Property}.</td></tr>\n     *       <tr><th>members</th><td>Map</td><td>Map of instance members of the class.</td></tr>\n     *       <tr><th>environment</th><td>Map</td><td>Map of environment settings for this class. For a description of the format of a setting see\n     *           {@link qx.core.Environment}.</td></tr>\n     *       <tr><th>events</th><td>Map</td><td>\n     *           Map of events the class fires. The keys are the names of the events and the values are the\n     *           corresponding event type class names.\n     *       </td></tr>\n     *       <tr><th>defer</th><td>Function</td><td>Function that is called at the end of processing the class declaration. It allows access to the declared statics, members and properties.</td></tr>\n     *       <tr><th>destruct</th><td>Function</td><td>The destructor of the class.</td></tr>\n     *     </table>\n     * @return {Class} The defined class\n     */\n    define(name, config) {\n      try {\n        return this.__defineImpl(name, config);\n      } catch (ex) {\n        qx.Class.$$brokenClassDefinitions = true;\n        throw ex;\n      }\n    },\n\n    /**\n     * Implementation behind `define` - this exists just for the simplicity of wrapping an exception\n     * handler around the code\n     *\n     * @param {String} name @see `define()`\n     * @param {*} config @see `define()`\n     * @returns  @see `define()`\n     */\n    __defineImpl(name, config) {\n      if (!config) {\n        config = {};\n      }\n\n      // Normalize include to array\n      if (\n        config.include &&\n        !(qx.Bootstrap.getClass(config.include) === \"Array\")\n      ) {\n        config.include = [config.include];\n      }\n\n      // Normalize implement to array\n      if (\n        config.implement &&\n        !(qx.Bootstrap.getClass(config.implement) === \"Array\")\n      ) {\n        config.implement = [config.implement];\n      }\n\n      // Normalize type\n      var implicitType = false;\n      if (!config.hasOwnProperty(\"extend\") && !config.type) {\n        config.type = \"static\";\n        implicitType = true;\n      }\n\n      // Validate incoming data\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        try {\n          this.__validateConfig(name, config);\n        } catch (ex) {\n          if (implicitType) {\n            ex.message =\n              'Assumed static class because no \"extend\" key was found. ' +\n              ex.message;\n          }\n          throw ex;\n        }\n      }\n\n      // Create the class\n      var clazz = this.__createClass(\n        name,\n        config.type,\n        config.extend,\n        config.statics,\n        config.construct,\n        config.destruct,\n        config.include\n      );\n\n      // Initialise class and constructor/destructor annotations\n      [\"@\", \"@construct\", \"@destruct\"].forEach(function (id) {\n        this.__attachAnno(clazz, id, null, config[id]);\n      }, this);\n\n      // Members, properties, events and mixins are only allowed for non-static classes\n      if (config.extend) {\n        // Attach properties\n        if (config.properties) {\n          this.__addProperties(clazz, config.properties, true);\n        }\n\n        // Attach members\n        if (config.members) {\n          this.__addMembers(clazz, config.members, true, true, false);\n        }\n\n        // Process events\n        if (config.events) {\n          this.__addEvents(clazz, config.events, true);\n        }\n\n        // Include mixins\n        // Must be the last here to detect conflicts\n        if (config.include) {\n          for (var i = 0, l = config.include.length; i < l; i++) {\n            this.__addMixin(clazz, config.include[i], false);\n          }\n        }\n      }\n      // If config has a 'extend' key but it's null or undefined\n      else if (\n        config.hasOwnProperty(\"extend\") &&\n        qx.core.Environment.get(\"qx.debug\")\n      ) {\n        throw new Error('\"extend\" parameter is null or undefined');\n      }\n\n      // Process environment\n      if (config.environment) {\n        for (var key in config.environment) {\n          qx.core.Environment.add(key, config.environment[key]);\n        }\n      }\n\n      // Interface support for non-static classes\n      if (config.implement) {\n        for (var i = 0, l = config.implement.length; i < l; i++) {\n          this.__addInterface(clazz, config.implement[i]);\n        }\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.__validateAbstractInterfaces(clazz);\n      }\n\n      // Process defer\n      if (config.defer) {\n        config.defer.self = clazz;\n        qx.Bootstrap.addPendingDefer(clazz, function () {\n          clazz = qx.Class.getByName(clazz.classname);\n          config.defer(clazz, clazz.prototype, {\n            add(name, config) {\n              // build pseudo properties map\n              var properties = {};\n              properties[name] = config;\n\n              // execute generic property handler\n              qx.Class.__addProperties(clazz, properties, true);\n            }\n          });\n        });\n      }\n\n      return clazz;\n    },\n\n    /**\n     * Removes a class from qooxdoo defined by {@link #define}\n     *\n     * @param name {String} Name of the class\n     */\n    undefine(name) {\n      // first, delete the class from the registry\n      delete this.$$registry[name];\n      // delete the class reference from the namespaces and all empty namespaces\n      var ns = name.split(\".\");\n      // build up an array containing all namespace objects including window\n      var objects = [window];\n      for (var i = 0; i < ns.length; i++) {\n        objects.push(objects[i][ns[i]]);\n      }\n\n      // go through all objects and check for the constructor or empty namespaces\n      for (var i = objects.length - 1; i >= 1; i--) {\n        var last = objects[i];\n        var parent = objects[i - 1];\n        if (\n          // The class being undefined, but parent classes in case it is a nested class that is being undefined\n          (i == objects.length - 1 && qx.Bootstrap.isFunction(last)) ||\n          qx.Bootstrap.objectGetLength(last) === 0\n        ) {\n          delete parent[ns[i - 1]];\n        } else {\n          break;\n        }\n      }\n    },\n\n    /**\n     * Whether the given class exists\n     *\n     * @signature function(name)\n     * @param name {String} class name to check\n     * @return {Boolean} true if class exists\n     */\n    isDefined: qx.util.OOUtil.classIsDefined,\n\n    /**\n     * Determine the total number of classes\n     *\n     * @return {Number} the total number of classes\n     */\n    getTotalNumber() {\n      return qx.Bootstrap.objectGetLength(this.$$registry);\n    },\n\n    /**\n     * Find a class by its name\n     *\n     * @signature function(name)\n     * @param name {String} class name to resolve\n     * @return {Class} the class\n     */\n    getByName: qx.Bootstrap.getByName,\n\n    /**\n     * Include all features of the given mixin into the class. The mixin must\n     * not include any methods or properties that are already available in the\n     * class. This would only be possible using the {@link #patch} method.\n     *\n     * @param clazz {Class} An existing class which should be augmented by including a mixin.\n     * @param mixin {Mixin} The mixin to be included.\n     */\n    include(clazz, mixin) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (!mixin) {\n          throw new Error(\n            \"The mixin to include into class '\" +\n              clazz.classname +\n              \"' is undefined/null!\"\n          );\n        }\n\n        qx.Mixin.isCompatible(mixin, clazz);\n      }\n\n      qx.Class.__addMixin(clazz, mixin, false);\n    },\n\n    /**\n     * Include all features of the given mixin into the class. The mixin may\n     * include features, which are already defined in the target class. Existing\n     * features of equal name will be overwritten.\n     * Please keep in mind that this functionality is not intended for regular\n     * use, but as a formalized way (and a last resort) in order to patch\n     * existing classes.\n     *\n     * <b>WARNING</b>: You may break working classes and features.\n     *\n     * @param clazz {Class} An existing class which should be modified by including a mixin.\n     * @param mixin {Mixin} The mixin to be included.\n     * @return {Class} the new class definition\n     */\n    patch(clazz, mixin) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (!mixin) {\n          throw new Error(\n            \"The mixin to patch class '\" +\n              clazz.classname +\n              \"' is undefined/null!\"\n          );\n        }\n\n        qx.Mixin.isCompatible(mixin, clazz);\n      }\n\n      qx.Class.__addMixin(clazz, mixin, true);\n      return qx.Class.getByName(clazz.classname);\n    },\n\n    /**\n     * Detects whether the object is a Class (and not an instance of a class)\n     *\n     *  @param obj {Object?} the object to inspect\n     *  @return {Boolean} true if it is a class, false if it is anything else\n     */\n    isClass(obj) {\n      return obj && obj.$$type === \"Class\" && obj.constructor === obj;\n    },\n\n    /**\n     * Whether a class is a direct or indirect sub class of another class,\n     * or both classes coincide.\n     *\n     * @param clazz {Class} the class to check.\n     * @param superClass {Class} the potential super class\n     * @return {Boolean} whether clazz is a sub class of superClass.\n     */\n    isSubClassOf(clazz, superClass) {\n      if (!clazz) {\n        return false;\n      }\n\n      if (clazz == superClass) {\n        return true;\n      }\n\n      if (clazz.prototype instanceof superClass) {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Returns the definition of the given property. Returns null\n     * if the property does not exist.\n     *\n     * @signature function(clazz, name)\n     * @param clazz {Class} class to check\n     * @param name {String} name of the class to check for\n     * @return {Map|null} whether the object support the given event.\n     */\n    getPropertyDefinition: qx.util.OOUtil.getPropertyDefinition,\n\n    /**\n     * Returns a list of all properties supported by the given class\n     *\n     * @param clazz {Class} Class to query\n     * @return {String[]} List of all property names\n     */\n    getProperties(clazz) {\n      var list = [];\n\n      while (clazz) {\n        if (clazz.$$properties) {\n          list.push.apply(list, Object.keys(clazz.$$properties));\n        }\n\n        clazz = clazz.superclass;\n      }\n\n      return list;\n    },\n\n    /**\n     * Returns the class or one of its superclasses which contains the\n     * declaration for the given property in its class definition. Returns null\n     * if the property is not specified anywhere.\n     *\n     * @param clazz {Class} class to look for the property\n     * @param name {String} name of the property\n     * @return {Class | null} The class which includes the property\n     */\n    getByProperty(clazz, name) {\n      while (clazz) {\n        if (clazz.$$properties && clazz.$$properties[name]) {\n          return clazz;\n        }\n\n        clazz = clazz.superclass;\n      }\n\n      return null;\n    },\n\n    /**\n     * Whether a class has the given property\n     *\n     * @signature function(clazz, name)\n     * @param clazz {Class} class to check\n     * @param name {String} name of the property to check for\n     * @return {Boolean} whether the class includes the given property.\n     */\n    hasProperty: qx.util.OOUtil.hasProperty,\n\n    /**\n     * Returns the event type of the given event. Returns null if\n     * the event does not exist.\n     *\n     * @signature function(clazz, name)\n     * @param clazz {Class} class to check\n     * @param name {String} name of the event\n     * @return {String|null} Event type of the given event.\n     */\n    getEventType: qx.util.OOUtil.getEventType,\n\n    /**\n     * Whether a class supports the given event type\n     *\n     * @signature function(clazz, name)\n     * @param clazz {Class} class to check\n     * @param name {String} name of the event to check for\n     * @return {Boolean} whether the class supports the given event.\n     */\n    supportsEvent: qx.util.OOUtil.supportsEvent,\n\n    /**\n     * Whether a class directly includes a mixin.\n     *\n     * @param clazz {Class} class to check\n     * @param mixin {Mixin} the mixin to check for\n     * @return {Boolean} whether the class includes the mixin directly.\n     */\n    hasOwnMixin(clazz, mixin) {\n      return clazz.$$includes && clazz.$$includes.indexOf(mixin) !== -1;\n    },\n\n    /**\n     * Returns the class or one of its superclasses which contains the\n     * declaration for the given mixin. Returns null if the mixin is not\n     * specified anywhere.\n     *\n     * @param clazz {Class} class to look for the mixin\n     * @param mixin {Mixin} mixin to look for\n     * @return {Class | null} The class which directly includes the given mixin\n     */\n    getByMixin(clazz, mixin) {\n      var list, i, l;\n\n      while (clazz) {\n        if (clazz.$$includes) {\n          list = clazz.$$flatIncludes;\n\n          for (i = 0, l = list.length; i < l; i++) {\n            if (list[i] === mixin) {\n              return clazz;\n            }\n          }\n        }\n\n        clazz = clazz.superclass;\n      }\n\n      return null;\n    },\n\n    /**\n     * Returns a list of all mixins available in a given class.\n     *\n     * @signature function(clazz)\n     * @param clazz {Class} class which should be inspected\n     * @return {Mixin[]} array of mixins this class uses\n     */\n    getMixins: qx.util.OOUtil.getMixins,\n\n    /**\n     * Whether a given class or any of its superclasses includes a given mixin.\n     *\n     * @param clazz {Class} class to check\n     * @param mixin {Mixin} the mixin to check for\n     * @return {Boolean} whether the class includes the mixin.\n     */\n    hasMixin(clazz, mixin) {\n      return !!this.getByMixin(clazz, mixin);\n    },\n\n    /**\n     * Whether a given class directly includes an interface.\n     *\n     * This function will only return \"true\" if the interface was defined\n     * in the class declaration ({@link qx.Class#define}) using the \"implement\"\n     * key.\n     *\n     * @param clazz {Class} class or instance to check\n     * @param iface {Interface} the interface to check for\n     * @return {Boolean} whether the class includes the mixin directly.\n     */\n    hasOwnInterface(clazz, iface) {\n      return clazz.$$implements && clazz.$$implements.indexOf(iface) !== -1;\n    },\n\n    /**\n     * Returns the class or one of its super classes which contains the\n     * declaration of the given interface. Returns null if the interface is not\n     * specified anywhere.\n     *\n     * @signature function(clazz, iface)\n     * @param clazz {Class} class to look for the interface\n     * @param iface {Interface} interface to look for\n     * @return {Class | null} the class which directly implements the given interface\n     */\n    getByInterface: qx.util.OOUtil.getByInterface,\n\n    /**\n     * Returns a list of all interfaces a given class has to implement.\n     *\n     * @param clazz {Class} class which should be inspected\n     * @return {Interface[]} array of interfaces this class implements\n     */\n    getInterfaces(clazz) {\n      var list = [];\n\n      while (clazz) {\n        if (clazz.$$implements) {\n          list.push.apply(list, clazz.$$flatImplements);\n        }\n\n        clazz = clazz.superclass;\n      }\n\n      return list;\n    },\n\n    /**\n     * Whether a given class or any of its super classes includes a given interface.\n     *\n     * This function will return \"true\" if the interface was defined\n     * in the class declaration ({@link qx.Class#define}) of the class\n     * or any of its super classes using the \"implement\"\n     * key.\n     *\n     * @signature function(clazz, iface)\n     * @param clazz {Class} class to check\n     * @param iface {Interface} the interface to check for\n     * @return {Boolean} whether the class includes the interface.\n     */\n    hasInterface: qx.util.OOUtil.hasInterface,\n\n    /**\n     * Whether a given class complies to an interface.\n     *\n     * Checks whether all methods defined in the interface are\n     * implemented. The class does not need to implement\n     * the interface explicitly in the <code>extend</code> key.\n     *\n     * @param obj {Object} class to check\n     * @param iface {Interface} the interface to check for\n     * @return {Boolean} whether the class conforms to the interface.\n     */\n    implementsInterface(obj, iface) {\n      var clazz = obj.constructor;\n\n      if (this.hasInterface(clazz, iface)) {\n        return true;\n      }\n\n      if (qx.Interface.objectImplements(obj, iface)) {\n        return true;\n      }\n\n      if (qx.Interface.classImplements(clazz, iface)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Helper method to handle singletons\n     *\n     * @internal\n     * @return {Object} The singleton instance\n     */\n    getInstance() {\n      if (this.$$instance === null) {\n        throw new Error(\n          \"Singleton instance of \" +\n            this +\n            \" is requested, but not ready yet. This is most likely due to a recursive call in the constructor path.\"\n        );\n      }\n\n      if (!this.$$instance) {\n        this.$$allowconstruct = true;\n        this.$$instance = null; // null means \"object is being created\"; needed for another call of getInstance() during instantiation\n        this.$$instance = new this();\n        delete this.$$allowconstruct;\n      }\n\n      return this.$$instance;\n    },\n\n    /**\n     * Retreive all subclasses of a given class\n     *\n     * @param clazz {Class} the class which should be inspected\n     *\n     * @return {Object} class name hash holding the references to the subclasses or null if the class does not exist.\n     */\n    getSubclasses(clazz) {\n      if (!clazz) {\n        return null;\n      }\n\n      var subclasses = {};\n      var registry = qx.Class.$$registry;\n\n      for (var name in registry) {\n        if (registry[name].superclass && registry[name].superclass == clazz) {\n          subclasses[name] = registry[name];\n        }\n      }\n\n      return subclasses;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       PRIVATE/INTERNAL BASICS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * This method will be attached to all classes to return\n     * a nice identifier for them.\n     *\n     * @internal\n     * @return {String} The class identifier\n     */\n    genericToString() {\n      return \"[Class \" + this.classname + \"]\";\n    },\n\n    /** Stores all defined classes */\n    $$registry: qx.Bootstrap.$$registry,\n\n    /** @type {Map} allowed keys in non-static class definition */\n    __allowedKeys: qx.core.Environment.select(\"qx.debug\", {\n      true: {\n        \"@\": \"object\",\n        \"@construct\": \"object\",\n        \"@destruct\": \"object\",\n        type: \"string\", // String\n        extend: \"function\", // Function\n        implement: \"object\", // Interface[]\n        include: \"object\", // Mixin[]\n        construct: \"function\", // Function\n        statics: \"object\", // Map\n        properties: \"object\", // Map\n        members: \"object\", // Map\n        environment: \"object\", // Map\n        events: \"object\", // Map\n        defer: \"function\", // Function\n        destruct: \"function\" // Function\n      },\n\n      default: null\n    }),\n\n    /** @type {Map} allowed keys in static class definition */\n    __staticAllowedKeys: qx.core.Environment.select(\"qx.debug\", {\n      true: {\n        \"@\": \"object\",\n        type: \"string\", // String\n        statics: \"object\", // Map\n        environment: \"object\", // Map\n        defer: \"function\" // Function\n      },\n\n      default: null\n    }),\n\n    /**\n     * Validates an incoming configuration and checks for proper keys and values\n     *\n     * @signature function(name, config)\n     * @param name {String} The name of the class\n     * @param config {Map} Configuration map\n     */\n    __validateConfig: qx.core.Environment.select(\"qx.debug\", {\n      true(name, config) {\n        // Validate type\n        if (\n          config.type &&\n          !(\n            config.type === \"static\" ||\n            config.type === \"abstract\" ||\n            config.type === \"singleton\"\n          )\n        ) {\n          throw new Error(\n            'Invalid type \"' +\n              config.type +\n              '\" definition for class \"' +\n              name +\n              '\"!'\n          );\n        }\n\n        // Validate non-static class on the \"extend\" key\n        if (config.type && config.type !== \"static\" && !config.extend) {\n          throw new Error(\n            'Invalid config in class \"' +\n              name +\n              '\"! Every non-static class has to extend at least the \"qx.core.Object\" class.'\n          );\n        }\n\n        // Validate keys\n        var allowed =\n          config.type === \"static\"\n            ? this.__staticAllowedKeys\n            : this.__allowedKeys;\n        for (var key in config) {\n          if (!allowed[key]) {\n            throw new Error(\n              'The configuration key \"' +\n                key +\n                '\" in class \"' +\n                name +\n                '\" is not allowed!'\n            );\n          }\n\n          if (config[key] == null) {\n            throw new Error(\n              'Invalid key \"' +\n                key +\n                '\" in class \"' +\n                name +\n                '\"! The value is undefined/null!'\n            );\n          }\n\n          if (typeof config[key] !== allowed[key]) {\n            throw new Error(\n              'Invalid type of key \"' +\n                key +\n                '\" in class \"' +\n                name +\n                '\"! The type of the key must be \"' +\n                allowed[key] +\n                '\"!'\n            );\n          }\n        }\n\n        // Validate maps\n        var maps = [\n          \"statics\",\n          \"properties\",\n          \"members\",\n          \"environment\",\n          \"settings\",\n          \"variants\",\n          \"events\"\n        ];\n\n        for (var i = 0, l = maps.length; i < l; i++) {\n          var key = maps[i];\n\n          if (\n            config[key] !== undefined &&\n            (config[key].$$hash !== undefined ||\n              !qx.Bootstrap.isObject(config[key]))\n          ) {\n            throw new Error(\n              'Invalid key \"' +\n                key +\n                '\" in class \"' +\n                name +\n                '\"! The value needs to be a map!'\n            );\n          }\n        }\n\n        // Validate include definition\n        if (config.include) {\n          if (qx.Bootstrap.getClass(config.include) === \"Array\") {\n            for (var i = 0, a = config.include, l = a.length; i < l; i++) {\n              if (a[i] == null || a[i].$$type !== \"Mixin\") {\n                throw new Error(\n                  'The include definition in class \"' +\n                    name +\n                    '\" contains an invalid mixin at position ' +\n                    i +\n                    \": \" +\n                    a[i]\n                );\n              }\n            }\n          } else {\n            throw new Error(\n              'Invalid include definition in class \"' +\n                name +\n                '\"! Only mixins and arrays of mixins are allowed!'\n            );\n          }\n        }\n\n        // Validate implement definition\n        if (config.implement) {\n          if (qx.Bootstrap.getClass(config.implement) === \"Array\") {\n            for (var i = 0, a = config.implement, l = a.length; i < l; i++) {\n              if (a[i] == null || a[i].$$type !== \"Interface\") {\n                throw new Error(\n                  'The implement definition in class \"' +\n                    name +\n                    '\" contains an invalid interface at position ' +\n                    i +\n                    \": \" +\n                    a[i]\n                );\n              }\n            }\n          } else {\n            throw new Error(\n              'Invalid implement definition in class \"' +\n                name +\n                '\"! Only interfaces and arrays of interfaces are allowed!'\n            );\n          }\n        }\n\n        // Check mixin compatibility\n        if (config.include) {\n          try {\n            qx.Mixin.checkCompatibility(config.include);\n          } catch (ex) {\n            throw new Error(\n              'Error in include definition of class \"' +\n                name +\n                '\"! ' +\n                ex.message\n            );\n          }\n        }\n\n        // Validate environment\n        if (config.environment) {\n          for (var key in config.environment) {\n            if (\n              key.substr(0, key.indexOf(\".\")) !=\n              name.substr(0, name.indexOf(\".\"))\n            ) {\n              throw new Error(\n                'Forbidden environment setting \"' +\n                  key +\n                  '\" found in \"' +\n                  name +\n                  '\". It is forbidden to define a ' +\n                  \"environment setting for an external namespace!\"\n              );\n            }\n          }\n        }\n\n        // Validate settings\n        if (config.settings) {\n          for (var key in config.settings) {\n            if (\n              key.substr(0, key.indexOf(\".\")) !=\n              name.substr(0, name.indexOf(\".\"))\n            ) {\n              throw new Error(\n                'Forbidden setting \"' +\n                  key +\n                  '\" found in \"' +\n                  name +\n                  '\". It is forbidden to define a default setting for an external namespace!'\n              );\n            }\n          }\n        }\n\n        // Validate variants\n        if (config.variants) {\n          for (var key in config.variants) {\n            if (\n              key.substr(0, key.indexOf(\".\")) !=\n              name.substr(0, name.indexOf(\".\"))\n            ) {\n              throw new Error(\n                'Forbidden variant \"' +\n                  key +\n                  '\" found in \"' +\n                  name +\n                  '\". It is forbidden to define a variant for an external namespace!'\n              );\n            }\n          }\n        }\n      },\n\n      default(name, config) {}\n    }),\n\n    /**\n     * Validates the interfaces required by abstract base classes\n     *\n     * @signature function(clazz)\n     * @param clazz {Class} The configured class.\n     */\n    __validateAbstractInterfaces: qx.core.Environment.select(\"qx.debug\", {\n      true(clazz) {\n        var superclass = clazz.superclass;\n        while (superclass) {\n          if (superclass.$$classtype !== \"abstract\") {\n            break;\n          }\n\n          var interfaces = superclass.$$implements;\n          if (interfaces) {\n            for (var i = 0; i < interfaces.length; i++) {\n              qx.Interface.assert(clazz, interfaces[i], true);\n            }\n          }\n          superclass = superclass.superclass;\n        }\n      },\n\n      default(clazz) {}\n    }),\n\n    /**\n     * Attaches an annotation to a class\n     *\n     * @param clazz {Map} Static methods or fields\n     * @param group {String} Group name\n     * @param key {String} Name of the annotated item\n     * @param anno {Object} Annotation object\n     */\n    __attachAnno(clazz, group, key, anno) {\n      if (anno !== undefined) {\n        if (clazz.$$annotations === undefined) {\n          clazz.$$annotations = {};\n          clazz.$$annotations[group] = {};\n        } else if (clazz.$$annotations[group] === undefined) {\n          clazz.$$annotations[group] = {};\n        }\n\n        if (!qx.lang.Type.isArray(anno)) {\n          anno = [anno];\n        }\n\n        if (key) {\n          clazz.$$annotations[group][key] = anno;\n        } else {\n          clazz.$$annotations[group] = anno;\n        }\n      }\n    },\n\n    /**\n     * Creates a class by type. Supports modern inheritance etc.\n     *\n     * @param name {String} Full name of the class\n     * @param type {String} type of the class, i.e. \"static\", \"abstract\" or \"singleton\"\n     * @param extend {Class} Superclass to inherit from\n     * @param statics {Map} Static methods or fields\n     * @param construct {Function} Constructor of the class\n     * @param destruct {Function} Destructor of the class\n     * @param mixins {Mixin[]} array of mixins of the class\n     * @return {Class} The generated class\n     */\n    __createClass(name, type, extend, statics, construct, destruct, mixins) {\n      var isStrictMode = function () {\n        return typeof this == \"undefined\";\n      };\n\n      var clazz;\n\n      if (!extend && qx.core.Environment.get(\"qx.aspects\") == false) {\n        // Create empty/non-empty class\n        clazz = statics || {};\n        qx.Bootstrap.setDisplayNames(clazz, name);\n      } else {\n        clazz = {};\n\n        if (extend) {\n          // Create default constructor\n          if (!construct) {\n            construct = this.__createDefaultConstructor();\n          }\n\n          clazz = this.__wrapConstructor(construct, name, type);\n\n          // Add singleton getInstance()\n          if (type === \"singleton\") {\n            clazz.getInstance = this.getInstance;\n          }\n\n          qx.Bootstrap.setDisplayName(construct, name, \"constructor\");\n        }\n\n        // Copy statics\n        if (statics) {\n          qx.Bootstrap.setDisplayNames(statics, name);\n\n          var key;\n\n          for (var i = 0, a = Object.keys(statics), l = a.length; i < l; i++) {\n            key = a[i];\n            var staticValue = statics[key];\n\n            if (qx.core.Environment.get(\"qx.debug\")) {\n              if (key.charAt(0) === \"@\") {\n                if (statics[key.substring(1)] === undefined) {\n                  throw new Error(\n                    'Annonation for static \"' +\n                      key.substring(1) +\n                      '\" of Class \"' +\n                      clazz.classname +\n                      '\" does not exist!'\n                  );\n                }\n                if (key.charAt(1) === \"_\" && key.charAt(2) === \"_\") {\n                  throw new Error(\n                    'Cannot annotate private static \"' +\n                      key.substring(1) +\n                      '\" of Class \"' +\n                      clazz.classname\n                  );\n                }\n              }\n            }\n            if (key.charAt(0) === \"@\") {\n              continue;\n            }\n\n            if (qx.core.Environment.get(\"qx.aspects\")) {\n              if (staticValue instanceof Function) {\n                staticValue = qx.core.Aspect.wrap(\n                  name + \".\" + key,\n                  staticValue,\n                  \"static\"\n                );\n              }\n\n              clazz[key] = staticValue;\n            } else {\n              clazz[key] = staticValue;\n            }\n\n            // Attach annotations\n            this.__attachAnno(clazz, \"statics\", key, statics[\"@\" + key]);\n          }\n        }\n      }\n\n      // Create namespace\n      var basename = name ? qx.Bootstrap.createNamespace(name, clazz) : \"\";\n\n      // Store names in constructor/object\n      clazz.classname = name;\n      if (!isStrictMode()) {\n        try {\n          clazz.name = name;\n        } catch (ex) {\n          // Nothing\n        }\n      }\n      clazz.basename = basename;\n\n      // Store type info\n      clazz.$$type = \"Class\";\n      if (type) {\n        clazz.$$classtype = type;\n      }\n\n      // Attach toString\n      if (!clazz.hasOwnProperty(\"toString\")) {\n        clazz.toString = this.genericToString;\n      }\n\n      if (extend) {\n        qx.Bootstrap.extendClass(clazz, construct, extend, name, basename);\n\n        // Store destruct onto class\n        if (destruct) {\n          if (qx.core.Environment.get(\"qx.aspects\")) {\n            destruct = qx.core.Aspect.wrap(name, destruct, \"destructor\");\n          }\n\n          clazz.$$destructor = destruct;\n          qx.Bootstrap.setDisplayName(destruct, name, \"destruct\");\n        }\n      }\n\n      // Store class reference in global class registry\n      this.$$registry[name] = clazz;\n\n      // Return final class object\n      return clazz;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       PRIVATE ADD HELPERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Attach events to the class\n     *\n     * @param clazz {Class} class to add the events to\n     * @param events {Map} map of event names the class fires.\n     * @param patch {Boolean ? false} Enable redefinition of event type?\n     */\n    __addEvents(clazz, events, patch) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (\n          typeof events !== \"object\" ||\n          qx.Bootstrap.getClass(events) === \"Array\"\n        ) {\n          throw new Error(\n            clazz.classname + \": the events must be defined as map!\"\n          );\n        }\n\n        for (var key in events) {\n          if (typeof events[key] !== \"string\") {\n            throw new Error(\n              clazz.classname +\n                \"/\" +\n                key +\n                \": the event value needs to be a string with the class name of the event object which will be fired.\"\n            );\n          }\n        }\n\n        // Compare old and new event type/value if patching is disabled\n        if (clazz.$$events && patch !== true) {\n          for (var key in events) {\n            if (\n              clazz.$$events[key] !== undefined &&\n              clazz.$$events[key] !== events[key]\n            ) {\n              throw new Error(\n                clazz.classname +\n                  \"/\" +\n                  key +\n                  \": the event value/type cannot be changed from \" +\n                  clazz.$$events[key] +\n                  \" to \" +\n                  events[key]\n              );\n            }\n          }\n        }\n      }\n\n      if (clazz.$$events) {\n        for (var key in events) {\n          clazz.$$events[key] = events[key];\n        }\n      } else {\n        clazz.$$events = events;\n      }\n    },\n\n    /**\n     * Attach properties to classes\n     *\n     * @param clazz {Class} class to add the properties to\n     * @param properties {Map} map of properties\n     * @param patch {Boolean ? false} Overwrite property with the limitations of a property\n               which means you are able to refine but not to replace (esp. for new properties)\n     */\n    __addProperties(clazz, properties, patch) {\n      // check for the property module\n      if (!qx.core.Environment.get(\"module.property\")) {\n        throw new Error(\"Property module disabled.\");\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (qx.Bootstrap.isQxCoreObject(properties)) {\n          throw new Error(\"Invalid 'properties' for \" + clazz.classname);\n        }\n      }\n\n      var config;\n\n      if (patch === undefined) {\n        patch = false;\n      }\n\n      var proto = clazz.prototype;\n\n      for (var name in properties) {\n        config = properties[name];\n\n        // Check incoming configuration\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.__validateProperty(clazz, name, config, patch);\n        }\n\n        // Store name into configuration\n        config.name = name;\n\n        // Add config to local registry\n        if (!config.refine) {\n          if (clazz.$$properties === undefined) {\n            clazz.$$properties = {};\n          }\n\n          clazz.$$properties[name] = config;\n        }\n\n        // Store init value to prototype. This makes it possible to\n        // overwrite this value in derived classes.\n        if (config.init !== undefined) {\n          clazz.prototype[\"$$init_\" + name] = config.init;\n        }\n\n        // register event name\n        if (config.event !== undefined) {\n          // break if no events layer loaded\n          if (!qx.core.Environment.get(\"module.events\")) {\n            throw new Error(\"Events module not enabled.\");\n          }\n          var event = {};\n          event[config.event] = \"qx.event.type.Data\";\n          if (config.async) {\n            event[config.event + \"Async\"] = \"qx.event.type.Data\";\n          }\n          this.__addEvents(clazz, event, patch);\n        }\n\n        // Remember inheritable properties\n        if (config.inheritable) {\n          this.__Property.$$inheritable[name] = true;\n          if (!proto.$$refreshInheritables) {\n            this.__Property.attachRefreshInheritables(clazz);\n          }\n        }\n\n        if (!config.refine) {\n          this.__Property.attachMethods(clazz, name, config);\n        }\n\n        // Add annotations\n        this.__attachAnno(clazz, \"properties\", name, config[\"@\"]);\n      }\n    },\n\n    /**\n     * Validates the given property\n     *\n     * @signature function(clazz, name, config, patch)\n     * @param clazz {Class} class to add property to\n     * @param name {String} name of the property\n     * @param config {Map} configuration map\n     * @param patch {Boolean ? false} enable refine/patch?\n     */\n    __validateProperty: qx.core.Environment.select(\"qx.debug\", {\n      true(clazz, name, config, patch) {\n        // check for properties\n        if (!qx.core.Environment.get(\"module.property\")) {\n          throw new Error(\"Property module disabled.\");\n        }\n\n        var has = this.hasProperty(clazz, name);\n\n        if (has) {\n          var existingProperty = this.getPropertyDefinition(clazz, name);\n\n          if (\n            config.refine &&\n            existingProperty.init === undefined &&\n            existingProperty[\"@\"] === undefined\n          ) {\n            this.warn(\n              \"Refine a property when there is previously no init or annotations defined. Property '\" +\n                name +\n                \"' of class '\" +\n                clazz.classname +\n                \"'.\"\n            );\n          }\n        }\n\n        if (!has && config.refine) {\n          throw new Error(\n            \"Could not refine non-existent property: '\" +\n              name +\n              \"' of class: '\" +\n              clazz.classname +\n              \"'!\"\n          );\n        }\n\n        if (has && !patch) {\n          throw new Error(\n            \"Class \" +\n              clazz.classname +\n              \" already has a property: \" +\n              name +\n              \"!\"\n          );\n        }\n\n        if (has && patch) {\n          if (!config.refine) {\n            throw new Error(\n              'Could not refine property \"' +\n                name +\n                '\" without a \"refine\" flag in the property definition! This class: ' +\n                clazz.classname +\n                \", original class: \" +\n                this.getByProperty(clazz, name).classname +\n                \".\"\n            );\n          }\n\n          for (var key in config) {\n            if (key !== \"init\" && key !== \"refine\" && key !== \"@\") {\n              throw new Error(\n                \"Class \" +\n                  clazz.classname +\n                  \" could not refine property: \" +\n                  name +\n                  \"! Key: \" +\n                  key +\n                  \" could not be refined!\"\n              );\n            }\n          }\n        }\n\n        // Check 0.7 keys\n        var allowed = config.group\n          ? this.__Property.$$allowedGroupKeys\n          : this.__Property.$$allowedKeys;\n        for (var key in config) {\n          if (allowed[key] === undefined) {\n            throw new Error(\n              'The configuration key \"' +\n                key +\n                '\" of property \"' +\n                name +\n                '\" in class \"' +\n                clazz.classname +\n                '\" is not allowed!'\n            );\n          }\n\n          if (config[key] === undefined) {\n            throw new Error(\n              'Invalid key \"' +\n                key +\n                '\" of property \"' +\n                name +\n                '\" in class \"' +\n                clazz.classname +\n                '\"! The value is undefined: ' +\n                config[key]\n            );\n          }\n\n          if (allowed[key] !== null && typeof config[key] !== allowed[key]) {\n            throw new Error(\n              'Invalid type of key \"' +\n                key +\n                '\" of property \"' +\n                name +\n                '\" in class \"' +\n                clazz.classname +\n                '\"! The type of the key must be \"' +\n                allowed[key] +\n                '\"!'\n            );\n          }\n        }\n\n        if (config.transform != null) {\n          if (!(typeof config.transform === \"string\")) {\n            throw new Error(\n              'Invalid transform definition of property \"' +\n                name +\n                '\" in class \"' +\n                clazz.classname +\n                '\"! Needs to be a String.'\n            );\n          }\n        }\n\n        if (config.check != null) {\n          if (\n            !qx.Bootstrap.isString(config.check) &&\n            !qx.Bootstrap.isArray(config.check) &&\n            !qx.Bootstrap.isFunction(config.check)\n          ) {\n            throw new Error(\n              'Invalid check definition of property \"' +\n                name +\n                '\" in class \"' +\n                clazz.classname +\n                '\"! Needs to be a String, Array or Function.'\n            );\n          }\n        }\n      },\n\n      default: null\n    }),\n\n    /**\n     * Attach members to a class\n     *\n     * @param clazz {Class} clazz to add members to\n     * @param members {Map} The map of members to attach\n     * @param patch {Boolean ? false} Enable patching of\n     * @param base {Boolean ? true} Attach base flag to mark function as members\n     *     of this class\n     * @param wrap {Boolean ? false} Whether the member method should be wrapped.\n     *     this is needed to allow base calls in patched mixin members.\n     */\n    __addMembers(clazz, members, patch, base, wrap) {\n      var proto = clazz.prototype;\n      var key, member;\n      qx.Bootstrap.setDisplayNames(members, clazz.classname + \".prototype\");\n\n      for (var i = 0, a = Object.keys(members), l = a.length; i < l; i++) {\n        key = a[i];\n        member = members[key];\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          if (key.charAt(0) === \"@\") {\n            var annoKey = key.substring(1);\n            if (\n              members[annoKey] === undefined &&\n              proto[annoKey] === undefined\n            ) {\n              throw new Error(\n                'Annonation for \"' +\n                  annoKey +\n                  '\" of Class \"' +\n                  clazz.classname +\n                  '\" does not exist!'\n              );\n            }\n            if (key.charAt(1) === \"_\" && key.charAt(2) === \"_\") {\n              throw new Error(\n                'Cannot annotate private member \"' +\n                  key.substring(1) +\n                  '\" of Class \"' +\n                  clazz.classname\n              );\n            }\n          } else {\n            if (\n              proto[key] !== undefined &&\n              key.charAt(0) === \"_\" &&\n              key.charAt(1) === \"_\"\n            ) {\n              throw new Error(\n                'Overwriting private member \"' +\n                  key +\n                  '\" of Class \"' +\n                  clazz.classname +\n                  '\" is not allowed!'\n              );\n            }\n\n            if (patch !== true && proto.hasOwnProperty(key)) {\n              throw new Error(\n                'Overwriting member \"' +\n                  key +\n                  '\" of Class \"' +\n                  clazz.classname +\n                  '\" is not allowed!'\n              );\n            }\n          }\n        }\n\n        // Annotations are not members\n        if (key.charAt(0) === \"@\") {\n          var annoKey = key.substring(1);\n          if (members[annoKey] === undefined) {\n            this.__attachAnno(clazz, \"members\", annoKey, members[key]);\n          }\n          continue;\n        }\n\n        // If it's a property accessor, we need to install it now so that this.base can refer to it\n        if (proto[key] != undefined && proto[key].$$install) {\n          proto[key].$$install();\n        }\n\n        // Added helper stuff to functions\n        // Hint: Could not use typeof function because RegExp objects are functions, too\n        // Protect to apply base property and aspect support on special attributes e.g.\n        // classes which are function like as well.\n        if (\n          base !== false &&\n          member instanceof Function &&\n          member.$$type == null\n        ) {\n          // If the class has it's own implementation, we need to remember that method in the\n          //  mixed-in method's `.base`; wrap the method with a closure so that it can have a\n          //  `.base` set, if we were to set `member.base` it would mean that the mixin can\n          //  only be added into one class\n          if (wrap) {\n            if (proto[key]) {\n              member = qx.lang.Function.create(member, { always: true });\n            }\n            member.self = clazz;\n          }\n          member.base = proto[key];\n\n          if (qx.core.Environment.get(\"qx.aspects\")) {\n            member = qx.core.Aspect.wrap(\n              clazz.classname + \".\" + key,\n              member,\n              \"member\"\n            );\n          }\n        }\n\n        // Attach member\n        proto[key] = member;\n\n        // Attach annotations\n        this.__attachAnno(clazz, \"members\", key, members[\"@\" + key]);\n      }\n    },\n\n    /**\n     * Add a single interface to a class\n     *\n     * @param clazz {Class} class to add interface to\n     * @param iface {Interface} the Interface to add\n     */\n    __addInterface(clazz, iface) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (!clazz || !iface) {\n          throw new Error(\"Incomplete parameters!\");\n        }\n\n        // This differs from mixins, we only check if the interface is already\n        // directly used by this class. It is allowed however, to have an interface\n        // included multiple times by extends in the interfaces etc.\n        if (this.hasOwnInterface(clazz, iface)) {\n          throw new Error(\n            'Interface \"' +\n              iface.name +\n              '\" is already used by Class \"' +\n              clazz.classname +\n              \"!\"\n          );\n        }\n\n        // Check interface and wrap members\n        if (clazz.$$classtype !== \"abstract\") {\n          qx.Interface.assert(clazz, iface, true);\n        }\n      }\n\n      // Store interface reference\n      var list = qx.Interface.flatten([iface]);\n      if (clazz.$$implements) {\n        clazz.$$implements.push(iface);\n        clazz.$$flatImplements.push.apply(clazz.$$flatImplements, list);\n      } else {\n        clazz.$$implements = [iface];\n        clazz.$$flatImplements = list;\n      }\n    },\n\n    /**\n     * Include all features of the mixin into the given class, recursively.\n     *\n     * @param clazz {Class} The class onto which the mixin should be attached.\n     * @param mixin {Mixin} Include all features of this mixin\n     * @param patch {Boolean} Overwrite existing fields, functions and properties\n     */\n    __addMixin(clazz, mixin, patch) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (!clazz || !mixin) {\n          throw new Error(\"Incomplete parameters!\");\n        }\n      }\n\n      if (this.hasMixin(clazz, mixin)) {\n        return;\n      }\n\n      // Attach content\n      var list = qx.Mixin.flatten([mixin]);\n      var entry;\n\n      for (var i = 0, l = list.length; i < l; i++) {\n        entry = list[i];\n\n        // Attach events\n        if (entry.$$events) {\n          this.__addEvents(clazz, entry.$$events, patch);\n        }\n\n        // Attach properties (Properties are already readonly themselves, no patch handling needed)\n        if (entry.$$properties) {\n          this.__addProperties(clazz, entry.$$properties, patch);\n        }\n\n        // Attach members (Respect patch setting, but dont apply base variables)\n        if (entry.$$members) {\n          this.__addMembers(clazz, entry.$$members, patch, patch, patch);\n        }\n      }\n\n      // Store mixin reference\n      if (clazz.$$includes) {\n        clazz.$$includes.push(mixin);\n        clazz.$$flatIncludes.push.apply(clazz.$$flatIncludes, list);\n      } else {\n        clazz.$$includes = [mixin];\n        clazz.$$flatIncludes = list;\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       PRIVATE FUNCTION HELPERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the default constructor.\n     * This constructor just calls the constructor of the base class.\n     *\n     * @return {Function} The default constructor.\n     */\n    __createDefaultConstructor() {\n      function defaultConstructor() {\n        defaultConstructor.base.apply(this, arguments);\n      }\n\n      return defaultConstructor;\n    },\n\n    /**\n     * Generate a wrapper of the original class constructor in order to enable\n     * some of the advanced OO features (e.g. abstract class, singleton, mixins)\n     *\n     * @param construct {Function} the original constructor\n     * @param name {String} name of the class\n     * @param type {String} the user specified class type\n     * @return {Function} The wrapped constructor\n     */\n    __wrapConstructor(construct, name, type) {\n      var wrapper = function () {\n        var clazz = wrapper;\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          // new keyword check\n          if (!(this instanceof clazz)) {\n            throw new Error(\n              \"Please initialize '\" + name + \"' objects using the new keyword!\"\n            );\n          }\n\n          // add abstract and singleton checks\n          if (type === \"abstract\") {\n            if (this.classname === name) {\n              throw new Error(\n                \"The class ',\" +\n                  name +\n                  \"' is abstract! It is not possible to instantiate it.\"\n              );\n            }\n          } else if (type === \"singleton\") {\n            if (!clazz.$$allowconstruct) {\n              throw new Error(\n                \"The class '\" +\n                  name +\n                  \"' is a singleton! It is not possible to instantiate it directly. Use the static getInstance() method instead.\"\n              );\n            }\n          }\n        }\n\n        // Execute default constructor\n        var retval = clazz.$$original.apply(this, arguments);\n\n        // Initialize local mixins\n        if (clazz.$$includes) {\n          var mixins = clazz.$$flatIncludes;\n          for (var i = 0, l = mixins.length; i < l; i++) {\n            if (mixins[i].$$constructor) {\n              mixins[i].$$constructor.apply(this, arguments);\n            }\n          }\n        }\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          // Mark instance as initialized\n          if (this.classname === name) {\n            this.$$initialized = true;\n          }\n        }\n\n        // Return optional return value\n        return retval;\n      };\n\n      if (qx.core.Environment.get(\"qx.aspects\")) {\n        var aspectWrapper = qx.core.Aspect.wrap(name, wrapper, \"constructor\");\n        wrapper.$$original = construct;\n        wrapper.constructor = aspectWrapper;\n        wrapper = aspectWrapper;\n      }\n\n      // Store original constructor\n      wrapper.$$original = construct;\n\n      // Store wrapper into constructor (needed for base calls etc.)\n      construct.wrapper = wrapper;\n\n      // Return generated wrapper\n      return wrapper;\n    }\n  },\n\n  defer() {\n    // Binding of already loaded bootstrap classes\n    if (qx.core.Environment.get(\"qx.aspects\")) {\n      for (var classname in qx.Bootstrap.$$registry) {\n        var statics = qx.Bootstrap.$$registry[classname];\n\n        for (var key in statics) {\n          // only functions, no regexps\n          if (statics[key] instanceof Function) {\n            statics[key] = qx.core.Aspect.wrap(\n              classname + \".\" + key,\n              statics[key],\n              \"static\"\n            );\n          }\n        }\n      }\n    }\n  }\n});\n"
  ]
}