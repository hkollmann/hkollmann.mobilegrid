{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/decoration/MDoubleBorder.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "include",
    "ui",
    "decoration",
    "MSingleBorder",
    "MBackgroundImage",
    "construct",
    "_getDefaultInsetsForBorder",
    "__getDefaultInsetsForDoubleBorder",
    "_styleBorder",
    "__styleDoubleBorder",
    "properties",
    "innerWidthTop",
    "check",
    "init",
    "apply",
    "innerWidthRight",
    "innerWidthBottom",
    "innerWidthLeft",
    "innerWidth",
    "group",
    "mode",
    "innerColorTop",
    "nullable",
    "innerColorRight",
    "innerColorBottom",
    "innerColorLeft",
    "innerColor",
    "innerOpacity",
    "members",
    "styles",
    "propName",
    "core",
    "Environment",
    "get",
    "color",
    "Color",
    "theme",
    "manager",
    "getInstance",
    "top",
    "resolve",
    "getColorTop",
    "right",
    "getColorRight",
    "bottom",
    "getColorBottom",
    "left",
    "getColorLeft",
    "getInnerColorTop",
    "getInnerColorRight",
    "getInnerColorBottom",
    "getInnerColorLeft",
    "getInnerWidthTop",
    "getInnerWidthRight",
    "getInnerWidthBottom",
    "getInnerWidthLeft",
    "width",
    "getWidthTop",
    "getStyleTop",
    "getWidthRight",
    "getStyleRight",
    "getWidthBottom",
    "getStyleBottom",
    "getWidthLeft",
    "getStyleLeft",
    "getInnerOpacity",
    "__processInnerOpacity",
    "borderTop",
    "borderRight",
    "borderBottom",
    "borderLeft",
    "height",
    "position",
    "content",
    "boxSizingKey",
    "bom",
    "Style",
    "getCssName",
    "borderRadiusKey",
    "shadowStyle",
    "push",
    "length",
    "join",
    "border",
    "edge",
    "rgb",
    "util",
    "ColorUtil",
    "stringToRgb",
    "rgbString",
    "rgbToRgbString",
    "_applyDoubleBorder",
    "MDoubleBorder"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n/**\n * Border implementation with two CSS borders. Both borders can be styled\n * independent of each other.\n * This mixin is usually used by {@link qx.ui.decoration.Decorator}.\n */\nqx.Mixin.define(\"qx.ui.decoration.MDoubleBorder\", {\n  include: [qx.ui.decoration.MSingleBorder, qx.ui.decoration.MBackgroundImage],\n\n  construct() {\n    // override the methods of single border and background image\n    this._getDefaultInsetsForBorder = this.__getDefaultInsetsForDoubleBorder;\n    this._styleBorder = this.__styleDoubleBorder;\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY: INNER WIDTH\n    ---------------------------------------------------------------------------\n    */\n\n    /** top width of border */\n    innerWidthTop: {\n      check: \"Number\",\n      init: 0,\n      apply: \"_applyDoubleBorder\"\n    },\n\n    /** right width of border */\n    innerWidthRight: {\n      check: \"Number\",\n      init: 0,\n      apply: \"_applyDoubleBorder\"\n    },\n\n    /** bottom width of border */\n    innerWidthBottom: {\n      check: \"Number\",\n      init: 0,\n      apply: \"_applyDoubleBorder\"\n    },\n\n    /** left width of border */\n    innerWidthLeft: {\n      check: \"Number\",\n      init: 0,\n      apply: \"_applyDoubleBorder\"\n    },\n\n    /** Property group to set the inner border width of all sides */\n    innerWidth: {\n      group: [\n        \"innerWidthTop\",\n        \"innerWidthRight\",\n        \"innerWidthBottom\",\n        \"innerWidthLeft\"\n      ],\n\n      mode: \"shorthand\"\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY: INNER COLOR\n    ---------------------------------------------------------------------------\n    */\n\n    /** top inner color of border */\n    innerColorTop: {\n      nullable: true,\n      check: \"Color\",\n      apply: \"_applyDoubleBorder\"\n    },\n\n    /** right inner color of border */\n    innerColorRight: {\n      nullable: true,\n      check: \"Color\",\n      apply: \"_applyDoubleBorder\"\n    },\n\n    /** bottom inner color of border */\n    innerColorBottom: {\n      nullable: true,\n      check: \"Color\",\n      apply: \"_applyDoubleBorder\"\n    },\n\n    /** left inner color of border */\n    innerColorLeft: {\n      nullable: true,\n      check: \"Color\",\n      apply: \"_applyDoubleBorder\"\n    },\n\n    /**\n     * Property group for the inner color properties.\n     */\n    innerColor: {\n      group: [\n        \"innerColorTop\",\n        \"innerColorRight\",\n        \"innerColorBottom\",\n        \"innerColorLeft\"\n      ],\n\n      mode: \"shorthand\"\n    },\n\n    /**\n     * The opacity of the inner border.\n     */\n    innerOpacity: {\n      check: \"Number\",\n      init: 1,\n      apply: \"_applyDoubleBorder\"\n    }\n  },\n\n  members: {\n    /**\n     * Takes a styles map and adds the outer border styles in place\n     * to the given map. This is the needed behavior for\n     * {@link qx.ui.decoration.Decorator}.\n     *\n     * @param styles {Map} A map to add the styles.\n     */\n    __styleDoubleBorder(styles) {\n      var propName = qx.core.Environment.get(\"css.boxshadow\");\n\n      var color, innerColor, innerWidth;\n      if (qx.core.Environment.get(\"qx.theme\")) {\n        var Color = qx.theme.manager.Color.getInstance();\n\n        color = {\n          top: Color.resolve(this.getColorTop()),\n          right: Color.resolve(this.getColorRight()),\n          bottom: Color.resolve(this.getColorBottom()),\n          left: Color.resolve(this.getColorLeft())\n        };\n\n        innerColor = {\n          top: Color.resolve(this.getInnerColorTop()),\n          right: Color.resolve(this.getInnerColorRight()),\n          bottom: Color.resolve(this.getInnerColorBottom()),\n          left: Color.resolve(this.getInnerColorLeft())\n        };\n      } else {\n        color = {\n          top: this.getColorTop(),\n          right: this.getColorRight(),\n          bottom: this.getColorBottom(),\n          left: this.getColorLeft()\n        };\n\n        innerColor = {\n          top: this.getInnerColorTop(),\n          right: this.getInnerColorRight(),\n          bottom: this.getInnerColorBottom(),\n          left: this.getInnerColorLeft()\n        };\n      }\n\n      innerWidth = {\n        top: this.getInnerWidthTop(),\n        right: this.getInnerWidthRight(),\n        bottom: this.getInnerWidthBottom(),\n        left: this.getInnerWidthLeft()\n      };\n\n      // Add outer borders\n      var width = this.getWidthTop();\n      if (width > 0) {\n        styles[\"border-top\"] =\n          width + \"px \" + this.getStyleTop() + \" \" + color.top;\n      }\n\n      width = this.getWidthRight();\n      if (width > 0) {\n        styles[\"border-right\"] =\n          width + \"px \" + this.getStyleRight() + \" \" + color.right;\n      }\n\n      width = this.getWidthBottom();\n      if (width > 0) {\n        styles[\"border-bottom\"] =\n          width + \"px \" + this.getStyleBottom() + \" \" + color.bottom;\n      }\n\n      width = this.getWidthLeft();\n      if (width > 0) {\n        styles[\"border-left\"] =\n          width + \"px \" + this.getStyleLeft() + \" \" + color.left;\n      }\n\n      var innerOpacity = this.getInnerOpacity();\n\n      if (innerOpacity < 1) {\n        this.__processInnerOpacity(innerColor, innerOpacity);\n      }\n\n      // inner border\n      if (\n        innerWidth.top > 0 ||\n        innerWidth.right > 0 ||\n        innerWidth.bottom > 0 ||\n        innerWidth.left > 0\n      ) {\n        var borderTop = (innerWidth.top || 0) + \"px solid \" + innerColor.top;\n        var borderRight =\n          (innerWidth.right || 0) + \"px solid \" + innerColor.right;\n        var borderBottom =\n          (innerWidth.bottom || 0) + \"px solid \" + innerColor.bottom;\n        var borderLeft = (innerWidth.left || 0) + \"px solid \" + innerColor.left;\n\n        styles[\":before\"] = {\n          width: \"100%\",\n          height: \"100%\",\n          position: \"absolute\",\n          content: '\"\"',\n          \"border-top\": borderTop,\n          \"border-right\": borderRight,\n          \"border-bottom\": borderBottom,\n          \"border-left\": borderLeft,\n          left: 0,\n          top: 0\n        };\n\n        var boxSizingKey = qx.bom.Style.getCssName(\n          qx.core.Environment.get(\"css.boxsizing\")\n        );\n\n        styles[\":before\"][boxSizingKey] = \"border-box\";\n\n        // make sure to apply the border radius as well\n        var borderRadiusKey = qx.core.Environment.get(\"css.borderradius\");\n        if (borderRadiusKey) {\n          borderRadiusKey = qx.bom.Style.getCssName(borderRadiusKey);\n          styles[\":before\"][borderRadiusKey] = \"inherit\";\n        }\n\n        // Add inner borders as shadows\n        var shadowStyle = [];\n\n        if (\n          innerColor.top &&\n          innerWidth.top &&\n          innerColor.top == innerColor.bottom &&\n          innerColor.top == innerColor.right &&\n          innerColor.top == innerColor.left &&\n          innerWidth.top == innerWidth.bottom &&\n          innerWidth.top == innerWidth.right &&\n          innerWidth.top == innerWidth.left\n        ) {\n          shadowStyle.push(\n            \"inset 0 0 0 \" + innerWidth.top + \"px \" + innerColor.top\n          );\n        } else {\n          if (innerColor.top) {\n            shadowStyle.push(\n              \"inset 0 \" + (innerWidth.top || 0) + \"px \" + innerColor.top\n            );\n          }\n          if (innerColor.right) {\n            shadowStyle.push(\n              \"inset -\" + (innerWidth.right || 0) + \"px 0 \" + innerColor.right\n            );\n          }\n          if (innerColor.bottom) {\n            shadowStyle.push(\n              \"inset 0 -\" + (innerWidth.bottom || 0) + \"px \" + innerColor.bottom\n            );\n          }\n          if (innerColor.left) {\n            shadowStyle.push(\n              \"inset \" + (innerWidth.left || 0) + \"px 0 \" + innerColor.left\n            );\n          }\n        }\n\n        // apply or append the box shadow styles\n        if (shadowStyle.length > 0 && propName) {\n          propName = qx.bom.Style.getCssName(propName);\n          if (!styles[propName]) {\n            styles[propName] = shadowStyle.join(\",\");\n          } else {\n            styles[propName] += \",\" + shadowStyle.join(\",\");\n          }\n        }\n      } else {\n        styles[\":before\"] = {\n          border: 0\n        };\n      }\n    },\n\n    /**\n     * Converts the inner border's colors to rgba.\n     *\n     * @param innerColor {Map} map of top, right, bottom and left colors\n     * @param innerOpacity {Number} alpha value\n     */\n    __processInnerOpacity(innerColor, innerOpacity) {\n      if (!qx.core.Environment.get(\"css.rgba\")) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.log.Logger.warn(\n            \"innerOpacity is configured but the browser doesn't support RGBA colors.\"\n          );\n        }\n        return;\n      }\n\n      for (var edge in innerColor) {\n        var rgb = qx.util.ColorUtil.stringToRgb(innerColor[edge]);\n        rgb.push(innerOpacity);\n        var rgbString = qx.util.ColorUtil.rgbToRgbString(rgb);\n        innerColor[edge] = rgbString;\n      }\n    },\n\n    _applyDoubleBorder() {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (this._isInitialized()) {\n          throw new Error(\n            \"This decorator is already in-use. Modification is not possible anymore!\"\n          );\n        }\n      }\n    },\n\n    /**\n     * Implementation of the interface for the double border.\n     *\n     * @return {Map} A map containing the default insets.\n     *   (top, right, bottom, left)\n     */\n    __getDefaultInsetsForDoubleBorder() {\n      return {\n        top: this.getWidthTop() + this.getInnerWidthTop(),\n        right: this.getWidthRight() + this.getInnerWidthRight(),\n        bottom: this.getWidthBottom() + this.getInnerWidthBottom(),\n        left: this.getWidthLeft() + this.getInnerWidthLeft()\n      };\n    }\n  }\n});\n"
  ]
}