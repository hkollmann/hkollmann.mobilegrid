{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/decoration/Decorator.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "decoration",
    "Abstract",
    "implement",
    "IDecorator",
    "include",
    "MBackgroundColor",
    "MBorderRadius",
    "MBoxShadow",
    "MDoubleBorder",
    "MLinearBackgroundGradient",
    "MBorderImage",
    "MTransition",
    "members",
    "__initialized",
    "getPadding",
    "insets",
    "getInset",
    "slices",
    "_getDefaultInsetsForBorderImage",
    "borderTop",
    "top",
    "getWidthTop",
    "borderRight",
    "right",
    "getWidthRight",
    "borderBottom",
    "bottom",
    "getWidthBottom",
    "borderLeft",
    "left",
    "getWidthLeft",
    "getInnerWidthTop",
    "getInnerWidthRight",
    "getInnerWidthBottom",
    "getInnerWidthLeft",
    "getStyles",
    "css",
    "_getStyles",
    "jsStyles",
    "cssStyles",
    "property",
    "lang",
    "String",
    "camelCase",
    "styles",
    "name",
    "indexOf",
    "Function",
    "Type",
    "isArray",
    "join",
    "_getDefaultInsets",
    "directions",
    "defaultInsets",
    "currentInsets",
    "i",
    "length",
    "direction",
    "undefined",
    "_isInitialized",
    "_getExtendedPropertyValueArrays",
    "propertyNames",
    "propertyValues",
    "map",
    "propName",
    "value",
    "get",
    "items",
    "Math",
    "max",
    "apply",
    "prop",
    "__extendArray",
    "array",
    "to",
    "initial",
    "push",
    "Decorator"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * Decorator including all decoration possibilities from mixins:\n *\n * <ul>\n * <li>Background color</li>\n * <li>Background image</li>\n * <li>Background gradient</li>\n * <li>Single and double borders</li>\n * <li>Border radius</li>\n * <li>Box shadow</li>\n * </ul>\n */\nqx.Class.define(\"qx.ui.decoration.Decorator\", {\n  extend: qx.ui.decoration.Abstract,\n\n  implement: [qx.ui.decoration.IDecorator],\n\n  include: [\n    qx.ui.decoration.MBackgroundColor,\n    qx.ui.decoration.MBorderRadius,\n    qx.ui.decoration.MBoxShadow,\n    qx.ui.decoration.MDoubleBorder,\n    qx.ui.decoration.MLinearBackgroundGradient,\n    qx.ui.decoration.MBorderImage,\n    qx.ui.decoration.MTransition\n  ],\n\n  members: {\n    __initialized: false,\n\n    /**\n     * Returns the configured padding minus the border width.\n     * @return {Map} Map of top, right, bottom and left padding values\n     */\n    getPadding() {\n      var insets = this.getInset();\n      var slices = this._getDefaultInsetsForBorderImage();\n\n      var borderTop =\n        insets.top - (slices.top ? slices.top : this.getWidthTop());\n      var borderRight =\n        insets.right - (slices.right ? slices.right : this.getWidthRight());\n      var borderBottom =\n        insets.bottom - (slices.bottom ? slices.bottom : this.getWidthBottom());\n      var borderLeft =\n        insets.left - (slices.left ? slices.left : this.getWidthLeft());\n\n      return {\n        top: insets.top ? borderTop : this.getInnerWidthTop(),\n        right: insets.right ? borderRight : this.getInnerWidthRight(),\n        bottom: insets.bottom ? borderBottom : this.getInnerWidthBottom(),\n        left: insets.left ? borderLeft : this.getInnerWidthLeft()\n      };\n    },\n\n    /**\n     * Returns the styles of the decorator as a map with property names written\n     * in javascript style (e.g. <code>fontWeight</code> instead of <code>font-weight</code>).\n     *\n     * @param css {Boolean?} <code>true</code> if hyphenated CSS names should be returned.\n     * @return {Map} style information\n     */\n    getStyles(css) {\n      if (css) {\n        return this._getStyles();\n      }\n\n      var jsStyles = {};\n      var cssStyles = this._getStyles();\n\n      for (var property in cssStyles) {\n        jsStyles[qx.lang.String.camelCase(property)] = cssStyles[property];\n      }\n\n      return jsStyles;\n    },\n\n    /**\n     * Collects all the style information from the decorators.\n     *\n     * @return {Map} style information\n     */\n    _getStyles() {\n      var styles = {};\n\n      for (var name in this) {\n        if (name.indexOf(\"_style\") == 0 && this[name] instanceof Function) {\n          this[name](styles);\n        }\n      }\n      for (var name in styles) {\n        if (qx.lang.Type.isArray(styles[name])) {\n          styles[name] = styles[name].join(\", \");\n        }\n      }\n\n      this.__initialized = true;\n      return styles;\n    },\n\n    // overridden\n    _getDefaultInsets() {\n      var directions = [\"top\", \"right\", \"bottom\", \"left\"];\n      var defaultInsets = {};\n\n      for (var name in this) {\n        if (\n          name.indexOf(\"_getDefaultInsetsFor\") == 0 &&\n          this[name] instanceof Function\n        ) {\n          var currentInsets = this[name]();\n\n          for (var i = 0; i < directions.length; i++) {\n            var direction = directions[i];\n            // initialize with the first insets found\n            if (defaultInsets[direction] == undefined) {\n              defaultInsets[direction] = currentInsets[direction];\n            }\n            // take the largest inset\n            if (currentInsets[direction] > defaultInsets[direction]) {\n              defaultInsets[direction] = currentInsets[direction];\n            }\n          }\n        }\n      }\n\n      // check if the mixins have created a default insets\n      if (defaultInsets[\"top\"] != undefined) {\n        return defaultInsets;\n      }\n      // return a fallback which is 0 for all insets\n      return { top: 0, right: 0, bottom: 0, left: 0 };\n    },\n\n    // overridden\n    _isInitialized() {\n      return this.__initialized;\n    },\n\n    /**\n     * Ensures that every propertyValue specified in propertyNames is an array.\n     * The value arrays are extended and repeated to match in length.\n     * @param propertyNames {Array} Array containing the propertyNames.\n     * @return {Array} Array containing the extended value arrays.\n     */\n    _getExtendedPropertyValueArrays(propertyNames) {\n      // transform non-array values to an array containing that value\n      var propertyValues = propertyNames.map(function (propName) {\n        var value = this.get(propName);\n        if (!qx.lang.Type.isArray(value)) {\n          value = [value];\n        }\n        return value;\n      }, this);\n\n      // Because it's possible to set multiple values for a property there's\n      // a chance that not all properties have the same number of values set.\n      // Extend the value arrays by repeating existing values until all\n      // arrays match in length.\n      var items = Math.max.apply(\n        Math,\n        propertyValues.map(function (prop) {\n          return prop.length;\n        })\n      );\n\n      for (var i = 0; i < propertyValues.length; i++) {\n        this.__extendArray(propertyValues[i], items);\n      }\n\n      return propertyValues;\n    },\n\n    /**\n     * Extends an array up to the given length by repeating the elements already present.\n     * @param array {Array} Incoming array. Has to contain at least one element.\n     * @param to {Integer} Desired length. Must be greater than or equal to the the length of arr.\n     */\n    __extendArray(array, to) {\n      var initial = array.length;\n      while (array.length < to) {\n        array.push(array[array.length % initial]);\n      }\n    }\n  }\n});\n"
  ]
}