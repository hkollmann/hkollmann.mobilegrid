{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/layout/HBox.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "layout",
    "Abstract",
    "construct",
    "spacing",
    "alignX",
    "separator",
    "setSpacing",
    "setAlignX",
    "setSeparator",
    "properties",
    "check",
    "init",
    "apply",
    "alignY",
    "nullable",
    "reversed",
    "members",
    "__widths",
    "__flexs",
    "__enableFlex",
    "__children",
    "_applyReversed",
    "_invalidChildrenCache",
    "_applyLayoutChange",
    "__rebuildCache",
    "children",
    "_getLayoutChildren",
    "length",
    "enableFlex",
    "reuse",
    "props",
    "widths",
    "Array",
    "flexs",
    "getReversed",
    "concat",
    "reverse",
    "i",
    "getLayoutProperties",
    "width",
    "parseFloat",
    "flex",
    "verifyLayoutProperty",
    "core",
    "Environment",
    "select",
    "item",
    "name",
    "value",
    "assertMatch",
    "Util",
    "PERCENT_VALUE",
    "assertNumber",
    "assert",
    "assertBoolean",
    "renderLayout",
    "availWidth",
    "availHeight",
    "padding",
    "util",
    "getSpacing",
    "getSeparator",
    "gaps",
    "computeHorizontalSeparatorGaps",
    "computeHorizontalGaps",
    "child",
    "percent",
    "hint",
    "allocatedWidth",
    "getSizeHint",
    "Math",
    "floor",
    "minWidth",
    "maxWidth",
    "push",
    "flexibles",
    "offset",
    "notEnoughSpace",
    "min",
    "max",
    "flexShrink",
    "result",
    "computeFlexOffsets",
    "left",
    "getMarginLeft",
    "getAlignX",
    "round",
    "top",
    "height",
    "marginRight",
    "marginTop",
    "marginBottom",
    "_clearSeparators",
    "separatorInsets",
    "theme",
    "manager",
    "Decoration",
    "getInstance",
    "resolve",
    "getInsets",
    "separatorWidth",
    "right",
    "getMarginTop",
    "getMarginBottom",
    "minHeight",
    "maxHeight",
    "computeVerticalAlignOffset",
    "getAlignY",
    "_renderSeparator",
    "collapseMargins",
    "getMarginRight",
    "_computeSizeHint",
    "percentMinWidth",
    "margin",
    "l",
    "destruct",
    "HBox"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,mBAAhB,EAAqC;AACnCC,IAAAA,MAAM,EAAEN,EAAE,CAACO,EAAH,CAAMC,MAAN,CAAaC,QADc;;AAGnC;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACEC,IAAAA,SAfmC,qBAezBC,OAfyB,EAehBC,MAfgB,EAeRC,SAfQ,EAeG;AACpC;;AAEA,UAAIF,OAAJ,EAAa;AACX,aAAKG,UAAL,CAAgBH,OAAhB;AACD;;AAED,UAAIC,MAAJ,EAAY;AACV,aAAKG,SAAL,CAAeH,MAAf;AACD;;AAED,UAAIC,SAAJ,EAAe;AACb,aAAKG,YAAL,CAAkBH,SAAlB;AACD;AACF,KA7BkC;;AA+BnC;AACF;AACA;AACA;AACA;AAEEI,IAAAA,UAAU,EAAE;AACV;AACJ;AACA;AACA;AACA;AACIL,MAAAA,MAAM,EAAE;AACNM,QAAAA,KAAK,EAAE,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,CADD;AAENC,QAAAA,IAAI,EAAE,MAFA;AAGNC,QAAAA,KAAK,EAAE;AAHD,OANE;;AAYV;AACJ;AACA;AACA;AACIC,MA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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * A horizontal box layout.\n *\n * The horizontal box layout lays out widgets in a horizontal row, from left\n * to right.\n *\n * *Features*\n *\n * * Minimum and maximum dimensions\n * * Prioritized growing/shrinking (flex)\n * * Margins (with horizontal collapsing)\n * * Auto sizing (ignoring percent values)\n * * Percent widths (not relevant for size hint)\n * * Alignment (child property {@link qx.ui.core.LayoutItem#alignX} is ignored)\n * * Horizontal spacing (collapsed with margins)\n * * Reversed children layout (from last to first)\n * * Vertical children stretching (respecting size hints)\n *\n * *Item Properties*\n *\n * <ul>\n * <li><strong>flex</strong> <em>(Integer)</em>: The flexibility of a layout item determines how the container\n *   distributes remaining empty space among its children. If items are made\n *   flexible, they can grow or shrink accordingly. Their relative flex values\n *   determine how the items are being resized, i.e. the larger the flex ratio\n *   of two items, the larger the resizing of the first item compared to the\n *   second.\n *\n *   If there is only one flex item in a layout container, its actual flex\n *   value is not relevant. To disallow items to become flexible, set the\n *   flex value to zero.\n * </li>\n * <li><strong>flexShrink</strong> <em>(Boolean)</em>: Only valid if `flex` is\n *    set to a non-zero value, `flexShrink` tells the layout to force the child\n *    widget to shink if there is not enough space available for all of the children.\n *    This is used in scenarios such as when the child insists that it has a `minWidth`\n *    but there simply is not enough space to support that minimum width, so the\n *    overflow has to be cut off.  This setting allows the container to pick\n *    which children are able to have their `minWidth` sacrificed.  Without this\n *    setting, one oversized child can force later children out of view, regardless\n *    of `flex` settings\n * </li>\n * <li><strong>width</strong> <em>(String)</em>: Allows to define a percent\n *   width for the item. The width in percent, if specified, is used instead\n *   of the width defined by the size hint. The minimum and maximum width still\n *   takes care of the element's limits. It has no influence on the layout's\n *   size hint. Percent values are mostly useful for widgets which are sized by\n *   the outer hierarchy.\n * </li>\n * </ul>\n *\n * *Example*\n *\n * Here is a little example of how to use the HBox layout.\n *\n * <pre class=\"javascript\">\n * var layout = new qx.ui.layout.HBox();\n * layout.setSpacing(4); // apply spacing\n *\n * var container = new qx.ui.container.Composite(layout);\n *\n * container.add(new qx.ui.core.Widget());\n * container.add(new qx.ui.core.Widget());\n * container.add(new qx.ui.core.Widget());\n * </pre>\n *\n * *External Documentation*\n *\n * See <a href='https://qooxdoo.org/documentation/#/desktop/layout/box.md'>extended documentation</a>\n * and links to demos for this layout.\n *\n */\nqx.Class.define(\"qx.ui.layout.HBox\", {\n  extend: qx.ui.layout.Abstract,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param spacing {Integer?0} The spacing between child widgets {@link #spacing}.\n   * @param alignX {String?\"left\"} Horizontal alignment of the whole children\n   *     block {@link #alignX}.\n   * @param separator {String|qx.ui.decoration.IDecorator?} A separator to render between the items\n   */\n  construct(spacing, alignX, separator) {\n    super();\n\n    if (spacing) {\n      this.setSpacing(spacing);\n    }\n\n    if (alignX) {\n      this.setAlignX(alignX);\n    }\n\n    if (separator) {\n      this.setSeparator(separator);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * Horizontal alignment of the whole children block. The horizontal\n     * alignment of the child is completely ignored in HBoxes (\n     * {@link qx.ui.core.LayoutItem#alignX}).\n     */\n    alignX: {\n      check: [\"left\", \"center\", \"right\"],\n      init: \"left\",\n      apply: \"_applyLayoutChange\"\n    },\n\n    /**\n     * Vertical alignment of each child. Can be overridden through\n     * {@link qx.ui.core.LayoutItem#alignY}.\n     */\n    alignY: {\n      check: [\"top\", \"middle\", \"bottom\"],\n      init: \"top\",\n      apply: \"_applyLayoutChange\"\n    },\n\n    /** Horizontal spacing between two children */\n    spacing: {\n      check: \"Integer\",\n      init: 0,\n      apply: \"_applyLayoutChange\"\n    },\n\n    /** Separator lines to use between the objects */\n    separator: {\n      check: \"Decorator\",\n      nullable: true,\n      apply: \"_applyLayoutChange\"\n    },\n\n    /** Whether the actual children list should be laid out in reversed order. */\n    reversed: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyReversed\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __widths: null,\n    __flexs: null,\n    __enableFlex: null,\n    __children: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyReversed() {\n      // easiest way is to invalidate the cache\n      this._invalidChildrenCache = true;\n\n      // call normal layout change\n      this._applyLayoutChange();\n    },\n\n    /**\n     * Rebuilds caches for flex and percent layout properties\n     */\n    __rebuildCache() {\n      var children = this._getLayoutChildren();\n      var length = children.length;\n      var enableFlex = false;\n      var reuse =\n        this.__widths &&\n        this.__widths.length != length &&\n        this.__flexs &&\n        this.__widths;\n      var props;\n\n      // Sparse array (keep old one if lengths has not been modified)\n      var widths = reuse ? this.__widths : new Array(length);\n      var flexs = reuse ? this.__flexs : new Array(length);\n\n      // Reverse support\n      if (this.getReversed()) {\n        children = children.concat().reverse();\n      }\n\n      // Loop through children to preparse values\n      for (var i = 0; i < length; i++) {\n        props = children[i].getLayoutProperties();\n\n        if (props.width != null) {\n          widths[i] = parseFloat(props.width) / 100;\n        }\n\n        if (props.flex != null) {\n          flexs[i] = props.flex;\n          enableFlex = true;\n        } else {\n          // reset (in case the index of the children changed: BUG #3131)\n          flexs[i] = 0;\n        }\n      }\n\n      // Store data\n      if (!reuse) {\n        this.__widths = widths;\n        this.__flexs = flexs;\n      }\n\n      this.__enableFlex = enableFlex;\n      this.__children = children;\n\n      // Clear invalidation marker\n      delete this._invalidChildrenCache;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    verifyLayoutProperty: qx.core.Environment.select(\"qx.debug\", {\n      true(item, name, value) {\n        if (name === \"width\") {\n          this.assertMatch(value, qx.ui.layout.Util.PERCENT_VALUE);\n        } else if (name === \"flex\") {\n          this.assertNumber(value);\n          this.assert(value >= 0);\n        } else if (name === \"flexShrink\") {\n          this.assertBoolean(value);\n        } else {\n          this.assert(\n            false,\n            \"The property '\" + name + \"' is not supported by the HBox layout!\"\n          );\n        }\n      },\n\n      false: null\n    }),\n\n    // overridden\n    renderLayout(availWidth, availHeight, padding) {\n      // Rebuild flex/width caches\n      if (this._invalidChildrenCache) {\n        this.__rebuildCache();\n      }\n\n      // Cache children\n      var children = this.__children;\n      var length = children.length;\n      var util = qx.ui.layout.Util;\n\n      // Compute gaps\n      var spacing = this.getSpacing();\n      var separator = this.getSeparator();\n      var gaps;\n      if (separator) {\n        gaps = util.computeHorizontalSeparatorGaps(\n          children,\n          spacing,\n          separator\n        );\n      } else {\n        gaps = util.computeHorizontalGaps(children, spacing, true);\n      }\n\n      // First run to cache children data and compute allocated width\n      var i, child, width, percent;\n      var widths = [],\n        hint;\n      var allocatedWidth = gaps;\n\n      for (i = 0; i < length; i += 1) {\n        percent = this.__widths[i];\n        hint = children[i].getSizeHint();\n\n        width =\n          percent != null\n            ? Math.floor((availWidth - gaps) * percent)\n            : hint.width;\n\n        // Limit computed value\n        if (width < hint.minWidth) {\n          width = hint.minWidth;\n        } else if (width > hint.maxWidth) {\n          width = hint.maxWidth;\n        }\n\n        widths.push(width);\n        allocatedWidth += width;\n      }\n\n      // Flex support (growing/shrinking)\n      if (this.__enableFlex && allocatedWidth != availWidth) {\n        var flexibles = {};\n        var flex, offset;\n        var notEnoughSpace = allocatedWidth > availWidth;\n\n        for (i = 0; i < length; i += 1) {\n          flex = this.__flexs[i];\n\n          if (flex > 0) {\n            hint = children[i].getSizeHint();\n\n            flexibles[i] = {\n              min: hint.minWidth,\n              value: widths[i],\n              max: hint.maxWidth,\n              flex: flex\n            };\n\n            if (notEnoughSpace) {\n              var props = children[i].getLayoutProperties();\n              if (props && props.flexShrink) {\n                flexibles[i].min = 0;\n              }\n            }\n          }\n        }\n\n        var result = util.computeFlexOffsets(\n          flexibles,\n          availWidth,\n          allocatedWidth\n        );\n\n        for (i in result) {\n          offset = result[i].offset;\n\n          widths[i] += offset;\n          allocatedWidth += offset;\n        }\n      }\n\n      // Start with left coordinate\n      var left = children[0].getMarginLeft();\n\n      // Alignment support\n      if (allocatedWidth < availWidth && this.getAlignX() != \"left\") {\n        left = availWidth - allocatedWidth;\n\n        if (this.getAlignX() === \"center\") {\n          left = Math.round(left / 2);\n        }\n      }\n\n      // Layouting children\n      var hint, top, height, width, marginRight, marginTop, marginBottom;\n      var spacing = this.getSpacing();\n\n      // Pre configure separators\n      this._clearSeparators();\n\n      // Compute separator width\n      if (separator) {\n        var separatorInsets = qx.theme.manager.Decoration.getInstance()\n          .resolve(separator)\n          .getInsets();\n        var separatorWidth = separatorInsets.left + separatorInsets.right;\n      }\n\n      // Render children and separators\n      for (i = 0; i < length; i += 1) {\n        child = children[i];\n        width = widths[i];\n        hint = child.getSizeHint();\n\n        marginTop = child.getMarginTop();\n        marginBottom = child.getMarginBottom();\n\n        // Find usable height\n        height = Math.max(\n          hint.minHeight,\n          Math.min(availHeight - marginTop - marginBottom, hint.maxHeight)\n        );\n\n        // Respect vertical alignment\n        top = util.computeVerticalAlignOffset(\n          child.getAlignY() || this.getAlignY(),\n          height,\n          availHeight,\n          marginTop,\n          marginBottom\n        );\n\n        // Add collapsed margin\n        if (i > 0) {\n          // Whether a separator has been configured\n          if (separator) {\n            // add margin of last child and spacing\n            left += marginRight + spacing;\n\n            // then render the separator at this position\n            this._renderSeparator(separator, {\n              left: left + padding.left,\n              top: padding.top,\n              width: separatorWidth,\n              height: availHeight\n            });\n\n            // and finally add the size of the separator, the spacing (again) and the left margin\n            left += separatorWidth + spacing + child.getMarginLeft();\n          } else {\n            // Support margin collapsing when no separator is defined\n            left += util.collapseMargins(\n              spacing,\n              marginRight,\n              child.getMarginLeft()\n            );\n          }\n        }\n\n        // Layout child\n        child.renderLayout(\n          left + padding.left,\n          top + padding.top,\n          width,\n          height\n        );\n\n        // Add width\n        left += width;\n\n        // Remember right margin (for collapsing)\n        marginRight = child.getMarginRight();\n      }\n    },\n\n    // overridden\n    _computeSizeHint() {\n      // Rebuild flex/width caches\n      if (this._invalidChildrenCache) {\n        this.__rebuildCache();\n      }\n\n      var util = qx.ui.layout.Util;\n      var children = this.__children;\n\n      // Initialize\n      var minWidth = 0,\n        width = 0,\n        percentMinWidth = 0;\n      var minHeight = 0,\n        height = 0;\n      var child, hint, margin;\n\n      // Iterate over children\n      for (var i = 0, l = children.length; i < l; i += 1) {\n        child = children[i];\n        hint = child.getSizeHint();\n\n        // Sum up widths\n        width += hint.width;\n\n        // Detect if child is shrinkable or has percent width and update minWidth\n        var flex = this.__flexs[i];\n        var percent = this.__widths[i];\n        if (flex) {\n          minWidth += hint.minWidth;\n        } else if (percent) {\n          percentMinWidth = Math.max(\n            percentMinWidth,\n            Math.round(hint.minWidth / percent)\n          );\n        } else {\n          minWidth += hint.width;\n        }\n\n        // Build vertical margin sum\n        margin = child.getMarginTop() + child.getMarginBottom();\n\n        // Find biggest height\n        if (hint.height + margin > height) {\n          height = hint.height + margin;\n        }\n\n        // Find biggest minHeight\n        if (hint.minHeight + margin > minHeight) {\n          minHeight = hint.minHeight + margin;\n        }\n      }\n\n      minWidth += percentMinWidth;\n\n      // Respect gaps\n      var spacing = this.getSpacing();\n      var separator = this.getSeparator();\n      var gaps;\n      if (separator) {\n        gaps = util.computeHorizontalSeparatorGaps(\n          children,\n          spacing,\n          separator\n        );\n      } else {\n        gaps = util.computeHorizontalGaps(children, spacing, true);\n      }\n\n      // Return hint\n      return {\n        minWidth: minWidth + gaps,\n        width: width + gaps,\n        minHeight: minHeight,\n        height: height\n      };\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this.__widths = this.__flexs = this.__children = null;\n  }\n});\n"
  ]
}