{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/layout/Util.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "PERCENT_VALUE",
    "computeFlexOffsets",
    "flexibles",
    "avail",
    "used",
    "child",
    "key",
    "flexSum",
    "flexStep",
    "grow",
    "remaining",
    "Math",
    "abs",
    "roundingOffset",
    "currentOffset",
    "result",
    "potential",
    "max",
    "value",
    "min",
    "flex",
    "offset",
    "Infinity",
    "ceil",
    "computeHorizontalAlignOffset",
    "align",
    "width",
    "availWidth",
    "marginLeft",
    "marginRight",
    "round",
    "computeVerticalAlignOffset",
    "height",
    "availHeight",
    "marginTop",
    "marginBottom",
    "collapseMargins",
    "varargs",
    "i",
    "l",
    "arguments",
    "length",
    "computeHorizontalGaps",
    "children",
    "spacing",
    "collapse",
    "gaps",
    "getMarginLeft",
    "getMarginRight",
    "computeVerticalGaps",
    "getMarginTop",
    "getMarginBottom",
    "computeHorizontalSeparatorGaps",
    "separator",
    "instance",
    "theme",
    "manager",
    "Decoration",
    "getInstance",
    "resolve",
    "insets",
    "getInsets",
    "left",
    "right",
    "computeVerticalSeparatorGaps",
    "top",
    "bottom",
    "arrangeIdeals",
    "beginMin",
    "beginIdeal",
    "beginMax",
    "endMin",
    "endIdeal",
    "endMax",
    "begin",
    "end",
    "ui",
    "layout",
    "Util"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Common set of utility methods used by the standard qooxdoo layouts.\n *\n * @internal\n */\nqx.Class.define(\"qx.ui.layout.Util\", {\n  statics: {\n    /** @type {RegExp} Regular expression to match percent values */\n    PERCENT_VALUE: /[0-9]+(?:\\.[0-9]+)?%/,\n\n    /**\n     * Computes the flex offsets needed to reduce the space\n     * difference as much as possible by respecting the\n     * potential of the given elements (being in the range of\n     * their min/max values)\n     *\n     * @param flexibles {Map} Each entry must have these keys:\n     *   <code>id</code>, <code>potential</code> and <code>flex</code>.\n     *   The ID is used in the result map as the key for the user to work\n     *   with later (e.g. upgrade sizes etc. to respect the given offset)\n     *   The potential is an integer value which is the difference of the\n     *   currently interesting direction (e.g. shrinking=width-minWidth, growing=\n     *   maxWidth-width). The flex key holds the flex value of the item.\n     * @param avail {Integer} Full available space to allocate (ignoring used one)\n     * @param used {Integer} Size of already allocated space\n     * @return {Map} A map which contains the calculated offsets under the key\n     *   which is identical to the ID given in the incoming map.\n     */\n    computeFlexOffsets(flexibles, avail, used) {\n      var child, key, flexSum, flexStep;\n      var grow = avail > used;\n      var remaining = Math.abs(avail - used);\n      var roundingOffset, currentOffset;\n\n      // Preprocess data\n      var result = {};\n      for (key in flexibles) {\n        child = flexibles[key];\n        result[key] = {\n          potential: grow ? child.max - child.value : child.value - child.min,\n          flex: grow ? child.flex : 1 / child.flex,\n          offset: 0\n        };\n      }\n\n      // Continue as long as we need to do anything\n      while (remaining != 0) {\n        // Find minimum potential for next correction\n        flexStep = Infinity;\n        flexSum = 0;\n        for (key in result) {\n          child = result[key];\n\n          if (child.potential > 0) {\n            flexSum += child.flex;\n            flexStep = Math.min(flexStep, child.potential / child.flex);\n          }\n        }\n\n        // No potential found, quit here\n        if (flexSum == 0) {\n          break;\n        }\n\n        // Respect maximum potential given through remaining space\n        // The parent should always win in such conflicts.\n        flexStep = Math.min(remaining, flexStep * flexSum) / flexSum;\n\n        // Start with correction\n        roundingOffset = 0;\n        for (key in result) {\n          child = result[key];\n\n          if (child.potential > 0) {\n            // Compute offset for this step\n            currentOffset = Math.min(\n              remaining,\n              child.potential,\n              Math.ceil(flexStep * child.flex)\n            );\n\n            // Fix rounding issues\n            roundingOffset += currentOffset - flexStep * child.flex;\n            if (roundingOffset >= 1) {\n              roundingOffset -= 1;\n              currentOffset -= 1;\n            }\n\n            // Update child status\n            child.potential -= currentOffset;\n\n            if (grow) {\n              child.offset += currentOffset;\n            } else {\n              child.offset -= currentOffset;\n            }\n\n            // Update parent status\n            remaining -= currentOffset;\n          }\n        }\n      }\n\n      return result;\n    },\n\n    /**\n     * Computes the offset which needs to be added to the top position\n     * to result in the stated vertical alignment. Also respects\n     * existing margins (without collapsing).\n     *\n     * @param align {String} One of <code>top</code>, <code>center</code> or <code>bottom</code>.\n     * @param width {Integer} The visible width of the widget\n     * @param availWidth {Integer} The available inner width of the parent\n     * @param marginLeft {Integer?0} Optional left margin of the widget\n     * @param marginRight {Integer?0} Optional right margin of the widget\n     * @return {Integer} Computed top coordinate\n     */\n    computeHorizontalAlignOffset(\n      align,\n      width,\n      availWidth,\n      marginLeft,\n      marginRight\n    ) {\n      if (marginLeft == null) {\n        marginLeft = 0;\n      }\n\n      if (marginRight == null) {\n        marginRight = 0;\n      }\n\n      var value = 0;\n      switch (align) {\n        case \"left\":\n          value = marginLeft;\n          break;\n\n        case \"right\":\n          // Align right changes priority to right edge:\n          // To align to the right is more important here than to left.\n          value = availWidth - width - marginRight;\n          break;\n\n        case \"center\":\n          // Ideal center position\n          value = Math.round((availWidth - width) / 2);\n\n          // Try to make this possible (with left-right priority)\n          if (value < marginLeft) {\n            value = marginLeft;\n          } else if (value < marginRight) {\n            value = Math.max(marginLeft, availWidth - width - marginRight);\n          }\n\n          break;\n      }\n\n      return value;\n    },\n\n    /**\n     * Computes the offset which needs to be added to the top position\n     * to result in the stated vertical alignment. Also respects\n     * existing margins (without collapsing).\n     *\n     * @param align {String} One of <code>top</code>, <code>middle</code> or <code>bottom</code>.\n     * @param height {Integer} The visible height of the widget\n     * @param availHeight {Integer} The available inner height of the parent\n     * @param marginTop {Integer?0} Optional top margin of the widget\n     * @param marginBottom {Integer?0} Optional bottom margin of the widget\n     * @return {Integer} Computed top coordinate\n     */\n    computeVerticalAlignOffset(\n      align,\n      height,\n      availHeight,\n      marginTop,\n      marginBottom\n    ) {\n      if (marginTop == null) {\n        marginTop = 0;\n      }\n\n      if (marginBottom == null) {\n        marginBottom = 0;\n      }\n\n      var value = 0;\n      switch (align) {\n        case \"top\":\n          value = marginTop;\n          break;\n\n        case \"bottom\":\n          // Align bottom changes priority to bottom edge:\n          // To align to the bottom is more important here than to top.\n          value = availHeight - height - marginBottom;\n          break;\n\n        case \"middle\":\n          // Ideal middle position\n          value = Math.round((availHeight - height) / 2);\n\n          // Try to make this possible (with top-down priority)\n          if (value < marginTop) {\n            value = marginTop;\n          } else if (value < marginBottom) {\n            value = Math.max(marginTop, availHeight - height - marginBottom);\n          }\n\n          break;\n      }\n\n      return value;\n    },\n\n    /**\n     * Collapses two margins.\n     *\n     * Supports positive and negative margins.\n     * Collapsing find the largest positive and the largest\n     * negative value. Afterwards the result is computed through the\n     * subtraction of the negative from the positive value.\n     *\n     * @param varargs {arguments} Any number of configured margins\n     * @return {Integer} The collapsed margin\n     */\n    collapseMargins(varargs) {\n      var max = 0,\n        min = 0;\n      for (var i = 0, l = arguments.length; i < l; i++) {\n        var value = arguments[i];\n\n        if (value < 0) {\n          min = Math.min(min, value);\n        } else if (value > 0) {\n          max = Math.max(max, value);\n        }\n      }\n\n      return max + min;\n    },\n\n    /**\n     * Computes the sum of all horizontal gaps. Normally the\n     * result is used to compute the available width in a widget.\n     *\n     * The method optionally respects margin collapsing as well. In\n     * this mode the spacing is collapsed together with the margins.\n     *\n     * @param children {Array} List of children\n     * @param spacing {Integer?0} Spacing between every child\n     * @param collapse {Boolean?false} Optional margin collapsing mode\n     * @return {Integer} Sum of all gaps in the final layout.\n     */\n    computeHorizontalGaps(children, spacing, collapse) {\n      if (spacing == null) {\n        spacing = 0;\n      }\n\n      var gaps = 0;\n\n      if (collapse) {\n        // Add first child\n        gaps += children[0].getMarginLeft();\n\n        for (var i = 1, l = children.length; i < l; i += 1) {\n          gaps += this.collapseMargins(\n            spacing,\n            children[i - 1].getMarginRight(),\n            children[i].getMarginLeft()\n          );\n        }\n\n        // Add last child\n        gaps += children[l - 1].getMarginRight();\n      } else {\n        // Simple adding of all margins\n        for (var i = 1, l = children.length; i < l; i += 1) {\n          gaps += children[i].getMarginLeft() + children[i].getMarginRight();\n        }\n\n        // Add spacing\n        gaps += spacing * (l - 1);\n      }\n\n      return gaps;\n    },\n\n    /**\n     * Computes the sum of all vertical gaps. Normally the\n     * result is used to compute the available height in a widget.\n     *\n     * The method optionally respects margin collapsing as well. In\n     * this mode the spacing is collapsed together with the margins.\n     *\n     * @param children {Array} List of children\n     * @param spacing {Integer?0} Spacing between every child\n     * @param collapse {Boolean?false} Optional margin collapsing mode\n     * @return {Integer} Sum of all gaps in the final layout.\n     */\n    computeVerticalGaps(children, spacing, collapse) {\n      if (spacing == null) {\n        spacing = 0;\n      }\n\n      var gaps = 0;\n\n      if (collapse) {\n        // Add first child\n        gaps += children[0].getMarginTop();\n\n        for (var i = 1, l = children.length; i < l; i += 1) {\n          gaps += this.collapseMargins(\n            spacing,\n            children[i - 1].getMarginBottom(),\n            children[i].getMarginTop()\n          );\n        }\n\n        // Add last child\n        gaps += children[l - 1].getMarginBottom();\n      } else {\n        // Simple adding of all margins\n        for (var i = 1, l = children.length; i < l; i += 1) {\n          gaps += children[i].getMarginTop() + children[i].getMarginBottom();\n        }\n\n        // Add spacing\n        gaps += spacing * (l - 1);\n      }\n\n      return gaps;\n    },\n\n    /**\n     * Computes the gaps together with the configuration of separators.\n     *\n     * @param children {qx.ui.core.LayoutItem[]} List of children\n     * @param spacing {Integer} Configured spacing\n     * @param separator {String|qx.ui.decoration.IDecorator} Separator to render\n     * @return {Integer} Sum of gaps\n     */\n    computeHorizontalSeparatorGaps(children, spacing, separator) {\n      var instance =\n        qx.theme.manager.Decoration.getInstance().resolve(separator);\n      var insets = instance.getInsets();\n      var width = insets.left + insets.right;\n\n      var gaps = 0;\n      for (var i = 0, l = children.length; i < l; i++) {\n        var child = children[i];\n        gaps += child.getMarginLeft() + child.getMarginRight();\n      }\n\n      gaps += (spacing + width + spacing) * (l - 1);\n\n      return gaps;\n    },\n\n    /**\n     * Computes the gaps together with the configuration of separators.\n     *\n     * @param children {qx.ui.core.LayoutItem[]} List of children\n     * @param spacing {Integer} Configured spacing\n     * @param separator {String|qx.ui.decoration.IDecorator} Separator to render\n     * @return {Integer} Sum of gaps\n     */\n    computeVerticalSeparatorGaps(children, spacing, separator) {\n      var instance =\n        qx.theme.manager.Decoration.getInstance().resolve(separator);\n      var insets = instance.getInsets();\n      var height = insets.top + insets.bottom;\n\n      var gaps = 0;\n      for (var i = 0, l = children.length; i < l; i++) {\n        var child = children[i];\n        gaps += child.getMarginTop() + child.getMarginBottom();\n      }\n\n      gaps += (spacing + height + spacing) * (l - 1);\n\n      return gaps;\n    },\n\n    /**\n     * Arranges two sizes in one box to best respect their individual limitations.\n     *\n     * Mainly used by split layouts (Split Panes) where the layout is mainly defined\n     * by the outer dimensions.\n     *\n     * @param beginMin {Integer} Minimum size of first widget (from size hint)\n     * @param beginIdeal {Integer} Ideal size of first widget (maybe after dragging the splitter)\n     * @param beginMax {Integer} Maximum size of first widget (from size hint)\n     * @param endMin {Integer} Minimum size of second widget (from size hint)\n     * @param endIdeal {Integer} Ideal size of second widget (maybe after dragging the splitter)\n     * @param endMax {Integer} Maximum size of second widget (from size hint)\n     * @return {Map} Map with the keys <code>begin</code and <code>end</code> with the\n     *   arranged dimensions.\n     */\n    arrangeIdeals(beginMin, beginIdeal, beginMax, endMin, endIdeal, endMax) {\n      if (beginIdeal < beginMin || endIdeal < endMin) {\n        if (beginIdeal < beginMin && endIdeal < endMin) {\n          // Just increase both, can not rearrange them otherwise\n          // Result into overflowing of the overlapping content\n          // Should normally not happen through auto sizing!\n          beginIdeal = beginMin;\n          endIdeal = endMin;\n        } else if (beginIdeal < beginMin) {\n          // Reduce end, increase begin to min\n          endIdeal -= beginMin - beginIdeal;\n          beginIdeal = beginMin;\n\n          // Re-check to keep min size of end\n          if (endIdeal < endMin) {\n            endIdeal = endMin;\n          }\n        } else if (endIdeal < endMin) {\n          // Reduce begin, increase end to min\n          beginIdeal -= endMin - endIdeal;\n          endIdeal = endMin;\n\n          // Re-check to keep min size of begin\n          if (beginIdeal < beginMin) {\n            beginIdeal = beginMin;\n          }\n        }\n      }\n\n      if (beginIdeal > beginMax || endIdeal > endMax) {\n        if (beginIdeal > beginMax && endIdeal > endMax) {\n          // Just reduce both, can not rearrange them otherwise\n          // Leaves a blank area in the pane!\n          beginIdeal = beginMax;\n          endIdeal = endMax;\n        } else if (beginIdeal > beginMax) {\n          // Increase end, reduce begin to max\n          endIdeal += beginIdeal - beginMax;\n          beginIdeal = beginMax;\n\n          // Re-check to keep max size of end\n          if (endIdeal > endMax) {\n            endIdeal = endMax;\n          }\n        } else if (endIdeal > endMax) {\n          // Increase begin, reduce end to max\n          beginIdeal += endIdeal - endMax;\n          endIdeal = endMax;\n\n          // Re-check to keep max size of begin\n          if (beginIdeal > beginMax) {\n            beginIdeal = beginMax;\n          }\n        }\n      }\n\n      return {\n        begin: beginIdeal,\n        end: endIdeal\n      };\n    }\n  }\n});\n"
  ]
}