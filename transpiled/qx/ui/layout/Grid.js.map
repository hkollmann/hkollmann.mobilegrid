{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/layout/Grid.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "layout",
    "Abstract",
    "construct",
    "spacingX",
    "spacingY",
    "__rowData",
    "__colData",
    "setSpacingX",
    "setSpacingY",
    "properties",
    "check",
    "init",
    "apply",
    "allowGrowSpannedCellWidth",
    "members",
    "__grid",
    "__colSpans",
    "__rowSpans",
    "__maxRowIndex",
    "__maxColIndex",
    "__rowHeights",
    "__colWidths",
    "verifyLayoutProperty",
    "core",
    "Environment",
    "select",
    "item",
    "name",
    "value",
    "layoutProperties",
    "row",
    "column",
    "rowSpan",
    "colSpan",
    "assert",
    "assertInteger",
    "__buildGrid",
    "grid",
    "colSpans",
    "rowSpans",
    "maxRowIndex",
    "maxColIndex",
    "children",
    "_getLayoutChildren",
    "i",
    "l",
    "length",
    "child",
    "props",
    "getLayoutProperties",
    "Error",
    "x",
    "y",
    "undefined",
    "Math",
    "max",
    "push",
    "_invalidChildrenCache",
    "_setRowData",
    "key",
    "rowData",
    "_setColumnData",
    "colData",
    "setSpacing",
    "spacing",
    "setColumnAlign",
    "hAlign",
    "vAlign",
    "_applyLayoutChange",
    "getColumnAlign",
    "setRowAlign",
    "getRowAlign",
    "getCellWidget",
    "getRowCount",
    "getColumnCount",
    "getCellAlign",
    "widget",
    "widgetProps",
    "getAlignY",
    "getAlignX",
    "setColumnFlex",
    "flex",
    "getColumnFlex",
    "setRowFlex",
    "getRowFlex",
    "rowFlex",
    "setColumnMaxWidth",
    "maxWidth",
    "getColumnMaxWidth",
    "Infinity",
    "setColumnWidth",
    "width",
    "getColumnWidth",
    "setColumnMinWidth",
    "minWidth",
    "getColumnMinWidth",
    "setRowMaxHeight",
    "maxHeight",
    "getRowMaxHeight",
    "setRowHeight",
    "height",
    "getRowHeight",
    "setRowMinHeight",
    "minHeight",
    "getRowMinHeight",
    "_getOuterSize",
    "hint",
    "getSizeHint",
    "hMargins",
    "getMarginLeft",
    "getMarginRight",
    "vMargins",
    "getMarginTop",
    "getMarginBottom",
    "outerSize",
    "_fixHeightsRowSpan",
    "rowHeights",
    "vSpacing",
    "getSpacingY",
    "widgetRow",
    "prefSpanHeight",
    "minSpanHeight",
    "rowFlexes",
    "j",
    "rowHeight",
    "min",
    "lang",
    "Object",
    "isEmpty",
    "rowIncrements",
    "Util",
    "computeFlexOffsets",
    "k",
    "offset",
    "totalSpacing",
    "availableHeight",
    "avgRowHeight",
    "floor",
    "usedHeight",
    "rowsNeedAddition",
    "currentHeight",
    "additionalRowHeight",
    "_fixWidthsColSpan",
    "colWidths",
    "hSpacing",
    "getSpacingX",
    "_getColSpans",
    "widgetColumn",
    "prefSpanWidth",
    "minSpanWidth",
    "colFlexes",
    "col",
    "colWidth",
    "colFlex",
    "getAllowGrowSpannedCellWidth",
    "colIncrements",
    "availableWidth",
    "avgColWidth",
    "usedWidth",
    "colsNeedAddition",
    "currentWidth",
    "additionalColWidth",
    "_getRowHeights",
    "widgetRowSpan",
    "cellSize",
    "_getColWidths",
    "widgetColSpan",
    "_getColumnFlexOffsets",
    "diff",
    "flexibles",
    "_getRowFlexOffsets",
    "renderLayout",
    "availWidth",
    "availHeight",
    "padding",
    "prefWidths",
    "colStretchOffsets",
    "prefHeights",
    "rowStretchOffsets",
    "left",
    "top",
    "spanWidth",
    "spanHeight",
    "cellHint",
    "marginTop",
    "marginLeft",
    "marginBottom",
    "marginRight",
    "cellWidth",
    "cellHeight",
    "cellAlign",
    "cellLeft",
    "computeHorizontalAlignOffset",
    "cellTop",
    "computeVerticalAlignOffset",
    "invalidateLayoutCache",
    "_computeSizeHint",
    "destruct",
    "Grid"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,mBAAhB,EAAqC;AACnCC,IAAAA,MAAM,EAAEN,EAAE,CAACO,EAAH,CAAMC,MAAN,CAAaC,QADc;;AAGnC;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACEC,IAAAA,SAfmC,qBAezBC,QAfyB,EAefC,QAfe,EAeL;AAC5B;AAEA,WAAKC,SAAL,GAAiB,EAAjB;AACA,WAAKC,SAAL,GAAiB,EAAjB;;AAEA,UAAIH,QAAJ,EAAc;AACZ,aAAKI,WAAL,CAAiBJ,QAAjB;AACD;;AAED,UAAIC,QAAJ,EAAc;AACZ,aAAKI,WAAL,CAAiBJ,QAAjB;AACD;AACF,KA5BkC;;AA8BnC;AACF;AACA;AACA;AACA;AAEEK,IAAAA,UAAU,EAAE;AACV;AACJ;AACA;AACIN,MAAAA,QAAQ,EAAE;AACRO,QAAAA,KAAK,EAAE,SADC;AAERC,QAAAA,IAAI,EAAE,CAFE;AAGRC,QAAAA,KAAK,EAAE;AAHC,OAJA;;AAUV;AACJ;AACA;AACIR,MAAAA,QAAQ,EAAE;AACRM,QAAAA,KAAK,EAAE,SADC;AAERC,QAAAA,IAAI,EAAE,CAFE;AAGRC,QAAAA,KAAK,EAAE;AAHC,OAbA;;AAmBV;AACJ;AACA;AACA;AACA;AACA;AACA;A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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The grid layout manager arranges the items in a two dimensional\n * grid. Widgets can be placed into the grid's cells and may span multiple rows\n * and columns.\n *\n * *Features*\n *\n * * Flex values for rows and columns\n * * Minimal and maximal column and row sizes\n * * Manually setting of column and row sizes\n * * Horizontal and vertical alignment\n * * Horizontal and vertical spacing\n * * Column and row spans\n * * Auto-sizing\n *\n * *Item Properties*\n *\n * <ul>\n * <li><strong>row</strong> <em>(Integer)</em>: The row of the cell the\n *   widget should occupy. Each cell can only containing one widget. This layout\n *   property is mandatory.\n * </li>\n * <li><strong>column</strong> <em>(Integer)</em>: The column of the cell the\n *   widget should occupy. Each cell can only containing one widget. This layout\n *   property is mandatory.\n * </li>\n * <li><strong>rowSpan</strong> <em>(Integer)</em>: The number of rows, the\n *   widget should span, starting from the row specified in the <code>row</code>\n *   property. The cells in the spanned rows must be empty as well.\n * </li>\n * <li><strong>colSpan</strong> <em>(Integer)</em>: The number of columns, the\n *   widget should span, starting from the column specified in the <code>column</code>\n *   property. The cells in the spanned columns must be empty as well.\n * </li>\n * </ul>\n *\n * *Example*\n *\n * Here is a little example of how to use the grid layout.\n *\n * <pre class=\"javascript\">\n * var layout = new qx.ui.layout.Grid();\n * layout.setRowFlex(0, 1); // make row 0 flexible\n * layout.setColumnWidth(1, 200); // set with of column 1 to 200 pixel\n *\n * var container = new qx.ui.container.Composite(layout);\n * container.add(new qx.ui.core.Widget(), {row: 0, column: 0});\n * container.add(new qx.ui.core.Widget(), {row: 0, column: 1});\n * container.add(new qx.ui.core.Widget(), {row: 1, column: 0, rowSpan: 2});\n * </pre>\n *\n * *External Documentation*\n *\n * <a href='https://qooxdoo.org/documentation/#/desktop/layout/grid.md'>\n * Extended documentation</a> and links to demos of this layout in the qooxdoo manual.\n */\nqx.Class.define(\"qx.ui.layout.Grid\", {\n  extend: qx.ui.layout.Abstract,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param spacingX {Integer?0} The horizontal spacing between grid cells.\n   *     Sets {@link #spacingX}.\n   * @param spacingY {Integer?0} The vertical spacing between grid cells.\n   *     Sets {@link #spacingY}.\n   */\n  construct(spacingX, spacingY) {\n    super();\n\n    this.__rowData = [];\n    this.__colData = [];\n\n    if (spacingX) {\n      this.setSpacingX(spacingX);\n    }\n\n    if (spacingY) {\n      this.setSpacingY(spacingY);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * The horizontal spacing between grid cells.\n     */\n    spacingX: {\n      check: \"Integer\",\n      init: 0,\n      apply: \"_applyLayoutChange\"\n    },\n\n    /**\n     * The vertical spacing between grid cells.\n     */\n    spacingY: {\n      check: \"Integer\",\n      init: 0,\n      apply: \"_applyLayoutChange\"\n    },\n\n    /**\n     * Allow growing of spanning cells' widths beyond the accumulated widths of the columns.\n     * The default behavior (init value false) is that the width of the spanning cell is\n     * determined by the accumulated width of the columns (plus spacing).\n     * Setting this property to true lets the cell width grow as needed to show\n     * the widget in the spanning cell, which also enlarges the width of the spanned columns.\n     */\n    allowGrowSpannedCellWidth: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyLayoutChange\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /** @type {Array} 2D array of grid cell data */\n    __grid: null,\n    __rowData: null,\n    __colData: null,\n\n    __colSpans: null,\n    __rowSpans: null,\n    __maxRowIndex: null,\n    __maxColIndex: null,\n\n    /** @type {Array} cached row heights */\n    __rowHeights: null,\n\n    /** @type {Array} cached column widths */\n    __colWidths: null,\n\n    // overridden\n    verifyLayoutProperty: qx.core.Environment.select(\"qx.debug\", {\n      true(item, name, value) {\n        var layoutProperties = {\n          row: 1,\n          column: 1,\n          rowSpan: 1,\n          colSpan: 1\n        };\n\n        this.assert(\n          layoutProperties[name] == 1,\n          \"The property '\" + name + \"' is not supported by the Grid layout!\"\n        );\n\n        this.assertInteger(value);\n        this.assert(value >= 0, \"Value must be positive\");\n      },\n\n      false: null\n    }),\n\n    /**\n     * Rebuild the internal representation of the grid\n     */\n    __buildGrid() {\n      var grid = [];\n      var colSpans = [];\n      var rowSpans = [];\n\n      var maxRowIndex = -1;\n      var maxColIndex = -1;\n\n      var children = this._getLayoutChildren();\n\n      for (var i = 0, l = children.length; i < l; i++) {\n        var child = children[i];\n        var props = child.getLayoutProperties();\n\n        var row = props.row;\n        var column = props.column;\n\n        props.colSpan = props.colSpan || 1;\n        props.rowSpan = props.rowSpan || 1;\n\n        // validate arguments\n        if (row == null || column == null) {\n          throw new Error(\n            \"The layout properties 'row' and 'column' of the child widget '\" +\n              child +\n              \"' must be defined!\"\n          );\n        }\n\n        if (grid[row] && grid[row][column]) {\n          throw new Error(\n            \"Cannot add widget '\" +\n              child +\n              \"'!. \" +\n              \"There is already a widget '\" +\n              grid[row][column] +\n              \"' in this cell (\" +\n              row +\n              \", \" +\n              column +\n              \") for '\" +\n              this +\n              \"'\"\n          );\n        }\n\n        for (var x = column; x < column + props.colSpan; x++) {\n          for (var y = row; y < row + props.rowSpan; y++) {\n            if (grid[y] == undefined) {\n              grid[y] = [];\n            }\n\n            grid[y][x] = child;\n\n            maxColIndex = Math.max(maxColIndex, x);\n            maxRowIndex = Math.max(maxRowIndex, y);\n          }\n        }\n\n        if (props.rowSpan > 1) {\n          rowSpans.push(child);\n        }\n\n        if (props.colSpan > 1) {\n          colSpans.push(child);\n        }\n      }\n\n      // make sure all columns are defined so that accessing the grid using\n      // this.__grid[column][row] will never raise an exception\n      for (var y = 0; y <= maxRowIndex; y++) {\n        if (grid[y] == undefined) {\n          grid[y] = [];\n        }\n      }\n\n      this.__grid = grid;\n\n      this.__colSpans = colSpans;\n      this.__rowSpans = rowSpans;\n\n      this.__maxRowIndex = maxRowIndex;\n      this.__maxColIndex = maxColIndex;\n\n      this.__rowHeights = null;\n      this.__colWidths = null;\n\n      // Clear invalidation marker\n      delete this._invalidChildrenCache;\n    },\n\n    /**\n     * Stores data for a grid row\n     *\n     * @param row {Integer} The row index\n     * @param key {String} The key under which the data should be stored\n     * @param value {var} data to store\n     */\n    _setRowData(row, key, value) {\n      var rowData = this.__rowData[row];\n\n      if (!rowData) {\n        this.__rowData[row] = {};\n        this.__rowData[row][key] = value;\n      } else {\n        rowData[key] = value;\n      }\n    },\n\n    /**\n     * Stores data for a grid column\n     *\n     * @param column {Integer} The column index\n     * @param key {String} The key under which the data should be stored\n     * @param value {var} data to store\n     */\n    _setColumnData(column, key, value) {\n      var colData = this.__colData[column];\n\n      if (!colData) {\n        this.__colData[column] = {};\n        this.__colData[column][key] = value;\n      } else {\n        colData[key] = value;\n      }\n    },\n\n    /**\n     * Shortcut to set both horizontal and vertical spacing between grid cells\n     * to the same value.\n     *\n     * @param spacing {Integer} new horizontal and vertical spacing\n     * @return {qx.ui.layout.Grid} This object (for chaining support).\n     */\n    setSpacing(spacing) {\n      this.setSpacingY(spacing);\n      this.setSpacingX(spacing);\n      return this;\n    },\n\n    /**\n     * Set the default cell alignment for a column. This alignment can be\n     * overridden on a per cell basis by setting the cell's content widget's\n     * <code>alignX</code> and <code>alignY</code> properties.\n     *\n     * If on a grid cell both row and a column alignment is set, the horizontal\n     * alignment is taken from the column and the vertical alignment is taken\n     * from the row.\n     *\n     * @param column {Integer} Column index\n     * @param hAlign {String} The horizontal alignment. Valid values are\n     *    \"left\", \"center\" and \"right\".\n     * @param vAlign {String} The vertical alignment. Valid values are\n     *    \"top\", \"middle\", \"bottom\"\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnAlign(column, hAlign, vAlign) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(column, \"Invalid parameter 'column'\");\n        this.assertInArray(hAlign, [\"left\", \"center\", \"right\"]);\n        this.assertInArray(vAlign, [\"top\", \"middle\", \"bottom\"]);\n      }\n\n      this._setColumnData(column, \"hAlign\", hAlign);\n      this._setColumnData(column, \"vAlign\", vAlign);\n\n      this._applyLayoutChange();\n\n      return this;\n    },\n\n    /**\n     * Get a map of the column's alignment.\n     *\n     * @param column {Integer} The column index\n     * @return {Map} A map with the keys <code>vAlign</code> and <code>hAlign</code>\n     *     containing the vertical and horizontal column alignment.\n     */\n    getColumnAlign(column) {\n      var colData = this.__colData[column] || {};\n\n      return {\n        vAlign: colData.vAlign || \"top\",\n        hAlign: colData.hAlign || \"left\"\n      };\n    },\n\n    /**\n     * Set the default cell alignment for a row. This alignment can be\n     * overridden on a per cell basis by setting the cell's content widget's\n     * <code>alignX</code> and <code>alignY</code> properties.\n     *\n     * If on a grid cell both row and a column alignment is set, the horizontal\n     * alignment is taken from the column and the vertical alignment is taken\n     * from the row.\n     *\n     * @param row {Integer} Row index\n     * @param hAlign {String} The horizontal alignment. Valid values are\n     *    \"left\", \"center\" and \"right\".\n     * @param vAlign {String} The vertical alignment. Valid values are\n     *    \"top\", \"middle\", \"bottom\"\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowAlign(row, hAlign, vAlign) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(row, \"Invalid parameter 'row'\");\n        this.assertInArray(hAlign, [\"left\", \"center\", \"right\"]);\n        this.assertInArray(vAlign, [\"top\", \"middle\", \"bottom\"]);\n      }\n\n      this._setRowData(row, \"hAlign\", hAlign);\n      this._setRowData(row, \"vAlign\", vAlign);\n\n      this._applyLayoutChange();\n\n      return this;\n    },\n\n    /**\n     * Get a map of the row's alignment.\n     *\n     * @param row {Integer} The Row index\n     * @return {Map} A map with the keys <code>vAlign</code> and <code>hAlign</code>\n     *     containing the vertical and horizontal row alignment.\n     */\n    getRowAlign(row) {\n      var rowData = this.__rowData[row] || {};\n\n      return {\n        vAlign: rowData.vAlign || \"top\",\n        hAlign: rowData.hAlign || \"left\"\n      };\n    },\n\n    /**\n     * Get the widget located in the cell. If a the cell is empty or the widget\n     * has a {@link qx.ui.core.Widget#visibility} value of <code>exclude</code>,\n     * <code>null</code> is returned.\n     *\n     * @param row {Integer} The cell's row index\n     * @param column {Integer} The cell's column index\n     * @return {qx.ui.core.Widget|null}The cell's widget. The value may be null.\n     */\n    getCellWidget(row, column) {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      var row = this.__grid[row] || {};\n      return row[column] || null;\n    },\n\n    /**\n     * Get the number of rows in the grid layout.\n     *\n     * @return {Integer} The number of rows in the layout\n     */\n    getRowCount() {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      return this.__maxRowIndex + 1;\n    },\n\n    /**\n     * Get the number of columns in the grid layout.\n     *\n     * @return {Integer} The number of columns in the layout\n     */\n    getColumnCount() {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      return this.__maxColIndex + 1;\n    },\n\n    /**\n     * Get a map of the cell's alignment. For vertical alignment the row alignment\n     * takes precedence over the column alignment. For horizontal alignment it is\n     * the over way round. If an alignment is set on the cell widget using\n     * {@link qx.ui.core.LayoutItem#setLayoutProperties}, this alignment takes\n     * always precedence over row or column alignment.\n     *\n     * @param row {Integer} The cell's row index\n     * @param column {Integer} The cell's column index\n     * @return {Map} A map with the keys <code>vAlign</code> and <code>hAlign</code>\n     *     containing the vertical and horizontal cell alignment.\n     */\n    getCellAlign(row, column) {\n      var vAlign = \"top\";\n      var hAlign = \"left\";\n\n      var rowData = this.__rowData[row];\n      var colData = this.__colData[column];\n\n      var widget = this.__grid[row][column];\n      if (widget) {\n        var widgetProps = {\n          vAlign: widget.getAlignY(),\n          hAlign: widget.getAlignX()\n        };\n      } else {\n        widgetProps = {};\n      }\n\n      // compute vAlign\n      // precedence : widget -> row -> column\n      if (widgetProps.vAlign) {\n        vAlign = widgetProps.vAlign;\n      } else if (rowData && rowData.vAlign) {\n        vAlign = rowData.vAlign;\n      } else if (colData && colData.vAlign) {\n        vAlign = colData.vAlign;\n      }\n\n      // compute hAlign\n      // precedence : widget -> column -> row\n      if (widgetProps.hAlign) {\n        hAlign = widgetProps.hAlign;\n      } else if (colData && colData.hAlign) {\n        hAlign = colData.hAlign;\n      } else if (rowData && rowData.hAlign) {\n        hAlign = rowData.hAlign;\n      }\n\n      return {\n        vAlign: vAlign,\n        hAlign: hAlign\n      };\n    },\n\n    /**\n     * Set the flex value for a grid column.\n     * By default the column flex value is <code>0</code>.\n     *\n     * @param column {Integer} The column index\n     * @param flex {Integer} The column's flex value\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnFlex(column, flex) {\n      this._setColumnData(column, \"flex\", flex);\n      this._applyLayoutChange();\n      return this;\n    },\n\n    /**\n     * Get the flex value of a grid column.\n     *\n     * @param column {Integer} The column index\n     * @return {Integer} The column's flex value\n     */\n    getColumnFlex(column) {\n      var colData = this.__colData[column] || {};\n      return colData.flex !== undefined ? colData.flex : 0;\n    },\n\n    /**\n     * Set the flex value for a grid row.\n     * By default the row flex value is <code>0</code>.\n     *\n     * @param row {Integer} The row index\n     * @param flex {Integer} The row's flex value\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowFlex(row, flex) {\n      this._setRowData(row, \"flex\", flex);\n      this._applyLayoutChange();\n      return this;\n    },\n\n    /**\n     * Get the flex value of a grid row.\n     *\n     * @param row {Integer} The row index\n     * @return {Integer} The row's flex value\n     */\n    getRowFlex(row) {\n      var rowData = this.__rowData[row] || {};\n      var rowFlex = rowData.flex !== undefined ? rowData.flex : 0;\n      return rowFlex;\n    },\n\n    /**\n     * Set the maximum width of a grid column.\n     * The default value is <code>Infinity</code>.\n     *\n     * @param column {Integer} The column index\n     * @param maxWidth {Integer} The column's maximum width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnMaxWidth(column, maxWidth) {\n      this._setColumnData(column, \"maxWidth\", maxWidth);\n      this._applyLayoutChange();\n      return this;\n    },\n\n    /**\n     * Get the maximum width of a grid column.\n     *\n     * @param column {Integer} The column index\n     * @return {Integer} The column's maximum width\n     */\n    getColumnMaxWidth(column) {\n      var colData = this.__colData[column] || {};\n      return colData.maxWidth !== undefined ? colData.maxWidth : Infinity;\n    },\n\n    /**\n     * Set the preferred width of a grid column.\n     * The default value is <code>Infinity</code>.\n     *\n     * @param column {Integer} The column index\n     * @param width {Integer} The column's width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnWidth(column, width) {\n      this._setColumnData(column, \"width\", width);\n      this._applyLayoutChange();\n      return this;\n    },\n\n    /**\n     * Get the preferred width of a grid column.\n     *\n     * @param column {Integer} The column index\n     * @return {Integer} The column's width\n     */\n    getColumnWidth(column) {\n      var colData = this.__colData[column] || {};\n      return colData.width !== undefined ? colData.width : null;\n    },\n\n    /**\n     * Set the minimum width of a grid column.\n     * The default value is <code>0</code>.\n     *\n     * @param column {Integer} The column index\n     * @param minWidth {Integer} The column's minimum width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnMinWidth(column, minWidth) {\n      this._setColumnData(column, \"minWidth\", minWidth);\n      this._applyLayoutChange();\n      return this;\n    },\n\n    /**\n     * Get the minimum width of a grid column.\n     *\n     * @param column {Integer} The column index\n     * @return {Integer} The column's minimum width\n     */\n    getColumnMinWidth(column) {\n      var colData = this.__colData[column] || {};\n      return colData.minWidth || 0;\n    },\n\n    /**\n     * Set the maximum height of a grid row.\n     * The default value is <code>Infinity</code>.\n     *\n     * @param row {Integer} The row index\n     * @param maxHeight {Integer} The row's maximum width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowMaxHeight(row, maxHeight) {\n      this._setRowData(row, \"maxHeight\", maxHeight);\n      this._applyLayoutChange();\n      return this;\n    },\n\n    /**\n     * Get the maximum height of a grid row.\n     *\n     * @param row {Integer} The row index\n     * @return {Integer} The row's maximum width\n     */\n    getRowMaxHeight(row) {\n      var rowData = this.__rowData[row] || {};\n      return rowData.maxHeight || Infinity;\n    },\n\n    /**\n     * Set the preferred height of a grid row.\n     * The default value is <code>Infinity</code>.\n     *\n     * @param row {Integer} The row index\n     * @param height {Integer} The row's width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowHeight(row, height) {\n      this._setRowData(row, \"height\", height);\n      this._applyLayoutChange();\n      return this;\n    },\n\n    /**\n     * Get the preferred height of a grid row.\n     *\n     * @param row {Integer} The row index\n     * @return {Integer} The row's width\n     */\n    getRowHeight(row) {\n      var rowData = this.__rowData[row] || {};\n      return rowData.height !== undefined ? rowData.height : null;\n    },\n\n    /**\n     * Set the minimum height of a grid row.\n     * The default value is <code>0</code>.\n     *\n     * @param row {Integer} The row index\n     * @param minHeight {Integer} The row's minimum width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowMinHeight(row, minHeight) {\n      this._setRowData(row, \"minHeight\", minHeight);\n      this._applyLayoutChange();\n      return this;\n    },\n\n    /**\n     * Get the minimum height of a grid row.\n     *\n     * @param row {Integer} The row index\n     * @return {Integer} The row's minimum width\n     */\n    getRowMinHeight(row) {\n      var rowData = this.__rowData[row] || {};\n      return rowData.minHeight || 0;\n    },\n\n    /**\n     * Computes the widget's size hint including the widget's margins\n     *\n     * @param widget {qx.ui.core.LayoutItem} The widget to get the size for\n     * @return {Map} a size hint map\n     */\n    _getOuterSize(widget) {\n      var hint = widget.getSizeHint();\n      var hMargins = widget.getMarginLeft() + widget.getMarginRight();\n      var vMargins = widget.getMarginTop() + widget.getMarginBottom();\n\n      var outerSize = {\n        height: hint.height + vMargins,\n        width: hint.width + hMargins,\n        minHeight: hint.minHeight + vMargins,\n        minWidth: hint.minWidth + hMargins,\n        maxHeight: hint.maxHeight + vMargins,\n        maxWidth: hint.maxWidth + hMargins\n      };\n\n      return outerSize;\n    },\n\n    /**\n     * Check whether all row spans fit with their preferred height into the\n     * preferred row heights. If there is not enough space, the preferred\n     * row sizes are increased. The distribution respects the flex and max\n     * values of the rows.\n     *\n     *  The same is true for the min sizes.\n     *\n     *  The height array is modified in place.\n     *\n     * @param rowHeights {Map[]} The current row height array as computed by\n     *     {@link #_getRowHeights}.\n     */\n    _fixHeightsRowSpan(rowHeights) {\n      var vSpacing = this.getSpacingY();\n\n      for (var i = 0, l = this.__rowSpans.length; i < l; i++) {\n        var widget = this.__rowSpans[i];\n\n        var hint = this._getOuterSize(widget);\n\n        var widgetProps = widget.getLayoutProperties();\n        var widgetRow = widgetProps.row;\n\n        var prefSpanHeight = vSpacing * (widgetProps.rowSpan - 1);\n        var minSpanHeight = prefSpanHeight;\n\n        var rowFlexes = {};\n\n        for (var j = 0; j < widgetProps.rowSpan; j++) {\n          var row = widgetProps.row + j;\n          var rowHeight = rowHeights[row];\n          var rowFlex = this.getRowFlex(row);\n\n          if (rowFlex > 0) {\n            // compute flex array for the preferred height\n            rowFlexes[row] = {\n              min: rowHeight.minHeight,\n              value: rowHeight.height,\n              max: rowHeight.maxHeight,\n              flex: rowFlex\n            };\n          }\n\n          prefSpanHeight += rowHeight.height;\n          minSpanHeight += rowHeight.minHeight;\n        }\n\n        // If there is not enough space for the preferred size\n        // increment the preferred row sizes.\n        if (prefSpanHeight < hint.height) {\n          if (!qx.lang.Object.isEmpty(rowFlexes)) {\n            var rowIncrements = qx.ui.layout.Util.computeFlexOffsets(\n              rowFlexes,\n              hint.height,\n              prefSpanHeight\n            );\n\n            for (var k = 0; k < widgetProps.rowSpan; k++) {\n              var offset = rowIncrements[widgetRow + k]\n                ? rowIncrements[widgetRow + k].offset\n                : 0;\n              rowHeights[widgetRow + k].height += offset;\n            }\n            // row is too small and we have no flex value set\n          } else {\n            var totalSpacing = vSpacing * (widgetProps.rowSpan - 1);\n            var availableHeight = hint.height - totalSpacing;\n\n            // get the row height which every child would need to share the\n            // available hight equally\n            var avgRowHeight = Math.floor(\n              availableHeight / widgetProps.rowSpan\n            );\n\n            // get the hight already used and the number of children which do\n            // not have at least that avg row height\n            var usedHeight = 0;\n            var rowsNeedAddition = 0;\n            for (var k = 0; k < widgetProps.rowSpan; k++) {\n              var currentHeight = rowHeights[widgetRow + k].height;\n              usedHeight += currentHeight;\n              if (currentHeight < avgRowHeight) {\n                rowsNeedAddition++;\n              }\n            }\n\n            // the difference of available and used needs to be shared among\n            // those not having the min size\n            var additionalRowHeight = Math.floor(\n              (availableHeight - usedHeight) / rowsNeedAddition\n            );\n\n            // add the extra height to the too small children\n            for (var k = 0; k < widgetProps.rowSpan; k++) {\n              if (rowHeights[widgetRow + k].height < avgRowHeight) {\n                rowHeights[widgetRow + k].height += additionalRowHeight;\n              }\n            }\n          }\n        }\n\n        // If there is not enough space for the min size\n        // increment the min row sizes.\n        if (minSpanHeight < hint.minHeight) {\n          var rowIncrements = qx.ui.layout.Util.computeFlexOffsets(\n            rowFlexes,\n            hint.minHeight,\n            minSpanHeight\n          );\n\n          for (var j = 0; j < widgetProps.rowSpan; j++) {\n            var offset = rowIncrements[widgetRow + j]\n              ? rowIncrements[widgetRow + j].offset\n              : 0;\n            rowHeights[widgetRow + j].minHeight += offset;\n          }\n        }\n      }\n    },\n\n    /**\n     * Check whether all col spans fit with their preferred width into the\n     * preferred column widths. If there is not enough space the preferred\n     * column sizes are increased. The distribution respects the flex and max\n     * values of the columns.\n     *\n     *  The same is true for the min sizes.\n     *\n     *  The width array is modified in place.\n     *\n     * @param colWidths {Map[]} The current column width array as computed by\n     *     {@link #_getColWidths}.\n     */\n    _fixWidthsColSpan(colWidths) {\n      var hSpacing = this.getSpacingX();\n      var colSpans = this._getColSpans();\n\n      for (var i = 0, l = colSpans.length; i < l; i++) {\n        var widget = colSpans[i];\n\n        var hint = this._getOuterSize(widget);\n\n        var widgetProps = widget.getLayoutProperties();\n        var widgetColumn = widgetProps.column;\n\n        var prefSpanWidth = hSpacing * (widgetProps.colSpan - 1);\n        var minSpanWidth = prefSpanWidth;\n\n        var colFlexes = {};\n\n        var offset;\n\n        for (var j = 0; j < widgetProps.colSpan; j++) {\n          var col = widgetProps.column + j;\n          var colWidth = colWidths[col];\n          var colFlex = this.getColumnFlex(col);\n\n          // compute flex array for the preferred width\n          if (colFlex > 0) {\n            colFlexes[col] = {\n              min: colWidth.minWidth,\n              value: colWidth.width,\n              max: colWidth.maxWidth,\n              flex: colFlex\n            };\n          }\n\n          prefSpanWidth += colWidth.width;\n          minSpanWidth += colWidth.minWidth;\n        }\n\n        // If there is not enough space for the preferred size\n        // increment the preferred column sizes.\n        if (prefSpanWidth < hint.width) {\n          // Do not adapt column widths to the width\n          // of the spanning cell if allowGrowSpannedCellWidth property\n          // is set to false\n          // See https://github.com/qooxdoo/qooxdoo/issues/9871\n          if (\n            !this.getAllowGrowSpannedCellWidth() ||\n            !qx.lang.Object.isEmpty(colFlexes)\n          ) {\n            var colIncrements = qx.ui.layout.Util.computeFlexOffsets(\n              colFlexes,\n              hint.width,\n              prefSpanWidth\n            );\n\n            for (var j = 0; j < widgetProps.colSpan; j++) {\n              offset = colIncrements[widgetColumn + j]\n                ? colIncrements[widgetColumn + j].offset\n                : 0;\n              colWidths[widgetColumn + j].width += offset;\n            }\n            // col is too small and we have no flex value set\n          } else {\n            var totalSpacing = hSpacing * (widgetProps.colSpan - 1);\n            var availableWidth = hint.width - totalSpacing;\n\n            // get the col width which every child would need to share the\n            // available width equally\n            var avgColWidth = Math.floor(availableWidth / widgetProps.colSpan);\n\n            // get the width already used and the number of children which do\n            // not have at least that avg col width\n            var usedWidth = 0;\n            var colsNeedAddition = 0;\n            for (var k = 0; k < widgetProps.colSpan; k++) {\n              var currentWidth = colWidths[widgetColumn + k].width;\n              usedWidth += currentWidth;\n              if (currentWidth < avgColWidth) {\n                colsNeedAddition++;\n              }\n            }\n\n            // the difference of available and used needs to be shared among\n            // those not having the min size\n            var additionalColWidth = Math.floor(\n              (availableWidth - usedWidth) / colsNeedAddition\n            );\n\n            // add the extra width to the too small children\n            for (var k = 0; k < widgetProps.colSpan; k++) {\n              if (colWidths[widgetColumn + k].width < avgColWidth) {\n                colWidths[widgetColumn + k].width += additionalColWidth;\n              }\n            }\n          }\n        }\n\n        // If there is not enough space for the min size\n        // increment the min column sizes.\n        if (minSpanWidth < hint.minWidth) {\n          var colIncrements = qx.ui.layout.Util.computeFlexOffsets(\n            colFlexes,\n            hint.minWidth,\n            minSpanWidth\n          );\n\n          for (var j = 0; j < widgetProps.colSpan; j++) {\n            offset = colIncrements[widgetColumn + j]\n              ? colIncrements[widgetColumn + j].offset\n              : 0;\n            colWidths[widgetColumn + j].minWidth += offset;\n          }\n        }\n      }\n    },\n\n    /**\n     * Compute the min/pref/max row heights.\n     *\n     * @return {Map[]} An array containing height information for each row. The\n     *     entries have the keys <code>minHeight</code>, <code>maxHeight</code> and\n     *     <code>height</code>.\n     */\n    _getRowHeights() {\n      if (this.__rowHeights != null) {\n        return this.__rowHeights;\n      }\n\n      var rowHeights = [];\n\n      var maxRowIndex = this.__maxRowIndex;\n      var maxColIndex = this.__maxColIndex;\n\n      for (var row = 0; row <= maxRowIndex; row++) {\n        var minHeight = 0;\n        var height = 0;\n        var maxHeight = 0;\n\n        for (var col = 0; col <= maxColIndex; col++) {\n          var widget = this.__grid[row][col];\n          if (!widget) {\n            continue;\n          }\n\n          // ignore rows with row spans at this place\n          // these rows will be taken into account later\n          var widgetRowSpan = widget.getLayoutProperties().rowSpan || 0;\n          if (widgetRowSpan > 1) {\n            continue;\n          }\n\n          var cellSize = this._getOuterSize(widget);\n\n          if (this.getRowFlex(row) > 0) {\n            minHeight = Math.max(minHeight, cellSize.minHeight);\n          } else {\n            minHeight = Math.max(minHeight, cellSize.height);\n          }\n\n          height = Math.max(height, cellSize.height);\n        }\n\n        var minHeight = Math.max(minHeight, this.getRowMinHeight(row));\n        var maxHeight = this.getRowMaxHeight(row);\n\n        if (this.getRowHeight(row) !== null) {\n          var height = this.getRowHeight(row);\n        } else {\n          var height = Math.max(minHeight, Math.min(height, maxHeight));\n        }\n\n        rowHeights[row] = {\n          minHeight: minHeight,\n          height: height,\n          maxHeight: maxHeight\n        };\n      }\n\n      if (this.__rowSpans.length > 0) {\n        this._fixHeightsRowSpan(rowHeights);\n      }\n\n      this.__rowHeights = rowHeights;\n      return rowHeights;\n    },\n\n    /**\n     * Compute the min/pref/max column widths.\n     *\n     * @return {Map[]} An array containing width information for each column. The\n     *     entries have the keys <code>minWidth</code>, <code>maxWidth</code> and\n     *     <code>width</code>.\n     */\n    _getColWidths() {\n      if (this.__colWidths != null) {\n        return this.__colWidths;\n      }\n\n      var colWidths = [];\n\n      var maxColIndex = this.__maxColIndex;\n      var maxRowIndex = this.__maxRowIndex;\n\n      for (var col = 0; col <= maxColIndex; col++) {\n        var width = 0;\n        var minWidth = 0;\n        var maxWidth = Infinity;\n\n        for (var row = 0; row <= maxRowIndex; row++) {\n          var widget = this.__grid[row][col];\n          if (!widget) {\n            continue;\n          }\n\n          // ignore columns with col spans at this place\n          // these columns will be taken into account later\n          var widgetColSpan = widget.getLayoutProperties().colSpan || 0;\n          if (widgetColSpan > 1) {\n            continue;\n          }\n\n          var cellSize = this._getOuterSize(widget);\n\n          minWidth = Math.max(minWidth, cellSize.minWidth);\n\n          width = Math.max(width, cellSize.width);\n        }\n\n        minWidth = Math.max(minWidth, this.getColumnMinWidth(col));\n        maxWidth = this.getColumnMaxWidth(col);\n\n        if (this.getColumnWidth(col) !== null) {\n          var width = this.getColumnWidth(col);\n        } else {\n          var width = Math.max(minWidth, Math.min(width, maxWidth));\n        }\n\n        colWidths[col] = {\n          minWidth: minWidth,\n          width: width,\n          maxWidth: maxWidth\n        };\n      }\n\n      if (this._getColSpans().length > 0) {\n        this._fixWidthsColSpan(colWidths);\n      }\n\n      this.__colWidths = colWidths;\n      return colWidths;\n    },\n\n    /**\n     * Computes for each column by how many pixels it must grow or shrink, taking\n     * the column flex values and min/max widths into account.\n     *\n     * @param width {Integer} The grid width\n     * @return {Integer[]} Sparse array of offsets to add to each column width. If\n     *     an array entry is empty nothing should be added to the column.\n     */\n    _getColumnFlexOffsets(width) {\n      var hint = this.getSizeHint();\n      var diff = width - hint.width;\n\n      if (diff == 0) {\n        return {};\n      }\n\n      // collect all flexible children\n      var colWidths = this._getColWidths();\n      var flexibles = {};\n\n      for (var i = 0, l = colWidths.length; i < l; i++) {\n        var col = colWidths[i];\n        var colFlex = this.getColumnFlex(i);\n\n        if (\n          colFlex <= 0 ||\n          (col.width == col.maxWidth && diff > 0) ||\n          (col.width == col.minWidth && diff < 0)\n        ) {\n          continue;\n        }\n\n        flexibles[i] = {\n          min: col.minWidth,\n          value: col.width,\n          max: col.maxWidth,\n          flex: colFlex\n        };\n      }\n\n      return qx.ui.layout.Util.computeFlexOffsets(flexibles, width, hint.width);\n    },\n\n    /**\n     * Computes for each row by how many pixels it must grow or shrink, taking\n     * the row flex values and min/max heights into account.\n     *\n     * @param height {Integer} The grid height\n     * @return {Integer[]} Sparse array of offsets to add to each row height. If\n     *     an array entry is empty nothing should be added to the row.\n     */\n    _getRowFlexOffsets(height) {\n      var hint = this.getSizeHint();\n      var diff = height - hint.height;\n\n      if (diff == 0) {\n        return {};\n      }\n\n      // collect all flexible children\n      var rowHeights = this._getRowHeights();\n      var flexibles = {};\n\n      for (var i = 0, l = rowHeights.length; i < l; i++) {\n        var row = rowHeights[i];\n        var rowFlex = this.getRowFlex(i);\n\n        if (\n          rowFlex <= 0 ||\n          (row.height == row.maxHeight && diff > 0) ||\n          (row.height == row.minHeight && diff < 0)\n        ) {\n          continue;\n        }\n\n        flexibles[i] = {\n          min: row.minHeight,\n          value: row.height,\n          max: row.maxHeight,\n          flex: rowFlex\n        };\n      }\n\n      return qx.ui.layout.Util.computeFlexOffsets(\n        flexibles,\n        height,\n        hint.height\n      );\n    },\n\n    /**\n     * Returns the internal private __colSpans array in order\n     * have a protected getter which can be used other methods\n     * to make them overridable\n     *\n     * @return {Array} the __colSpans array\n     */\n    _getColSpans() {\n      return this.__colSpans;\n    },\n\n    // overridden\n    renderLayout(availWidth, availHeight, padding) {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      var Util = qx.ui.layout.Util;\n      var hSpacing = this.getSpacingX();\n      var vSpacing = this.getSpacingY();\n\n      // calculate column widths\n      var prefWidths = this._getColWidths();\n      var colStretchOffsets = this._getColumnFlexOffsets(availWidth);\n\n      var colWidths = [];\n\n      var maxColIndex = this.__maxColIndex;\n      var maxRowIndex = this.__maxRowIndex;\n\n      var offset;\n\n      for (var col = 0; col <= maxColIndex; col++) {\n        offset = colStretchOffsets[col] ? colStretchOffsets[col].offset : 0;\n        colWidths[col] = prefWidths[col].width + offset;\n      }\n\n      // calculate row heights\n      var prefHeights = this._getRowHeights();\n      var rowStretchOffsets = this._getRowFlexOffsets(availHeight);\n\n      var rowHeights = [];\n\n      for (var row = 0; row <= maxRowIndex; row++) {\n        offset = rowStretchOffsets[row] ? rowStretchOffsets[row].offset : 0;\n        rowHeights[row] = prefHeights[row].height + offset;\n      }\n\n      // do the layout\n      var left = 0;\n      for (var col = 0; col <= maxColIndex; col++) {\n        var top = 0;\n\n        for (var row = 0; row <= maxRowIndex; row++) {\n          var widget = this.__grid[row][col];\n\n          // ignore empty cells\n          if (!widget) {\n            top += rowHeights[row] + vSpacing;\n            continue;\n          }\n\n          var widgetProps = widget.getLayoutProperties();\n\n          // ignore cells, which have cell spanning but are not the origin\n          // of the widget\n          if (widgetProps.row !== row || widgetProps.column !== col) {\n            top += rowHeights[row] + vSpacing;\n            continue;\n          }\n\n          // compute sizes width including cell spanning\n          var spanWidth = hSpacing * (widgetProps.colSpan - 1);\n          for (var i = 0; i < widgetProps.colSpan; i++) {\n            spanWidth += colWidths[col + i];\n          }\n\n          var spanHeight = vSpacing * (widgetProps.rowSpan - 1);\n          for (var i = 0; i < widgetProps.rowSpan; i++) {\n            spanHeight += rowHeights[row + i];\n          }\n\n          var cellHint = widget.getSizeHint();\n          var marginTop = widget.getMarginTop();\n          var marginLeft = widget.getMarginLeft();\n          var marginBottom = widget.getMarginBottom();\n          var marginRight = widget.getMarginRight();\n\n          var cellWidth = Math.max(\n            cellHint.minWidth,\n            Math.min(spanWidth - marginLeft - marginRight, cellHint.maxWidth)\n          );\n\n          var cellHeight = Math.max(\n            cellHint.minHeight,\n            Math.min(spanHeight - marginTop - marginBottom, cellHint.maxHeight)\n          );\n\n          var cellAlign = this.getCellAlign(row, col);\n          var cellLeft =\n            left +\n            Util.computeHorizontalAlignOffset(\n              cellAlign.hAlign,\n              cellWidth,\n              spanWidth,\n              marginLeft,\n              marginRight\n            );\n\n          var cellTop =\n            top +\n            Util.computeVerticalAlignOffset(\n              cellAlign.vAlign,\n              cellHeight,\n              spanHeight,\n              marginTop,\n              marginBottom\n            );\n\n          widget.renderLayout(\n            cellLeft + padding.left,\n            cellTop + padding.top,\n            cellWidth,\n            cellHeight\n          );\n\n          top += rowHeights[row] + vSpacing;\n        }\n\n        left += colWidths[col] + hSpacing;\n      }\n    },\n\n    // overridden\n    invalidateLayoutCache() {\n      super.invalidateLayoutCache();\n\n      this.__colWidths = null;\n      this.__rowHeights = null;\n    },\n\n    // overridden\n    _computeSizeHint() {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      // calculate col widths\n      var colWidths = this._getColWidths();\n\n      var minWidth = 0,\n        width = 0;\n\n      for (var i = 0, l = colWidths.length; i < l; i++) {\n        var col = colWidths[i];\n        if (this.getColumnFlex(i) > 0) {\n          minWidth += col.minWidth;\n        } else {\n          minWidth += col.width;\n        }\n\n        width += col.width;\n      }\n\n      // calculate row heights\n      var rowHeights = this._getRowHeights();\n\n      var minHeight = 0,\n        height = 0;\n      for (var i = 0, l = rowHeights.length; i < l; i++) {\n        var row = rowHeights[i];\n\n        if (this.getRowFlex(i) > 0) {\n          minHeight += row.minHeight;\n        } else {\n          minHeight += row.height;\n        }\n\n        height += row.height;\n      }\n\n      var spacingX = this.getSpacingX() * (colWidths.length - 1);\n      var spacingY = this.getSpacingY() * (rowHeights.length - 1);\n\n      var hint = {\n        minWidth: minWidth + spacingX,\n        width: width + spacingX,\n        minHeight: minHeight + spacingY,\n        height: height + spacingY\n      };\n\n      return hint;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCT\n  *****************************************************************************\n  */\n\n  destruct() {\n    this.__grid =\n      this.__rowData =\n      this.__colData =\n      this.__colSpans =\n      this.__rowSpans =\n      this.__colWidths =\n      this.__rowHeights =\n        null;\n  }\n});\n"
  ]
}