{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/core/MMultiSelectionHandling.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "clazz",
    "SELECTION_MANAGER",
    "manager",
    "__manager",
    "addListener",
    "handlePointerDown",
    "handleTap",
    "handlePointerOver",
    "handlePointerMove",
    "handleLoseCapture",
    "handleKeyPress",
    "handleAddItem",
    "handleRemoveItem",
    "_onSelectionChange",
    "events",
    "changeValue",
    "changeSelection",
    "properties",
    "selectionMode",
    "check",
    "init",
    "apply",
    "dragSelection",
    "quickSelection",
    "members",
    "__inOnSelectionChange",
    "setValue",
    "items",
    "clearSelection",
    "setSelection",
    "e",
    "getValue",
    "getSelection",
    "resetValue",
    "selectAll",
    "isSelected",
    "item",
    "ui",
    "core",
    "Widget",
    "contains",
    "Error",
    "isItemSelected",
    "addToSelection",
    "addItem",
    "removeFromSelection",
    "removeItem",
    "selectRange",
    "begin",
    "end",
    "selectItemRange",
    "resetSelection",
    "i",
    "length",
    "currentSelection",
    "lang",
    "Array",
    "equals",
    "replaceSelection",
    "getSortedSelection",
    "isSelectionEmpty",
    "getSelectionContext",
    "_getManager",
    "getSelectables",
    "all",
    "invertSelection",
    "_getLeadItem",
    "mode",
    "getMode",
    "getSelectedItem",
    "getLeadItem",
    "_applySelectionMode",
    "value",
    "old",
    "setMode",
    "_applyDragSelection",
    "setDrag",
    "_applyQuickSelection",
    "setQuick",
    "fireDataEvent",
    "getData",
    "getOldData",
    "destruct",
    "_disposeObjects",
    "MMultiSelectionHandling"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * This mixin links all methods to manage the multi selection from the\n * internal selection manager to the widget.\n */\nqx.Mixin.define(\"qx.ui.core.MMultiSelectionHandling\", {\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    // Create selection manager\n    var clazz = this.SELECTION_MANAGER;\n    var manager = (this.__manager = new clazz(this));\n\n    // Add widget event listeners\n    this.addListener(\"pointerdown\", manager.handlePointerDown, manager);\n    this.addListener(\"tap\", manager.handleTap, manager);\n    this.addListener(\"pointerover\", manager.handlePointerOver, manager);\n    this.addListener(\"pointermove\", manager.handlePointerMove, manager);\n    this.addListener(\"losecapture\", manager.handleLoseCapture, manager);\n    this.addListener(\"keypress\", manager.handleKeyPress, manager);\n\n    this.addListener(\"addItem\", manager.handleAddItem, manager);\n    this.addListener(\"removeItem\", manager.handleRemoveItem, manager);\n\n    // Add manager listeners\n    manager.addListener(\"changeSelection\", this._onSelectionChange, this);\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Fires after the value was modified */\n    changeValue: \"qx.event.type.Data\",\n\n    /** Fires after the selection was modified */\n    changeSelection: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * The selection mode to use.\n     *\n     * For further details please have a look at:\n     * {@link qx.ui.core.selection.Abstract#mode}\n     */\n    selectionMode: {\n      check: [\"single\", \"multi\", \"additive\", \"one\"],\n      init: \"single\",\n      apply: \"_applySelectionMode\"\n    },\n\n    /**\n     * Enable drag selection (multi selection of items through\n     * dragging the pointer in pressed states).\n     *\n     * Only possible for the selection modes <code>multi</code> and <code>additive</code>\n     */\n    dragSelection: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyDragSelection\"\n    },\n\n    /**\n     * Enable quick selection mode, where no tap is needed to change the selection.\n     *\n     * Only possible for the modes <code>single</code> and <code>one</code>.\n     */\n    quickSelection: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyQuickSelection\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /** @type {qx.ui.core.selection.Abstract} The selection manager */\n    __manager: null,\n\n    /** @type {Boolean} used to control recursion in onSelectionChange */\n    __inOnSelectionChange: false,\n\n    /*\n    ---------------------------------------------------------------------------\n      USER API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * setValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @param items {null|qx.ui.core.Widget[]} Items to select.\n     * @returns {null|TypeError} The status of this operation.\n     */\n    setValue(items) {\n      if (null === items) {\n        this.__manager.clearSelection();\n        return null;\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        for (var i = 0, l = items.length; i < l; i++) {\n          if (!(items[i] instanceof qx.ui.core.Widget)) {\n            return new TypeError(\n              \"Some items in provided argument are not widgets\"\n            );\n          }\n        }\n      }\n\n      try {\n        this.setSelection(items);\n        return null;\n      } catch (e) {\n        return e;\n      }\n    },\n\n    /**\n     * getValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @returns {qx.ui.core.Widget[]} The selected widgets or null if there are none.\n     */\n    getValue() {\n      return this.__manager.getSelection();\n    },\n\n    /**\n     * resetValue implements part of the {@link qx.ui.form.IField} interface.\n     */\n    resetValue() {\n      this.__manager.clearSelection();\n    },\n\n    /**\n     * Selects all items of the managed object.\n     */\n    selectAll() {\n      this.__manager.selectAll();\n    },\n\n    /**\n     * Detects whether the given item is currently selected.\n     *\n     * @param item {qx.ui.core.Widget} Any valid selectable item.\n     * @return {Boolean} Whether the item is selected.\n     * @throws {Error} if the item is not a child element.\n     */\n    isSelected(item) {\n      if (!qx.ui.core.Widget.contains(this, item)) {\n        throw new Error(\n          \"Could not test if \" +\n            item +\n            \" is selected, because it is not a child element!\"\n        );\n      }\n\n      return this.__manager.isItemSelected(item);\n    },\n\n    /**\n     * Adds the given item to the existing selection.\n     *\n     * Use {@link #setSelection} instead if you want to replace\n     * the current selection.\n     *\n     * @param item {qx.ui.core.Widget} Any valid item.\n     * @throws {Error} if the item is not a child element.\n     */\n    addToSelection(item) {\n      if (!qx.ui.core.Widget.contains(this, item)) {\n        throw new Error(\n          \"Could not add + \" +\n            item +\n            \" to selection, because it is not a child element!\"\n        );\n      }\n\n      this.__manager.addItem(item);\n    },\n\n    /**\n     * Removes the given item from the selection.\n     *\n     * Use {@link #resetSelection} when you want to clear\n     * the whole selection at once.\n     *\n     * @param item {qx.ui.core.Widget} Any valid item\n     * @throws {Error} if the item is not a child element.\n     */\n    removeFromSelection(item) {\n      if (!qx.ui.core.Widget.contains(this, item)) {\n        throw new Error(\n          \"Could not remove \" +\n            item +\n            \" from selection, because it is not a child element!\"\n        );\n      }\n\n      this.__manager.removeItem(item);\n    },\n\n    /**\n     * Selects an item range between two given items.\n     *\n     * @param begin {qx.ui.core.Widget} Item to start with\n     * @param end {qx.ui.core.Widget} Item to end at\n     */\n    selectRange(begin, end) {\n      this.__manager.selectItemRange(begin, end);\n    },\n\n    /**\n     * Clears the whole selection at once. Also\n     * resets the lead and anchor items and their\n     * styles.\n     */\n    resetSelection() {\n      this.__manager.clearSelection();\n    },\n\n    /**\n     * Replaces current selection with the given items.\n     *\n     * @param items {qx.ui.core.Widget[]} Items to select.\n     * @throws {Error} if one of the items is not a child element and if\n     *    the mode is set to <code>single</code> or <code>one</code> and\n     *    the items contains more than one item.\n     */\n    setSelection(items) {\n      // Block recursion so that when selection changes modelSelection, the modelSelection\n      //  cannot change selection again; this is important because modelSelection does not\n      //  necessarily match selection, for example when the item's model properties are\n      //  null.\n      if (this.__inOnSelectionChange) {\n        return;\n      }\n      for (var i = 0; i < items.length; i++) {\n        if (!qx.ui.core.Widget.contains(this, items[i])) {\n          throw new Error(\n            \"Could not select \" +\n              items[i] +\n              \", because it is not a child element!\"\n          );\n        }\n      }\n\n      if (items.length === 0) {\n        this.resetSelection();\n      } else {\n        var currentSelection = this.getSelection();\n        if (!qx.lang.Array.equals(currentSelection, items)) {\n          this.__manager.replaceSelection(items);\n        }\n      }\n    },\n\n    /**\n     * Returns an array of currently selected items.\n     *\n     * Note: The result is only a set of selected items, so the order can\n     * differ from the sequence in which the items were added.\n     *\n     * @return {qx.ui.core.Widget[]} List of items.\n     */\n    getSelection() {\n      return this.__manager.getSelection();\n    },\n\n    /**\n     * Returns an array of currently selected items sorted\n     * by their index in the container.\n     *\n     * @return {qx.ui.core.Widget[]} Sorted list of items\n     */\n    getSortedSelection() {\n      return this.__manager.getSortedSelection();\n    },\n\n    /**\n     * Whether the selection is empty\n     *\n     * @return {Boolean} Whether the selection is empty\n     */\n    isSelectionEmpty() {\n      return this.__manager.isSelectionEmpty();\n    },\n\n    /**\n     * Returns the last selection context.\n     *\n     * @return {String | null} One of <code>tap</code>, <code>quick</code>,\n     *    <code>drag</code> or <code>key</code> or <code>null</code>.\n     */\n    getSelectionContext() {\n      return this.__manager.getSelectionContext();\n    },\n\n    /**\n     * Returns the internal selection manager. Use this with\n     * caution!\n     *\n     * @return {qx.ui.core.selection.Abstract} The selection manager\n     */\n    _getManager() {\n      return this.__manager;\n    },\n\n    /**\n     * Returns all elements which are selectable.\n     *\n     * @param all {Boolean} true for all selectables, false for the\n     *   selectables the user can interactively select\n     * @return {qx.ui.core.Widget[]} The contained items.\n     */\n    getSelectables(all) {\n      return this.__manager.getSelectables(all);\n    },\n\n    /**\n     * Invert the selection. Select the non selected and deselect the selected.\n     */\n    invertSelection() {\n      this.__manager.invertSelection();\n    },\n\n    /**\n     * Returns the current lead item. Generally the item which was last modified\n     * by the user (tapped on etc.)\n     *\n     * @return {qx.ui.core.Widget} The lead item or <code>null</code>\n     */\n    _getLeadItem() {\n      var mode = this.__manager.getMode();\n\n      if (mode === \"single\" || mode === \"one\") {\n        return this.__manager.getSelectedItem();\n      } else {\n        return this.__manager.getLeadItem();\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applySelectionMode(value, old) {\n      this.__manager.setMode(value);\n    },\n\n    // property apply\n    _applyDragSelection(value, old) {\n      this.__manager.setDrag(value);\n    },\n\n    // property apply\n    _applyQuickSelection(value, old) {\n      this.__manager.setQuick(value);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Event listener for <code>changeSelection</code> event on selection manager.\n     *\n     * @param e {qx.event.type.Data} Data event\n     */\n    _onSelectionChange(e) {\n      if (this.__inOnSelectionChange) {\n        return;\n      }\n      this.__inOnSelectionChange = true;\n      try {\n        this.fireDataEvent(\"changeSelection\", e.getData(), e.getOldData());\n        this.fireDataEvent(\"changeValue\", e.getData(), e.getOldData());\n      } finally {\n        this.__inOnSelectionChange = false;\n      }\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._disposeObjects(\"__manager\");\n  }\n});\n"
  ]
}