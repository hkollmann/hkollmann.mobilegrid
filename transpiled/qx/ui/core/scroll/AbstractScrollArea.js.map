{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/core/scroll/AbstractScrollArea.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "scroll",
    "MScrollBarFactory",
    "MRoll",
    "MDragDropScrolling",
    "type",
    "statics",
    "DEFAULT_SCROLLBAR_WIDTH",
    "construct",
    "Environment",
    "get",
    "_setLayout",
    "layout",
    "Canvas",
    "grid",
    "Grid",
    "setColumnFlex",
    "setRowFlex",
    "size",
    "AbstractScrollArea",
    "set",
    "minHeight",
    "minWidth",
    "_addRollHandling",
    "events",
    "scrollAnimationXEnd",
    "scrollAnimationYEnd",
    "properties",
    "appearance",
    "refine",
    "init",
    "width",
    "height",
    "scrollbarX",
    "check",
    "themeable",
    "apply",
    "scrollbarY",
    "scrollbar",
    "group",
    "members",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "ScrollPane",
    "addListener",
    "_computeScrollbars",
    "_onScrollPaneX",
    "_onScrollPaneY",
    "_add",
    "edge",
    "row",
    "column",
    "_createScrollBar",
    "setMinWidth",
    "exclude",
    "_onScrollBarX",
    "_onChangeScrollbarXVisibility",
    "_onScrollAnimationEnd",
    "bind",
    "setMinHeight",
    "bottom",
    "right",
    "left",
    "_onScrollBarY",
    "_onChangeScrollbarYVisibility",
    "top",
    "setWidth",
    "setHeight",
    "getPaneSize",
    "getChildControl",
    "getInnerSize",
    "getItemTop",
    "item",
    "getItemBottom",
    "getItemLeft",
    "getItemRight",
    "scrollToX",
    "value",
    "duration",
    "queue",
    "Manager",
    "flush",
    "scrollTo",
    "scrollByX",
    "scrollBy",
    "getScrollX",
    "getPosition",
    "scrollToY",
    "scrollByY",
    "getScrollY",
    "stopScrollAnimationX",
    "stopScrollAnimation",
    "stopScrollAnimationY",
    "direction",
    "fireEvent",
    "e",
    "getData",
    "updatePosition",
    "showX",
    "_isChildControlVisible",
    "showY",
    "_showChildControl",
    "_excludeChildControl",
    "pane",
    "content",
    "getChildren",
    "innerSize",
    "paneSize",
    "scrollSize",
    "getScrollSize",
    "getScrollbarX",
    "getScrollbarY",
    "barX",
    "show",
    "setMaximum",
    "Math",
    "max",
    "setKnobFactor",
    "barY"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The ScrollArea provides a container widget with on demand scroll bars\n * if the content size exceeds the size of the container.\n *\n * @childControl pane {qx.ui.core.scroll.ScrollPane} pane which holds the content to scroll\n * @childControl scrollbar-x {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar} horizontal scrollbar\n * @childControl scrollbar-y {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar} vertical scrollbar\n * @childControl corner {qx.ui.core.Widget} corner where no scrollbar is shown\n */\nqx.Class.define(\"qx.ui.core.scroll.AbstractScrollArea\", {\n  extend: qx.ui.core.Widget,\n  include: [\n    qx.ui.core.scroll.MScrollBarFactory,\n    qx.ui.core.scroll.MRoll,\n    qx.ui.core.MDragDropScrolling\n  ],\n\n  type: \"abstract\",\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * The default width which is used for the width of the scroll bar if\n     * overlaid.\n     */\n    DEFAULT_SCROLLBAR_WIDTH: 14\n  },\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n\n    if (qx.core.Environment.get(\"os.scrollBarOverlayed\")) {\n      // use a plain canvas to overlay the scroll bars\n      this._setLayout(new qx.ui.layout.Canvas());\n    } else {\n      // Create 'fixed' grid layout\n      var grid = new qx.ui.layout.Grid();\n      grid.setColumnFlex(0, 1);\n      grid.setRowFlex(0, 1);\n      this._setLayout(grid);\n    }\n\n    // since the scroll container disregards the min size of the scrollbars\n    // we have to set the min size of the scroll area to ensure that the\n    // scrollbars always have an usable size.\n    var size =\n      qx.ui.core.scroll.AbstractScrollArea.DEFAULT_SCROLLBAR_WIDTH * 2 + 14;\n    this.set({ minHeight: size, minWidth: size });\n\n    // Roll listener for scrolling\n    this._addRollHandling();\n  },\n\n  events: {\n    /** Fired as soon as the scroll animation in X direction ends. */\n    scrollAnimationXEnd: \"qx.event.type.Event\",\n\n    /** Fired as soon as the scroll animation in Y direction ends. */\n    scrollAnimationYEnd: \"qx.event.type.Event\"\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    // overridden\n    appearance: {\n      refine: true,\n      init: \"scrollarea\"\n    },\n\n    // overridden\n    width: {\n      refine: true,\n      init: 0\n    },\n\n    // overridden\n    height: {\n      refine: true,\n      init: 0\n    },\n\n    /**\n     * The policy, when the horizontal scrollbar should be shown.\n     * <ul>\n     *   <li><b>auto</b>: Show scrollbar on demand</li>\n     *   <li><b>on</b>: Always show the scrollbar</li>\n     *   <li><b>off</b>: Never show the scrollbar</li>\n     * </ul>\n     */\n    scrollbarX: {\n      check: [\"auto\", \"on\", \"off\"],\n      init: \"auto\",\n      themeable: true,\n      apply: \"_computeScrollbars\"\n    },\n\n    /**\n     * The policy, when the horizontal scrollbar should be shown.\n     * <ul>\n     *   <li><b>auto</b>: Show scrollbar on demand</li>\n     *   <li><b>on</b>: Always show the scrollbar</li>\n     *   <li><b>off</b>: Never show the scrollbar</li>\n     * </ul>\n     */\n    scrollbarY: {\n      check: [\"auto\", \"on\", \"off\"],\n      init: \"auto\",\n      themeable: true,\n      apply: \"_computeScrollbars\"\n    },\n\n    /**\n     * Group property, to set the overflow of both scroll bars.\n     */\n    scrollbar: {\n      group: [\"scrollbarX\", \"scrollbarY\"]\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /*\n    ---------------------------------------------------------------------------\n      CHILD CONTROL SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _createChildControlImpl(id, hash) {\n      var control;\n\n      switch (id) {\n        case \"pane\":\n          control = new qx.ui.core.scroll.ScrollPane();\n\n          control.addListener(\"update\", this._computeScrollbars, this);\n          control.addListener(\"scrollX\", this._onScrollPaneX, this);\n          control.addListener(\"scrollY\", this._onScrollPaneY, this);\n\n          if (qx.core.Environment.get(\"os.scrollBarOverlayed\")) {\n            this._add(control, { edge: 0 });\n          } else {\n            this._add(control, { row: 0, column: 0 });\n          }\n          break;\n\n        case \"scrollbar-x\":\n          control = this._createScrollBar(\"horizontal\");\n          control.setMinWidth(0);\n\n          control.exclude();\n          control.addListener(\"scroll\", this._onScrollBarX, this);\n          control.addListener(\n            \"changeVisibility\",\n            this._onChangeScrollbarXVisibility,\n            this\n          );\n\n          control.addListener(\n            \"scrollAnimationEnd\",\n            this._onScrollAnimationEnd.bind(this, \"X\")\n          );\n\n          if (qx.core.Environment.get(\"os.scrollBarOverlayed\")) {\n            control.setMinHeight(\n              qx.ui.core.scroll.AbstractScrollArea.DEFAULT_SCROLLBAR_WIDTH\n            );\n\n            this._add(control, { bottom: 0, right: 0, left: 0 });\n          } else {\n            this._add(control, { row: 1, column: 0 });\n          }\n          break;\n\n        case \"scrollbar-y\":\n          control = this._createScrollBar(\"vertical\");\n          control.setMinHeight(0);\n\n          control.exclude();\n          control.addListener(\"scroll\", this._onScrollBarY, this);\n          control.addListener(\n            \"changeVisibility\",\n            this._onChangeScrollbarYVisibility,\n            this\n          );\n\n          control.addListener(\n            \"scrollAnimationEnd\",\n            this._onScrollAnimationEnd.bind(this, \"Y\")\n          );\n\n          if (qx.core.Environment.get(\"os.scrollBarOverlayed\")) {\n            control.setMinWidth(\n              qx.ui.core.scroll.AbstractScrollArea.DEFAULT_SCROLLBAR_WIDTH\n            );\n\n            this._add(control, { right: 0, bottom: 0, top: 0 });\n          } else {\n            this._add(control, { row: 0, column: 1 });\n          }\n          break;\n\n        case \"corner\":\n          control = new qx.ui.core.Widget();\n          control.setWidth(0);\n          control.setHeight(0);\n          control.exclude();\n\n          if (!qx.core.Environment.get(\"os.scrollBarOverlayed\")) {\n            // only add for non overlayed scroll bars\n            this._add(control, { row: 1, column: 1 });\n          }\n          break;\n      }\n\n      return control || super._createChildControlImpl(id);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PANE SIZE\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the dimensions of the pane.\n     *\n     * @return {Map|null} The pane dimension in pixel. Contains\n     *    the keys <code>width</code> and <code>height</code>.\n     */\n    getPaneSize() {\n      return this.getChildControl(\"pane\").getInnerSize();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      ITEM LOCATION SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the top offset of the given item in relation to the\n     * inner height of this widget.\n     *\n     * @param item {qx.ui.core.Widget} Item to query\n     * @return {Integer} Top offset\n     */\n    getItemTop(item) {\n      return this.getChildControl(\"pane\").getItemTop(item);\n    },\n\n    /**\n     * Returns the top offset of the end of the given item in relation to the\n     * inner height of this widget.\n     *\n     * @param item {qx.ui.core.Widget} Item to query\n     * @return {Integer} Top offset\n     */\n    getItemBottom(item) {\n      return this.getChildControl(\"pane\").getItemBottom(item);\n    },\n\n    /**\n     * Returns the left offset of the given item in relation to the\n     * inner width of this widget.\n     *\n     * @param item {qx.ui.core.Widget} Item to query\n     * @return {Integer} Top offset\n     */\n    getItemLeft(item) {\n      return this.getChildControl(\"pane\").getItemLeft(item);\n    },\n\n    /**\n     * Returns the left offset of the end of the given item in relation to the\n     * inner width of this widget.\n     *\n     * @param item {qx.ui.core.Widget} Item to query\n     * @return {Integer} Right offset\n     */\n    getItemRight(item) {\n      return this.getChildControl(\"pane\").getItemRight(item);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SCROLL SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Scrolls the element's content to the given left coordinate\n     *\n     * @param value {Integer} The vertical position to scroll to.\n     * @param duration {Number?} The time in milliseconds the scroll to should take.\n     */\n    scrollToX(value, duration) {\n      // First flush queue before scroll\n      qx.ui.core.queue.Manager.flush();\n\n      this.getChildControl(\"scrollbar-x\").scrollTo(value, duration);\n    },\n\n    /**\n     * Scrolls the element's content by the given left offset\n     *\n     * @param value {Integer} The vertical position to scroll to.\n     * @param duration {Number?} The time in milliseconds the scroll to should take.\n     */\n    scrollByX(value, duration) {\n      // First flush queue before scroll\n      qx.ui.core.queue.Manager.flush();\n\n      this.getChildControl(\"scrollbar-x\").scrollBy(value, duration);\n    },\n\n    /**\n     * Returns the scroll left position of the content\n     *\n     * @return {Integer} Horizontal scroll position\n     */\n    getScrollX() {\n      var scrollbar = this.getChildControl(\"scrollbar-x\", true);\n      return scrollbar ? scrollbar.getPosition() : 0;\n    },\n\n    /**\n     * Scrolls the element's content to the given top coordinate\n     *\n     * @param value {Integer} The horizontal position to scroll to.\n     * @param duration {Number?} The time in milliseconds the scroll to should take.\n     */\n    scrollToY(value, duration) {\n      // First flush queue before scroll\n      qx.ui.core.queue.Manager.flush();\n\n      this.getChildControl(\"scrollbar-y\").scrollTo(value, duration);\n    },\n\n    /**\n     * Scrolls the element's content by the given top offset\n     *\n     * @param value {Integer} The horizontal position to scroll to.\n     * @param duration {Number?} The time in milliseconds the scroll to should take.\n     */\n    scrollByY(value, duration) {\n      // First flush queue before scroll\n      qx.ui.core.queue.Manager.flush();\n\n      this.getChildControl(\"scrollbar-y\").scrollBy(value, duration);\n    },\n\n    /**\n     * Returns the scroll top position of the content\n     *\n     * @return {Integer} Vertical scroll position\n     */\n    getScrollY() {\n      var scrollbar = this.getChildControl(\"scrollbar-y\", true);\n      return scrollbar ? scrollbar.getPosition() : 0;\n    },\n\n    /**\n     * In case a scroll animation is currently running in X direction,\n     * it will be stopped. If not, the method does nothing.\n     */\n    stopScrollAnimationX() {\n      var scrollbar = this.getChildControl(\"scrollbar-x\", true);\n      if (scrollbar) {\n        scrollbar.stopScrollAnimation();\n      }\n    },\n\n    /**\n     * In case a scroll animation is currently running in X direction,\n     * it will be stopped. If not, the method does nothing.\n     */\n    stopScrollAnimationY() {\n      var scrollbar = this.getChildControl(\"scrollbar-y\", true);\n      if (scrollbar) {\n        scrollbar.stopScrollAnimation();\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT LISTENERS\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Event handler for the scroll animation end event for both scroll bars.\n     *\n     * @param direction {String} Either \"X\" or \"Y\".\n     */\n    _onScrollAnimationEnd(direction) {\n      this.fireEvent(\"scrollAnimation\" + direction + \"End\");\n    },\n\n    /**\n     * Event handler for the scroll event of the horizontal scrollbar\n     *\n     * @param e {qx.event.type.Data} The scroll event object\n     */\n    _onScrollBarX(e) {\n      this.getChildControl(\"pane\").scrollToX(e.getData());\n    },\n\n    /**\n     * Event handler for the scroll event of the vertical scrollbar\n     *\n     * @param e {qx.event.type.Data} The scroll event object\n     */\n    _onScrollBarY(e) {\n      this.getChildControl(\"pane\").scrollToY(e.getData());\n    },\n\n    /**\n     * Event handler for the horizontal scroll event of the pane\n     *\n     * @param e {qx.event.type.Data} The scroll event object\n     */\n    _onScrollPaneX(e) {\n      var scrollbar = this.getChildControl(\"scrollbar-x\");\n      if (scrollbar) {\n        scrollbar.updatePosition(e.getData());\n      }\n    },\n\n    /**\n     * Event handler for the vertical scroll event of the pane\n     *\n     * @param e {qx.event.type.Data} The scroll event object\n     */\n    _onScrollPaneY(e) {\n      var scrollbar = this.getChildControl(\"scrollbar-y\");\n      if (scrollbar) {\n        scrollbar.updatePosition(e.getData());\n      }\n    },\n\n    /**\n     * Event handler for visibility changes of horizontal scrollbar.\n     *\n     * @param e {qx.event.type.Event} Property change event\n     */\n    _onChangeScrollbarXVisibility(e) {\n      var showX = this._isChildControlVisible(\"scrollbar-x\");\n      var showY = this._isChildControlVisible(\"scrollbar-y\");\n\n      if (!showX) {\n        this.scrollToX(0);\n      }\n\n      showX && showY\n        ? this._showChildControl(\"corner\")\n        : this._excludeChildControl(\"corner\");\n    },\n\n    /**\n     * Event handler for visibility changes of horizontal scrollbar.\n     *\n     * @param e {qx.event.type.Event} Property change event\n     */\n    _onChangeScrollbarYVisibility(e) {\n      var showX = this._isChildControlVisible(\"scrollbar-x\");\n      var showY = this._isChildControlVisible(\"scrollbar-y\");\n\n      if (!showY) {\n        this.scrollToY(0);\n      }\n\n      showX && showY\n        ? this._showChildControl(\"corner\")\n        : this._excludeChildControl(\"corner\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Computes the visibility state for scrollbars.\n     *\n     */\n    _computeScrollbars() {\n      var pane = this.getChildControl(\"pane\");\n      var content = pane.getChildren()[0];\n      if (!content) {\n        this._excludeChildControl(\"scrollbar-x\");\n        this._excludeChildControl(\"scrollbar-y\");\n        return;\n      }\n\n      var innerSize = this.getInnerSize();\n      var paneSize = pane.getInnerSize();\n      var scrollSize = pane.getScrollSize();\n\n      // if the widget has not yet been rendered, return and try again in the\n      // resize event\n      if (!paneSize || !scrollSize) {\n        return;\n      }\n\n      var scrollbarX = this.getScrollbarX();\n      var scrollbarY = this.getScrollbarY();\n\n      if (scrollbarX === \"auto\" && scrollbarY === \"auto\") {\n        // Check if the container is big enough to show\n        // the full content.\n        var showX = scrollSize.width > innerSize.width;\n        var showY = scrollSize.height > innerSize.height;\n\n        // Dependency check\n        // We need a special intelligence here when only one\n        // of the autosized axis requires a scrollbar\n        // This scrollbar may then influence the need\n        // for the other one as well.\n        if ((showX || showY) && !(showX && showY)) {\n          if (showX) {\n            showY = scrollSize.height > paneSize.height;\n          } else if (showY) {\n            showX = scrollSize.width > paneSize.width;\n          }\n        }\n      } else {\n        var showX = scrollbarX === \"on\";\n        var showY = scrollbarY === \"on\";\n\n        // Check auto values afterwards with already\n        // corrected client dimensions\n        if (\n          scrollSize.width > (showX ? paneSize.width : innerSize.width) &&\n          scrollbarX === \"auto\"\n        ) {\n          showX = true;\n        }\n\n        if (\n          scrollSize.height > (showX ? paneSize.height : innerSize.height) &&\n          scrollbarY === \"auto\"\n        ) {\n          showY = true;\n        }\n      }\n\n      // Update scrollbars\n      if (showX) {\n        var barX = this.getChildControl(\"scrollbar-x\");\n\n        barX.show();\n        barX.setMaximum(Math.max(0, scrollSize.width - paneSize.width));\n        barX.setKnobFactor(\n          scrollSize.width === 0 ? 0 : paneSize.width / scrollSize.width\n        );\n      } else {\n        this._excludeChildControl(\"scrollbar-x\");\n      }\n\n      if (showY) {\n        var barY = this.getChildControl(\"scrollbar-y\");\n\n        barY.show();\n        barY.setMaximum(Math.max(0, scrollSize.height - paneSize.height));\n        barY.setKnobFactor(\n          scrollSize.height === 0 ? 0 : paneSize.height / scrollSize.height\n        );\n      } else {\n        this._excludeChildControl(\"scrollbar-y\");\n      }\n    }\n  }\n});\n"
  ]
}