{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/core/LayoutItem.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "theme",
    "manager",
    "Meta",
    "getInstance",
    "addListener",
    "_onChangeTheme",
    "properties",
    "minWidth",
    "check",
    "nullable",
    "apply",
    "init",
    "themeable",
    "width",
    "event",
    "maxWidth",
    "minHeight",
    "height",
    "maxHeight",
    "allowGrowX",
    "allowShrinkX",
    "allowGrowY",
    "allowShrinkY",
    "allowStretchX",
    "group",
    "mode",
    "allowStretchY",
    "marginTop",
    "marginRight",
    "marginBottom",
    "marginLeft",
    "margin",
    "alignX",
    "alignY",
    "members",
    "Environment",
    "select",
    "props",
    "util",
    "PropertyUtil",
    "getAllProperties",
    "constructor",
    "name",
    "desc",
    "userValue",
    "getUserValue",
    "resetThemed",
    "__computedHeightForWidth",
    "__computedLayout",
    "__hasInvalidLayout",
    "__sizeHint",
    "__updateMargin",
    "__userBounds",
    "__layoutProperties",
    "getBounds",
    "clearSeparators",
    "renderSeparator",
    "separator",
    "bounds",
    "renderLayout",
    "left",
    "top",
    "isDisposed",
    "computed",
    "changes",
    "position",
    "size",
    "local",
    "getHeight",
    "_hasHeightForWidth",
    "flowHeight",
    "_getHeightForWidth",
    "ui",
    "queue",
    "Layout",
    "add",
    "isExcluded",
    "hasValidLayout",
    "scheduleLayoutUpdate",
    "invalidateLayoutCache",
    "getSizeHint",
    "compute",
    "hint",
    "_computeSizeHint",
    "getAllowGrowX",
    "getAllowShrinkX",
    "getAllowGrowY",
    "getAllowShrinkY",
    "getMinWidth",
    "getMinHeight",
    "getWidth",
    "getMaxWidth",
    "Infinity",
    "getMaxHeight",
    "layout",
    "_getLayout",
    "hasHeightForWidth",
    "getHeightForWidth",
    "_applyMargin",
    "parent",
    "$$parent",
    "updateLayoutProperties",
    "_applyAlign",
    "_applyDimension",
    "_applyStretching",
    "hasUserBounds",
    "setUserBounds",
    "resetUserBounds",
    "__emptyProperties",
    "setLayoutProperties",
    "storage",
    "getLayoutParent",
    "key",
    "getLayoutProperties",
    "clearLayoutProperties",
    "invalidateChildrenCache",
    "getApplicationRoot",
    "Init",
    "getApplication",
    "getRoot",
    "setLayoutParent",
    "Visibility",
    "isRootWidget",
    "_getRoot",
    "clone",
    "lang",
    "destruct",
    "removeListener",
    "$$subparent",
    "LayoutItem"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The base class of all items, which should be laid out using a layout manager\n * {@link qx.ui.layout.Abstract}.\n */\nqx.Class.define(\"qx.ui.core.LayoutItem\", {\n  type: \"abstract\",\n  extend: qx.core.Object,\n\n  construct() {\n    super();\n\n    // dynamic theme switch\n    if (qx.core.Environment.get(\"qx.dyntheme\")) {\n      qx.theme.manager.Meta.getInstance().addListener(\n        \"changeTheme\",\n        this._onChangeTheme,\n        this\n      );\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /*\n    ---------------------------------------------------------------------------\n      DIMENSION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * The user provided minimal width.\n     *\n     * Also take a look at the related properties {@link #width} and {@link #maxWidth}.\n     */\n    minWidth: {\n      check: \"Integer\",\n      nullable: true,\n      apply: \"_applyDimension\",\n      init: null,\n      themeable: true\n    },\n\n    /**\n     * The <code>LayoutItem</code>'s preferred width.\n     *\n     * The computed width may differ from the given width due to\n     * stretching. Also take a look at the related properties\n     * {@link #minWidth} and {@link #maxWidth}.\n     */\n    width: {\n      check: \"Integer\",\n      event: \"changeWidth\",\n      nullable: true,\n      apply: \"_applyDimension\",\n      init: null,\n      themeable: true\n    },\n\n    /**\n     * The user provided maximal width.\n     *\n     * Also take a look at the related properties {@link #width} and {@link #minWidth}.\n     */\n    maxWidth: {\n      check: \"Integer\",\n      nullable: true,\n      apply: \"_applyDimension\",\n      init: null,\n      themeable: true\n    },\n\n    /**\n     * The user provided minimal height.\n     *\n     * Also take a look at the related properties {@link #height} and {@link #maxHeight}.\n     */\n    minHeight: {\n      check: \"Integer\",\n      nullable: true,\n      apply: \"_applyDimension\",\n      init: null,\n      themeable: true\n    },\n\n    /**\n     * The item's preferred height.\n     *\n     * The computed height may differ from the given height due to\n     * stretching. Also take a look at the related properties\n     * {@link #minHeight} and {@link #maxHeight}.\n     */\n    height: {\n      check: \"Integer\",\n      event: \"changeHeight\",\n      nullable: true,\n      apply: \"_applyDimension\",\n      init: null,\n      themeable: true\n    },\n\n    /**\n     * The user provided maximum height.\n     *\n     * Also take a look at the related properties {@link #height} and {@link #minHeight}.\n     */\n    maxHeight: {\n      check: \"Integer\",\n      nullable: true,\n      apply: \"_applyDimension\",\n      init: null,\n      themeable: true\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      STRETCHING\n    ---------------------------------------------------------------------------\n    */\n\n    /** Whether the item can grow horizontally. */\n    allowGrowX: {\n      check: \"Boolean\",\n      apply: \"_applyStretching\",\n      init: true,\n      themeable: true\n    },\n\n    /** Whether the item can shrink horizontally. */\n    allowShrinkX: {\n      check: \"Boolean\",\n      apply: \"_applyStretching\",\n      init: true,\n      themeable: true\n    },\n\n    /** Whether the item can grow vertically. */\n    allowGrowY: {\n      check: \"Boolean\",\n      apply: \"_applyStretching\",\n      init: true,\n      themeable: true\n    },\n\n    /** Whether the item can shrink vertically. */\n    allowShrinkY: {\n      check: \"Boolean\",\n      apply: \"_applyStretching\",\n      init: true,\n      themeable: true\n    },\n\n    /** Growing and shrinking in the horizontal direction */\n    allowStretchX: {\n      group: [\"allowGrowX\", \"allowShrinkX\"],\n      mode: \"shorthand\",\n      themeable: true\n    },\n\n    /** Growing and shrinking in the vertical direction */\n    allowStretchY: {\n      group: [\"allowGrowY\", \"allowShrinkY\"],\n      mode: \"shorthand\",\n      themeable: true\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      MARGIN\n    ---------------------------------------------------------------------------\n    */\n\n    /** Margin of the widget (top) */\n    marginTop: {\n      check: \"Integer\",\n      init: 0,\n      apply: \"_applyMargin\",\n      themeable: true\n    },\n\n    /** Margin of the widget (right) */\n    marginRight: {\n      check: \"Integer\",\n      init: 0,\n      apply: \"_applyMargin\",\n      themeable: true\n    },\n\n    /** Margin of the widget (bottom) */\n    marginBottom: {\n      check: \"Integer\",\n      init: 0,\n      apply: \"_applyMargin\",\n      themeable: true\n    },\n\n    /** Margin of the widget (left) */\n    marginLeft: {\n      check: \"Integer\",\n      init: 0,\n      apply: \"_applyMargin\",\n      themeable: true\n    },\n\n    /**\n     * The 'margin' property is a shorthand property for setting 'marginTop',\n     * 'marginRight', 'marginBottom' and 'marginLeft' at the same time.\n     *\n     * If four values are specified they apply to top, right, bottom and left respectively.\n     * If there is only one value, it applies to all sides, if there are two or three,\n     * the missing values are taken from the opposite side.\n     */\n    margin: {\n      group: [\"marginTop\", \"marginRight\", \"marginBottom\", \"marginLeft\"],\n      mode: \"shorthand\",\n      themeable: true\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      ALIGN\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Horizontal alignment of the item in the parent layout.\n     *\n     * Note: Item alignment is only supported by {@link LayoutItem} layouts where\n     * it would have a visual effect. Except for {@link Spacer}, which provides\n     * blank space for layouts, all classes that inherit {@link LayoutItem} support alignment.\n     */\n    alignX: {\n      check: [\"left\", \"center\", \"right\"],\n      nullable: true,\n      apply: \"_applyAlign\",\n      themeable: true\n    },\n\n    /**\n     * Vertical alignment of the item in the parent layout.\n     *\n     * Note: Item alignment is only supported by {@link LayoutItem} layouts where\n     * it would have a visual effect. Except for {@link Spacer}, which provides\n     * blank space for layouts, all classes that inherit {@link LayoutItem} support alignment.\n     */\n    alignY: {\n      check: [\"top\", \"middle\", \"bottom\", \"baseline\"],\n      nullable: true,\n      apply: \"_applyAlign\",\n      themeable: true\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n  /* eslint-disable @qooxdoo/qx/no-refs-in-members */\n  members: {\n    /*\n    ---------------------------------------------------------------------------\n      DYNAMIC THEME SWITCH SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Handler for the dynamic theme change.\n     * @signature function()\n     */\n    _onChangeTheme: qx.core.Environment.select(\"qx.dyntheme\", {\n      true() {\n        // reset all themeable properties\n        var props = qx.util.PropertyUtil.getAllProperties(this.constructor);\n        for (var name in props) {\n          var desc = props[name];\n          // only themeable properties not having a user value\n          if (desc.themeable) {\n            var userValue = qx.util.PropertyUtil.getUserValue(this, name);\n            if (userValue == null) {\n              qx.util.PropertyUtil.resetThemed(this, name);\n            }\n          }\n        }\n      },\n      false: null\n    }),\n\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT PROCESS\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {Integer} The computed height */\n    __computedHeightForWidth: null,\n\n    /** @type {Map} The computed size of the layout item */\n    __computedLayout: null,\n\n    /** @type {Boolean} Whether the current layout is valid */\n    __hasInvalidLayout: null,\n\n    /** @type {Map} Cached size hint */\n    __sizeHint: null,\n\n    /** @type {Boolean} Whether the margins have changed and must be updated */\n    __updateMargin: null,\n\n    /** @type {Map} user provided bounds of the widget, which override the layout manager */\n    __userBounds: null,\n\n    /** @type {Map} The item's layout properties */\n    __layoutProperties: null,\n\n    /**\n     * Get the computed location and dimension as computed by\n     * the layout manager.\n     *\n     * @return {Map|null} The location and dimensions in pixel\n     *    (if the layout is valid). Contains the keys\n     *    <code>width</code>, <code>height</code>, <code>left</code> and\n     *    <code>top</code>.\n     */\n    getBounds() {\n      return this.__userBounds || this.__computedLayout || null;\n    },\n\n    /**\n     * Reconfigure number of separators\n     */\n    clearSeparators() {\n      // empty template\n    },\n\n    /**\n     * Renders a separator between two children\n     *\n     * @param separator {String|qx.ui.decoration.IDecorator} The separator to render\n     * @param bounds {Map} Contains the left and top coordinate and the width and height\n     *    of the separator to render.\n     */\n    renderSeparator(separator, bounds) {\n      // empty template\n    },\n\n    /**\n     * Used by the layout engine to apply coordinates and dimensions.\n     *\n     * @param left {Integer} Any integer value for the left position,\n     *   always in pixels\n     * @param top {Integer} Any integer value for the top position,\n     *   always in pixels\n     * @param width {Integer} Any positive integer value for the width,\n     *   always in pixels\n     * @param height {Integer} Any positive integer value for the height,\n     *   always in pixels\n     * @return {Map} A map of which layout sizes changed.\n     */\n    renderLayout(left, top, width, height) {\n      // do not render if the layout item is already disposed\n      if (this.isDisposed()) {\n        return null;\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var msg =\n          \"Something went wrong with the layout of \" + this.toString() + \"!\";\n        this.assertInteger(left, \"Wrong 'left' argument. \" + msg);\n        this.assertInteger(top, \"Wrong 'top' argument. \" + msg);\n        this.assertInteger(width, \"Wrong 'width' argument. \" + msg);\n        this.assertInteger(height, \"Wrong 'height' argument. \" + msg);\n\n        // this.assertInRange(width, this.getMinWidth() || -1, this.getMaxWidth() || 32000);\n        // this.assertInRange(height, this.getMinHeight() || -1, this.getMaxHeight() || 32000);\n      }\n\n      // Detect size changes\n\n      // Dynamically create data structure for computed layout\n      var computed = this.__computedLayout;\n      if (!computed) {\n        computed = this.__computedLayout = {};\n      }\n\n      // Detect changes\n      var changes = {};\n\n      if (left !== computed.left || top !== computed.top) {\n        changes.position = true;\n\n        computed.left = left;\n        computed.top = top;\n      }\n\n      if (width !== computed.width || height !== computed.height) {\n        changes.size = true;\n\n        computed.width = width;\n        computed.height = height;\n      }\n\n      // Clear invalidation marker\n      if (this.__hasInvalidLayout) {\n        changes.local = true;\n        delete this.__hasInvalidLayout;\n      }\n\n      if (this.__updateMargin) {\n        changes.margin = true;\n        delete this.__updateMargin;\n      }\n\n      /*\n       * Height for width support\n       *\n       * Results into a re-layout which means that width/height is applied in the next iteration.\n       *\n       * Note that it is important that this happens after the above first pass at calculating a\n       * computed size because otherwise getBounds() will return null, and this will cause an\n       * issue where the existing size is expected to have already been applied by the layout.\n       * See https://github.com/qooxdoo/qooxdoo/issues/9553\n       */\n      if (this.getHeight() == null && this._hasHeightForWidth()) {\n        var flowHeight = this._getHeightForWidth(width);\n\n        if (\n          flowHeight != null &&\n          flowHeight !== this.__computedHeightForWidth\n        ) {\n          // This variable is used in the next computation of the size hint\n          this.__computedHeightForWidth = flowHeight;\n\n          // Re-add to layout queue\n          qx.ui.core.queue.Layout.add(this);\n        }\n      }\n\n      // Returns changes, especially for deriving classes\n      return changes;\n    },\n\n    /**\n     * Whether the item should be excluded from the layout\n     *\n     * @return {Boolean} Should the item be excluded by the layout\n     */\n    isExcluded() {\n      return false;\n    },\n\n    /**\n     * Whether the layout of this item (to layout the children)\n     * is valid.\n     *\n     * @return {Boolean} Returns <code>true</code>\n     */\n    hasValidLayout() {\n      return !this.__hasInvalidLayout;\n    },\n\n    /**\n     * Indicate that the item has layout changes and propagate this information\n     * up the item hierarchy.\n     *\n     */\n    scheduleLayoutUpdate() {\n      qx.ui.core.queue.Layout.add(this);\n    },\n\n    /**\n     * Called by the layout manager to mark this item's layout as invalid.\n     * This function should clear all layout relevant caches.\n     */\n    invalidateLayoutCache() {\n      // this.debug(\"Mark layout invalid!\");\n\n      this.__hasInvalidLayout = true;\n      this.__sizeHint = null;\n    },\n\n    /**\n     * A size hint computes the dimensions of a widget. It returns\n     * the recommended dimensions as well as the min and max dimensions.\n     * The min and max values already respect the stretching properties.\n     *\n     * <h3>Wording</h3>\n     * <ul>\n     * <li>User value: Value defined by the widget user, using the size properties</li>\n     *\n     * <li>Layout value: The value computed by {@link qx.ui.core.Widget#_getContentHint}</li>\n     * </ul>\n     *\n     * <h3>Algorithm</h3>\n     * <ul>\n     * <li>minSize: If the user min size is not null, the user value is taken,\n     *     otherwise the layout value is used.</li>\n     *\n     * <li>(preferred) size: If the user value is not null the user value is used,\n     *     otherwise the layout value is used.</li>\n     *\n     * <li>max size: Same as the preferred size.</li>\n     * </ul>\n     *\n     * @param compute {Boolean?true} Automatically compute size hint if currently not\n     *   cached?\n     * @return {Map} The map with the preferred width/height and the allowed\n     *   minimum and maximum values in cases where shrinking or growing\n     *   is required.\n     */\n    getSizeHint(compute) {\n      var hint = this.__sizeHint;\n      if (hint) {\n        return hint;\n      }\n\n      if (compute === false) {\n        return null;\n      }\n\n      // Compute as defined\n      hint = this.__sizeHint = this._computeSizeHint();\n\n      // Respect height for width\n      if (\n        this._hasHeightForWidth() &&\n        this.__computedHeightForWidth &&\n        this.getHeight() == null\n      ) {\n        hint.height = this.__computedHeightForWidth;\n      }\n\n      // normalize width\n      if (hint.minWidth > hint.width) {\n        hint.width = hint.minWidth;\n      }\n      if (hint.maxWidth < hint.width) {\n        hint.width = hint.maxWidth;\n      }\n\n      if (!this.getAllowGrowX()) {\n        hint.maxWidth = hint.width;\n      }\n      if (!this.getAllowShrinkX()) {\n        hint.minWidth = hint.width;\n      }\n\n      // normalize height\n      if (hint.minHeight > hint.height) {\n        hint.height = hint.minHeight;\n      }\n      if (hint.maxHeight < hint.height) {\n        hint.height = hint.maxHeight;\n      }\n\n      if (!this.getAllowGrowY()) {\n        hint.maxHeight = hint.height;\n      }\n      if (!this.getAllowShrinkY()) {\n        hint.minHeight = hint.height;\n      }\n\n      // Finally return\n      return hint;\n    },\n\n    /**\n     * Computes the size hint of the layout item.\n     *\n     * @return {Map} The map with the preferred width/height and the allowed\n     *   minimum and maximum values.\n     */\n    _computeSizeHint() {\n      var minWidth = this.getMinWidth() || 0;\n      var minHeight = this.getMinHeight() || 0;\n\n      var width = this.getWidth() || minWidth;\n      var height = this.getHeight() || minHeight;\n\n      var maxWidth = this.getMaxWidth() || Infinity;\n      var maxHeight = this.getMaxHeight() || Infinity;\n\n      return {\n        minWidth: minWidth,\n        width: width,\n        maxWidth: maxWidth,\n        minHeight: minHeight,\n        height: height,\n        maxHeight: maxHeight\n      };\n    },\n\n    /**\n     * Whether the item supports height for width.\n     *\n     * @return {Boolean} Whether the item supports height for width\n     */\n    _hasHeightForWidth() {\n      var layout = this._getLayout();\n      if (layout) {\n        return layout.hasHeightForWidth();\n      }\n      return false;\n    },\n\n    /**\n     * If an item wants to trade height for width it has to implement this\n     * method and return the preferred height of the item if it is resized to\n     * the given width. This function returns <code>null</code> if the item\n     * do not support height for width.\n     *\n     * @param width {Integer} The computed width\n     * @return {Integer} The desired height\n     */\n    _getHeightForWidth(width) {\n      var layout = this._getLayout();\n      if (layout && layout.hasHeightForWidth()) {\n        return layout.getHeightForWidth(width);\n      }\n\n      return null;\n    },\n\n    /**\n     * Get the widget's layout manager.\n     *\n     * @return {qx.ui.layout.Abstract} The widget's layout manager\n     */\n    _getLayout() {\n      return null;\n    },\n\n    // property apply\n    _applyMargin() {\n      this.__updateMargin = true;\n\n      var parent = this.$$parent;\n      if (parent) {\n        parent.updateLayoutProperties();\n      }\n    },\n\n    // property apply\n    _applyAlign() {\n      var parent = this.$$parent;\n      if (parent) {\n        parent.updateLayoutProperties();\n      }\n    },\n\n    // property apply\n    _applyDimension() {\n      qx.ui.core.queue.Layout.add(this);\n    },\n\n    // property apply\n    _applyStretching() {\n      qx.ui.core.queue.Layout.add(this);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SUPPORT FOR USER BOUNDARIES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Whether user bounds are set on this layout item\n     *\n     * @return {Boolean} Whether user bounds are set on this layout item\n     */\n    hasUserBounds() {\n      return !!this.__userBounds;\n    },\n\n    /**\n     * Set user bounds of the widget. Widgets with user bounds are sized and\n     * positioned manually and are ignored by any layout manager.\n     *\n     * @param left {Integer} left position (relative to the parent)\n     * @param top {Integer} top position (relative to the parent)\n     * @param width {Integer} width of the layout item\n     * @param height {Integer} height of the layout item\n     */\n    setUserBounds(left, top, width, height) {\n      if (!this.__userBounds) {\n        var parent = this.$$parent;\n        if (parent) {\n          parent.updateLayoutProperties();\n        }\n      }\n\n      this.__userBounds = {\n        left: left,\n        top: top,\n        width: width,\n        height: height\n      };\n\n      qx.ui.core.queue.Layout.add(this);\n    },\n\n    /**\n     * Clear the user bounds. After this call the layout item is laid out by\n     * the layout manager again.\n     *\n     */\n    resetUserBounds() {\n      if (this.__userBounds) {\n        delete this.__userBounds;\n\n        var parent = this.$$parent;\n        if (parent) {\n          parent.updateLayoutProperties();\n        }\n\n        qx.ui.core.queue.Layout.add(this);\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT PROPERTIES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @type {Map} Empty storage pool\n     *\n     * @lint ignoreReferenceField(__emptyProperties)\n     */\n    __emptyProperties: {},\n\n    /**\n     * Stores the given layout properties\n     *\n     * @param props {Map} Incoming layout property data\n     */\n    setLayoutProperties(props) {\n      if (props == null) {\n        return;\n      }\n\n      var storage = this.__layoutProperties;\n      if (!storage) {\n        storage = this.__layoutProperties = {};\n      }\n\n      // Check values through parent\n      var parent = this.getLayoutParent();\n      if (parent) {\n        parent.updateLayoutProperties(props);\n      }\n\n      // Copy over values\n      for (var key in props) {\n        if (props[key] == null) {\n          delete storage[key];\n        } else {\n          storage[key] = props[key];\n        }\n      }\n    },\n\n    /**\n     * Returns currently stored layout properties\n     *\n     * @return {Map} Returns a map of layout properties\n     */\n    getLayoutProperties() {\n      return this.__layoutProperties || this.__emptyProperties;\n    },\n\n    /**\n     * Removes all stored layout properties.\n     *\n     */\n    clearLayoutProperties() {\n      delete this.__layoutProperties;\n    },\n\n    /**\n     * Should be executed on every change of layout properties.\n     *\n     * This also includes \"virtual\" layout properties like margin or align\n     * when they have an effect on the parent and not on the widget itself.\n     *\n     * This method is always executed on the parent not on the\n     * modified widget itself.\n     *\n     * @param props {Map?null} Optional map of known layout properties\n     */\n    updateLayoutProperties(props) {\n      var layout = this._getLayout();\n      if (layout) {\n        // Verify values through underlying layout\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          if (props) {\n            for (var key in props) {\n              if (props[key] !== null) {\n                layout.verifyLayoutProperty(this, key, props[key]);\n              }\n            }\n          }\n        }\n\n        // Precomputed and cached children data need to be\n        // rebuild on upcoming (re-)layout.\n        layout.invalidateChildrenCache();\n      }\n\n      qx.ui.core.queue.Layout.add(this);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      HIERARCHY SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the application root\n     *\n     * @return {qx.ui.root.Abstract} The currently used root\n     */\n    getApplicationRoot() {\n      return qx.core.Init.getApplication().getRoot();\n    },\n\n    /**\n     * Get the items parent. Even if the item has been added to a\n     * layout, the parent is always a child of the containing item. The parent\n     * item may be <code>null</code>.\n     *\n     * @return {qx.ui.core.Widget|null} The parent.\n     */\n    getLayoutParent() {\n      return this.$$parent || null;\n    },\n\n    /**\n     * Set the parent\n     *\n     * @param parent {qx.ui.core.Widget|null} The new parent.\n     */\n    setLayoutParent(parent) {\n      if (this.$$parent === parent) {\n        return;\n      }\n\n      this.$$parent = parent || null;\n      qx.ui.core.queue.Visibility.add(this);\n    },\n\n    /**\n     * Whether the item is a root item and directly connected to\n     * the DOM.\n     *\n     * @return {Boolean} Whether the item a root item\n     */\n    isRootWidget() {\n      return false;\n    },\n\n    /**\n     * Returns the root item. The root item is the item which\n     * is directly inserted into an existing DOM node at HTML level.\n     * This is often the BODY element of a typical web page.\n     *\n     * @return {qx.ui.core.Widget} The root item (if available)\n     */\n    _getRoot() {\n      var parent = this;\n\n      while (parent) {\n        if (parent.isRootWidget()) {\n          return parent;\n        }\n\n        parent = parent.$$parent;\n      }\n\n      return null;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      CLONE SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    clone() {\n      var clone = super.clone();\n\n      var props = this.__layoutProperties;\n      if (props) {\n        clone.__layoutProperties = qx.lang.Object.clone(props);\n      }\n\n      return clone;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    // remove dynamic theme listener\n    if (qx.core.Environment.get(\"qx.dyntheme\")) {\n      qx.theme.manager.Meta.getInstance().removeListener(\n        \"changeTheme\",\n        this._onChangeTheme,\n        this\n      );\n    }\n    this.$$parent =\n      this.$$subparent =\n      this.__layoutProperties =\n      this.__computedLayout =\n      this.__userBounds =\n      this.__sizeHint =\n        null;\n  }\n});\n"
  ]
}