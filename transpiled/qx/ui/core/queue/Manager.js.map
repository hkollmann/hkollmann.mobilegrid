{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/core/queue/Manager.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "__scheduled",
    "__canceled",
    "__jobs",
    "__retries",
    "MAX_RETRIES",
    "scheduleFlush",
    "job",
    "self",
    "ui",
    "core",
    "queue",
    "Manager",
    "bom",
    "AnimationFrame",
    "request",
    "flush",
    "__inFlush",
    "jobs",
    "__executeAndRescheduleOnError",
    "visibility",
    "widget",
    "appearance",
    "layout",
    "element",
    "Widget",
    "e",
    "log",
    "Logger",
    "error",
    "Visibility",
    "Appearance",
    "Layout",
    "html",
    "Element",
    "dispose",
    "Dispose",
    "Environment",
    "select",
    "callback",
    "finallyCode",
    "Error",
    "__onUserAction",
    "defer",
    "_scheduleFlush",
    "event",
    "Registration",
    "addListener",
    "window",
    "get"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This class performs the auto flush of all layout relevant queues.\n *\n * @require(qx.event.handler.UserAction)\n */\nqx.Class.define(\"qx.ui.core.queue.Manager\", {\n  statics: {\n    /** @type {Boolean} Whether a flush was scheduled */\n    __scheduled: false,\n\n    /** @type {Boolean} true, if the flush should not be executed */\n    __canceled: false,\n\n    /** @type {Map} Internal data structure for the current job list */\n    __jobs: {},\n\n    /** @type {Integer} Counts how often a flush failed due to exceptions */\n    __retries: 0,\n\n    /** @type {Integer} Maximum number of flush retries */\n    MAX_RETRIES: 10,\n\n    /**\n     * Schedule a deferred flush of all queues.\n     *\n     * @param job {String} The job, which should be performed. Valid values are\n     *     <code>layout</code>, <code>decoration</code> and <code>element</code>.\n     */\n    scheduleFlush(job) {\n      // Sometimes not executed in context, fix this\n      var self = qx.ui.core.queue.Manager;\n\n      self.__jobs[job] = true;\n\n      if (!self.__scheduled) {\n        self.__canceled = false;\n\n        qx.bom.AnimationFrame.request(function () {\n          if (self.__canceled) {\n            self.__canceled = false;\n            return;\n          }\n          self.flush();\n        }, self);\n        self.__scheduled = true;\n      }\n    },\n\n    /**\n     * Flush all layout queues in the correct order. This function is called\n     * deferred if {@link #scheduleFlush} is called.\n     *\n     */\n    flush() {\n      // Sometimes not executed in context, fix this\n      var self = qx.ui.core.queue.Manager;\n\n      // Stop when already executed\n      if (self.__inFlush) {\n        return;\n      }\n\n      self.__inFlush = true;\n\n      // Cancel timeout if called manually\n      self.__canceled = true;\n\n      var jobs = self.__jobs;\n\n      self.__executeAndRescheduleOnError(\n        function () {\n          // Process jobs\n          while (\n            jobs.visibility ||\n            jobs.widget ||\n            jobs.appearance ||\n            jobs.layout ||\n            jobs.element\n          ) {\n            // No else blocks here because each flush can influence the following flushes!\n            if (jobs.widget) {\n              delete jobs.widget;\n\n              if (qx.core.Environment.get(\"qx.debug.ui.queue\")) {\n                try {\n                  qx.ui.core.queue.Widget.flush();\n                } catch (e) {\n                  qx.log.Logger.error(\n                    qx.ui.core.queue.Widget,\n                    \"Error in the 'Widget' queue:\" + e,\n                    e\n                  );\n                }\n              } else {\n                qx.ui.core.queue.Widget.flush();\n              }\n            }\n\n            if (jobs.visibility) {\n              delete jobs.visibility;\n\n              if (qx.core.Environment.get(\"qx.debug.ui.queue\")) {\n                try {\n                  qx.ui.core.queue.Visibility.flush();\n                } catch (e) {\n                  qx.log.Logger.error(\n                    qx.ui.core.queue.Visibility,\n                    \"Error in the 'Visibility' queue:\" + e,\n                    e\n                  );\n                }\n              } else {\n                qx.ui.core.queue.Visibility.flush();\n              }\n            }\n\n            if (jobs.appearance) {\n              delete jobs.appearance;\n\n              if (qx.core.Environment.get(\"qx.debug.ui.queue\")) {\n                try {\n                  qx.ui.core.queue.Appearance.flush();\n                } catch (e) {\n                  qx.log.Logger.error(\n                    qx.ui.core.queue.Appearance,\n                    \"Error in the 'Appearance' queue:\" + e,\n                    e\n                  );\n                }\n              } else {\n                qx.ui.core.queue.Appearance.flush();\n              }\n            }\n\n            // Defer layout as long as possible\n            if (jobs.widget || jobs.visibility || jobs.appearance) {\n              continue;\n            }\n\n            if (jobs.layout) {\n              delete jobs.layout;\n\n              if (qx.core.Environment.get(\"qx.debug.ui.queue\")) {\n                try {\n                  qx.ui.core.queue.Layout.flush();\n                } catch (e) {\n                  qx.log.Logger.error(\n                    qx.ui.core.queue.Layout,\n                    \"Error in the 'Layout' queue:\" + e,\n                    e\n                  );\n                }\n              } else {\n                qx.ui.core.queue.Layout.flush();\n              }\n            }\n\n            // Defer element as long as possible\n            if (\n              jobs.widget ||\n              jobs.visibility ||\n              jobs.appearance ||\n              jobs.layout\n            ) {\n              continue;\n            }\n\n            if (jobs.element) {\n              delete jobs.element;\n              qx.html.Element.flush();\n            }\n          }\n        },\n        function () {\n          self.__scheduled = false;\n        }\n      );\n\n      self.__executeAndRescheduleOnError(\n        function () {\n          if (jobs.dispose) {\n            delete jobs.dispose;\n\n            if (qx.core.Environment.get(\"qx.debug.ui.queue\")) {\n              try {\n                qx.ui.core.queue.Dispose.flush();\n              } catch (e) {\n                qx.log.Logger.error(\"Error in the 'Dispose' queue:\" + e);\n              }\n            } else {\n              qx.ui.core.queue.Dispose.flush();\n            }\n          }\n        },\n        function () {\n          // Clear flag\n          self.__inFlush = false;\n        }\n      );\n\n      // flush succeeded successfully. Reset retries\n      self.__retries = 0;\n    },\n\n    /**\n     * Executes the callback code. If the callback throws an error the current\n     * flush is cleaned up and rescheduled. The finally code is called after the\n     * callback even if it has thrown an exception.\n     *\n     * @signature function(callback, finallyCode)\n     * @param callback {Function} the callback function\n     * @param finallyCode {Function} function to be called in the finally block\n     */\n    __executeAndRescheduleOnError: qx.core.Environment.select(\"qx.debug\", {\n      true(callback, finallyCode) {\n        callback();\n        finallyCode();\n      },\n\n      false(callback, finallyCode) {\n        var self = qx.ui.core.queue.Manager;\n\n        try {\n          callback();\n        } catch (e) {\n          if (qx.core.Environment.get(\"qx.debug\")) {\n            qx.log.Logger.error(\n              \"Error while layout flush: \" +\n                e +\n                \"\\n\" +\n                \"Stack trace: \\n\" +\n                qx.dev.StackTrace.getStackTraceFromError(e)\n            );\n          }\n          self.__scheduled = false;\n          self.__inFlush = false;\n          self.__retries += 1;\n\n          if (self.__retries <= self.MAX_RETRIES) {\n            self.scheduleFlush();\n          } else {\n            throw new Error(\n              \"Fatal Error: Flush terminated \" +\n                (self.__retries - 1) +\n                \" times in a row\" +\n                \" due to exceptions in user code. The application has to be reloaded!\"\n            );\n          }\n\n          throw e;\n        } finally {\n          finallyCode();\n        }\n      }\n    }),\n\n    /**\n     * Handler used on touch devices to prevent the queue from manipulating\n     * the dom during the touch - mouse - ... event sequence. Usually, iOS\n     * devices fire a click event 300ms after the touchend event. So using\n     * 500ms should be a good value to be on the save side. This is necessary\n     * due to the fact that the event chain is stopped if a manipulation in\n     * the DOM is done.\n     *\n     * @param e {qx.event.type.Data} The user action data event.\n     */\n    __onUserAction(e) {\n      qx.ui.core.queue.Manager.flush();\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCT\n  *****************************************************************************\n  */\n\n  defer(statics) {\n    // Replace default scheduler for HTML element with local one.\n    // This is quite a hack, but allows us to force other flushes\n    // before the HTML element flush.\n    qx.html.Element._scheduleFlush = statics.scheduleFlush;\n\n    // Register to user action\n    qx.event.Registration.addListener(\n      window,\n      \"useraction\",\n      qx.core.Environment.get(\"event.touch\")\n        ? statics.__onUserAction\n        : statics.flush\n    );\n  }\n});\n"
  ]
}