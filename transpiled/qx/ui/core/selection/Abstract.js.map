{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/core/selection/Abstract.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "__selection",
    "events",
    "changeSelection",
    "properties",
    "mode",
    "check",
    "init",
    "apply",
    "drag",
    "quick",
    "readOnly",
    "members",
    "__scrollStepX",
    "__scrollStepY",
    "__scrollTimer",
    "__frameScroll",
    "__lastRelX",
    "__lastRelY",
    "__frameLocation",
    "__dragStartX",
    "__dragStartY",
    "__inCapture",
    "__pointerX",
    "__pointerY",
    "__moveDirectionX",
    "__moveDirectionY",
    "__selectionModified",
    "__selectionContext",
    "__leadItem",
    "__anchorItem",
    "__pointerDownOnSelected",
    "_userInteraction",
    "__oldScrollTop",
    "getSelectionContext",
    "selectAll",
    "getMode",
    "Error",
    "_selectAllItems",
    "_fireChange",
    "selectItem",
    "item",
    "_setSelectedItem",
    "_setLeadItem",
    "_setAnchorItem",
    "_scrollItemIntoView",
    "addItem",
    "_getAnchorItem",
    "_addToSelection",
    "removeItem",
    "_removeFromSelection",
    "isSelectionEmpty",
    "selected",
    "_applyDefaultSelection",
    "getLeadItem",
    "selectItemRange",
    "begin",
    "end",
    "_selectItemRange",
    "clearSelection",
    "_clearSelection",
    "replaceSelection",
    "items",
    "length",
    "_replaceMultiSelection",
    "getSelectedItem",
    "result",
    "_getSelectedItem",
    "undefined",
    "getSelection",
    "values",
    "getSortedSelection",
    "children",
    "getSelectables",
    "sel",
    "sort",
    "a",
    "b",
    "indexOf",
    "isItemSelected",
    "hash",
    "_selectableToHashCode",
    "lang",
    "isEmpty",
    "invertSelection",
    "selectables",
    "i",
    "_toggleInSelection",
    "value",
    "old",
    "_styleSelectable",
    "_isSelectable",
    "_getSelectableFromPointerEvent",
    "event",
    "target",
    "getTarget",
    "enabled",
    "_capture",
    "_releaseCapture",
    "_getLocation",
    "_getDimension",
    "_getSelectableLocationX",
    "_getSelectableLocationY",
    "_getScroll",
    "_scrollBy",
    "xoff",
    "yoff",
    "all",
    "_getSelectableRange",
    "item1",
    "item2",
    "_getFirstSelectable",
    "_getLastSelectable",
    "_getFirstVisibleSelectable",
    "_getLastVisibleSelectable",
    "_getRelatedSelectable",
    "relation",
    "_getPage",
    "lead",
    "up",
    "_applyMode",
    "handlePointerOver",
    "top",
    "getPointerType",
    "getQuick",
    "handlePointerDown",
    "isCtrlPressed",
    "Environment",
    "get",
    "isMetaPressed",
    "isShiftPressed",
    "getDrag",
    "getDocumentLeft",
    "left",
    "getDocumentTop",
    "handleTap",
    "isReadOnly",
    "anchor",
    "_cleanup",
    "handleLoseCapture",
    "handlePointerMove",
    "dragX",
    "dragY",
    "location",
    "right",
    "bottom",
    "Timer",
    "addListener",
    "_onInterval",
    "start",
    "_autoSelect",
    "stopPropagation",
    "handleAddItem",
    "e",
    "getData",
    "handleRemoveItem",
    "stop",
    "inner",
    "relX",
    "Math",
    "max",
    "min",
    "width",
    "relY",
    "height",
    "moveX",
    "nextX",
    "locationX",
    "moveY",
    "nextY",
    "locationY",
    "_deselectItemRange",
    "__navigationKeys",
    "Home",
    "Down",
    "Right",
    "PageDown",
    "End",
    "Up",
    "Left",
    "PageUp",
    "handleKeyPress",
    "current",
    "next",
    "key",
    "getKeyIdentifier",
    "consumed",
    "range",
    "l",
    "selection",
    "mapped",
    "__rangeToMap",
    "modified",
    "selectable",
    "incoming",
    "first",
    "last",
    "context",
    "fireDataEvent",
    "force",
    "destruct",
    "_disposeObjects",
    "ui",
    "Abstract"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * Generic selection manager to bring rich desktop like selection behavior\n * to widgets and low-level interactive controls.\n *\n * The selection handling supports both Shift and Ctrl/Meta modifies like\n * known from native applications.\n */\nqx.Class.define(\"qx.ui.core.selection.Abstract\", {\n  type: \"abstract\",\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n\n    // {Map} Internal selection storage\n    this.__selection = {};\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Fires after the selection was modified. Contains the selection under the data property. */\n    changeSelection: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * Selects the selection mode to use.\n     *\n     * * single: One or no element is selected\n     * * multi: Multi items could be selected. Also allows empty selections.\n     * * additive: Easy Web-2.0 selection mode. Allows multiple selections without modifier keys.\n     * * one: If possible always exactly one item is selected\n     */\n    mode: {\n      check: [\"single\", \"multi\", \"additive\", \"one\"],\n      init: \"single\",\n      apply: \"_applyMode\"\n    },\n\n    /**\n     * Enable drag selection (multi selection of items through\n     * dragging the pointer in pressed states).\n     *\n     * Only possible for the modes <code>multi</code> and <code>additive</code>\n     */\n    drag: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Enable quick selection mode, where no tap is needed to change the selection.\n     *\n     * Only possible for the modes <code>single</code> and <code>one</code>.\n     */\n    quick: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Whether the selection can be changed by user interaction\n     */\n    readOnly: {\n      check: \"Boolean\",\n      init: false\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n  /* eslint-disable @qooxdoo/qx/no-refs-in-members */\n  members: {\n    __scrollStepX: 0,\n    __scrollStepY: 0,\n    __scrollTimer: null,\n    __frameScroll: null,\n    __lastRelX: null,\n    __lastRelY: null,\n    __frameLocation: null,\n    __dragStartX: null,\n    __dragStartY: null,\n    __inCapture: null,\n    __pointerX: null,\n    __pointerY: null,\n    __moveDirectionX: null,\n    __moveDirectionY: null,\n    __selectionModified: null,\n    __selectionContext: null,\n    __leadItem: null,\n    __selection: null,\n    __anchorItem: null,\n    __pointerDownOnSelected: null,\n\n    // A flag that signals an user interaction, which means the selection change\n    // was triggered by pointer or keyboard [BUG #3344]\n    _userInteraction: false,\n\n    __oldScrollTop: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      USER APIS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the selection context. One of <code>tap</code>,\n     * <code>quick</code>, <code>drag</code> or <code>key</code> or\n     * <code>null</code>.\n     *\n     * @return {String} One of <code>tap</code>, <code>quick</code>,\n     *    <code>drag</code> or <code>key</code> or <code>null</code>\n     */\n    getSelectionContext() {\n      return this.__selectionContext;\n    },\n\n    /**\n     * Selects all items of the managed object.\n     *\n     */\n    selectAll() {\n      var mode = this.getMode();\n      if (mode == \"single\" || mode == \"one\") {\n        throw new Error(\"Can not select all items in selection mode: \" + mode);\n      }\n\n      this._selectAllItems();\n      this._fireChange();\n    },\n\n    /**\n     * Selects the given item. Replaces current selection\n     * completely with the new item.\n     *\n     * Use {@link #addItem} instead if you want to add new\n     * items to an existing selection.\n     *\n     * @param item {Object} Any valid item\n     */\n    selectItem(item) {\n      this._setSelectedItem(item);\n\n      var mode = this.getMode();\n      if (mode !== \"single\" && mode !== \"one\") {\n        this._setLeadItem(item);\n        this._setAnchorItem(item);\n      }\n\n      this._scrollItemIntoView(item);\n      this._fireChange();\n    },\n\n    /**\n     * Adds the given item to the existing selection.\n     *\n     * Use {@link #selectItem} instead if you want to replace\n     * the current selection.\n     *\n     * @param item {Object} Any valid item\n     */\n    addItem(item) {\n      var mode = this.getMode();\n      if (mode === \"single\" || mode === \"one\") {\n        this._setSelectedItem(item);\n      } else {\n        if (this._getAnchorItem() == null) {\n          this._setAnchorItem(item);\n        }\n\n        this._setLeadItem(item);\n        this._addToSelection(item);\n      }\n\n      this._scrollItemIntoView(item);\n      this._fireChange();\n    },\n\n    /**\n     * Removes the given item from the selection.\n     *\n     * Use {@link #clearSelection} when you want to clear\n     * the whole selection at once.\n     *\n     * @param item {Object} Any valid item\n     */\n    removeItem(item) {\n      this._removeFromSelection(item);\n\n      if (this.getMode() === \"one\" && this.isSelectionEmpty()) {\n        var selected = this._applyDefaultSelection();\n\n        // Do not fire any event in this case.\n        if (selected == item) {\n          return;\n        }\n      }\n\n      if (this.getLeadItem() == item) {\n        this._setLeadItem(null);\n      }\n\n      if (this._getAnchorItem() == item) {\n        this._setAnchorItem(null);\n      }\n\n      this._fireChange();\n    },\n\n    /**\n     * Selects an item range between two given items.\n     *\n     * @param begin {Object} Item to start with\n     * @param end {Object} Item to end at\n     */\n    selectItemRange(begin, end) {\n      var mode = this.getMode();\n      if (mode == \"single\" || mode == \"one\") {\n        throw new Error(\n          \"Can not select multiple items in selection mode: \" + mode\n        );\n      }\n\n      this._selectItemRange(begin, end);\n\n      this._setAnchorItem(begin);\n\n      this._setLeadItem(end);\n      this._scrollItemIntoView(end);\n\n      this._fireChange();\n    },\n\n    /**\n     * Clears the whole selection at once. Also\n     * resets the lead and anchor items and their\n     * styles.\n     *\n     */\n    clearSelection() {\n      if (this.getMode() == \"one\") {\n        var selected = this._applyDefaultSelection(true);\n        if (selected != null) {\n          return;\n        }\n      }\n\n      this._clearSelection();\n      this._setLeadItem(null);\n      this._setAnchorItem(null);\n\n      this._fireChange();\n    },\n\n    /**\n     * Replaces current selection with given array of items.\n     *\n     * Please note that in single selection scenarios it is more\n     * efficient to directly use {@link #selectItem}.\n     *\n     * @param items {Array} Items to select\n     */\n    replaceSelection(items) {\n      var mode = this.getMode();\n      if (mode == \"one\" || mode === \"single\") {\n        if (items.length > 1) {\n          throw new Error(\n            \"Could not select more than one items in mode: \" + mode + \"!\"\n          );\n        }\n\n        if (items.length == 1) {\n          this.selectItem(items[0]);\n        } else {\n          this.clearSelection();\n        }\n        return;\n      } else {\n        this._replaceMultiSelection(items);\n      }\n    },\n\n    /**\n     * Get the selected item. This method does only work in <code>single</code>\n     * selection mode.\n     *\n     * @return {Object} The selected item.\n     */\n    getSelectedItem() {\n      var mode = this.getMode();\n      if (mode === \"single\" || mode === \"one\") {\n        var result = this._getSelectedItem();\n        return result != undefined ? result : null;\n      }\n\n      throw new Error(\n        \"The method getSelectedItem() is only supported in 'single' and 'one' selection mode!\"\n      );\n    },\n\n    /**\n     * Returns an array of currently selected items.\n     *\n     * Note: The result is only a set of selected items, so the order can\n     * differ from the sequence in which the items were added.\n     *\n     * @return {Object[]} List of items.\n     */\n    getSelection() {\n      return Object.values(this.__selection);\n    },\n\n    /**\n     * Returns the selection sorted by the index in the\n     * container of the selection (the assigned widget)\n     *\n     * @return {Object[]} Sorted list of items\n     */\n    getSortedSelection() {\n      var children = this.getSelectables();\n      var sel = Object.values(this.__selection);\n\n      sel.sort(function (a, b) {\n        return children.indexOf(a) - children.indexOf(b);\n      });\n\n      return sel;\n    },\n\n    /**\n     * Detects whether the given item is currently selected.\n     *\n     * @param item {var} Any valid selectable item\n     * @return {Boolean} Whether the item is selected\n     */\n    isItemSelected(item) {\n      var hash = this._selectableToHashCode(item);\n      return this.__selection[hash] !== undefined;\n    },\n\n    /**\n     * Whether the selection is empty\n     *\n     * @return {Boolean} Whether the selection is empty\n     */\n    isSelectionEmpty() {\n      return qx.lang.Object.isEmpty(this.__selection);\n    },\n\n    /**\n     * Invert the selection. Select the non selected and deselect the selected.\n     */\n    invertSelection() {\n      var mode = this.getMode();\n      if (mode === \"single\" || mode === \"one\") {\n        throw new Error(\n          \"The method invertSelection() is only supported in 'multi' and 'additive' selection mode!\"\n        );\n      }\n\n      var selectables = this.getSelectables();\n      for (var i = 0; i < selectables.length; i++) {\n        this._toggleInSelection(selectables[i]);\n      }\n\n      this._fireChange();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      LEAD/ANCHOR SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets the lead item. Generally the item which was last modified\n     * by the user (tapped on etc.)\n     *\n     * @param value {Object} Any valid item or <code>null</code>\n     */\n    _setLeadItem(value) {\n      var old = this.__leadItem;\n\n      if (old !== null) {\n        this._styleSelectable(old, \"lead\", false);\n      }\n\n      if (value !== null) {\n        this._styleSelectable(value, \"lead\", true);\n      }\n\n      this.__leadItem = value;\n    },\n\n    /**\n     * Returns the current lead item. Generally the item which was last modified\n     * by the user (tapped on etc.)\n     *\n     * @return {Object} The lead item or <code>null</code>\n     */\n    getLeadItem() {\n      return this.__leadItem;\n    },\n\n    /**\n     * Sets the anchor item. This is the item which is the starting\n     * point for all range selections. Normally this is the item which was\n     * tapped on the last time without any modifier keys pressed.\n     *\n     * @param value {Object} Any valid item or <code>null</code>\n     */\n    _setAnchorItem(value) {\n      var old = this.__anchorItem;\n\n      if (old != null) {\n        this._styleSelectable(old, \"anchor\", false);\n      }\n\n      if (value != null) {\n        this._styleSelectable(value, \"anchor\", true);\n      }\n\n      this.__anchorItem = value;\n    },\n\n    /**\n     * Returns the current anchor item. This is the item which is the starting\n     * point for all range selections. Normally this is the item which was\n     * tapped on the last time without any modifier keys pressed.\n     *\n     * @return {Object} The anchor item or <code>null</code>\n     */\n    _getAnchorItem() {\n      return this.__anchorItem !== null ? this.__anchorItem : null;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      BASIC SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Whether the given item is selectable.\n     *\n     * @param item {var} Any item\n     * @return {Boolean} <code>true</code> when the item is selectable\n     */\n    _isSelectable(item) {\n      throw new Error(\"Abstract method call: _isSelectable()\");\n    },\n\n    /**\n     * Finds the selectable instance from a pointer event\n     *\n     * @param event {qx.event.type.Pointer} The pointer event\n     * @return {Object|null} The resulting selectable\n     */\n    _getSelectableFromPointerEvent(event) {\n      var target = event.getTarget();\n      // check for target (may be null when leaving the viewport) [BUG #4378]\n      if (target && this._isSelectable(target)) {\n        return target;\n      }\n      return null;\n    },\n\n    /**\n     * Returns an unique hashcode for the given item.\n     *\n     * @param item {var} Any item\n     * @return {String} A valid hashcode\n     */\n    _selectableToHashCode(item) {\n      throw new Error(\"Abstract method call: _selectableToHashCode()\");\n    },\n\n    /**\n     * Updates the style (appearance) of the given item.\n     *\n     * @param item {var} Item to modify\n     * @param type {String} Any of <code>selected</code>, <code>anchor</code> or <code>lead</code>\n     * @param enabled {Boolean} Whether the given style should be added or removed.\n     */\n    _styleSelectable(item, type, enabled) {\n      throw new Error(\"Abstract method call: _styleSelectable()\");\n    },\n\n    /**\n     * Enables capturing of the container.\n     *\n     */\n    _capture() {\n      throw new Error(\"Abstract method call: _capture()\");\n    },\n\n    /**\n     * Releases capturing of the container\n     *\n     */\n    _releaseCapture() {\n      throw new Error(\"Abstract method call: _releaseCapture()\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      DIMENSION AND LOCATION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the location of the container\n     *\n     * @return {Map} Map with the keys <code>top</code>, <code>right</code>,\n     *    <code>bottom</code> and <code>left</code>.\n     */\n    _getLocation() {\n      throw new Error(\"Abstract method call: _getLocation()\");\n    },\n\n    /**\n     * Returns the dimension of the container (available scrolling space).\n     *\n     * @return {Map} Map with the keys <code>width</code> and <code>height</code>.\n     */\n    _getDimension() {\n      throw new Error(\"Abstract method call: _getDimension()\");\n    },\n\n    /**\n     * Returns the relative (to the container) horizontal location of the given item.\n     *\n     * @param item {var} Any item\n     * @return {Map} A map with the keys <code>left</code> and <code>right</code>.\n     */\n    _getSelectableLocationX(item) {\n      throw new Error(\"Abstract method call: _getSelectableLocationX()\");\n    },\n\n    /**\n     * Returns the relative (to the container) horizontal location of the given item.\n     *\n     * @param item {var} Any item\n     * @return {Map} A map with the keys <code>top</code> and <code>bottom</code>.\n     */\n    _getSelectableLocationY(item) {\n      throw new Error(\"Abstract method call: _getSelectableLocationY()\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SCROLL SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the scroll position of the container.\n     *\n     * @return {Map} Map with the keys <code>left</code> and <code>top</code>.\n     */\n    _getScroll() {\n      throw new Error(\"Abstract method call: _getScroll()\");\n    },\n\n    /**\n     * Scrolls by the given offset\n     *\n     * @param xoff {Integer} Horizontal offset to scroll by\n     * @param yoff {Integer} Vertical offset to scroll by\n     */\n    _scrollBy(xoff, yoff) {\n      throw new Error(\"Abstract method call: _scrollBy()\");\n    },\n\n    /**\n     * Scrolls the given item into the view (make it visible)\n     *\n     * @param item {var} Any item\n     */\n    _scrollItemIntoView(item) {\n      throw new Error(\"Abstract method call: _scrollItemIntoView()\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      QUERY SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns all selectable items of the container.\n     *\n     * @param all {Boolean} true for all selectables, false for the\n     *   selectables the user can interactively select\n     * @return {Array} A list of items\n     */\n    getSelectables(all) {\n      throw new Error(\"Abstract method call: getSelectables()\");\n    },\n\n    /**\n     * Returns all selectable items between the two given items.\n     *\n     * The items could be given in any order.\n     *\n     * @param item1 {var} First item\n     * @param item2 {var} Second item\n     * @return {Array} List of items\n     */\n    _getSelectableRange(item1, item2) {\n      throw new Error(\"Abstract method call: _getSelectableRange()\");\n    },\n\n    /**\n     * Returns the first selectable item.\n     *\n     * @return {var} The first selectable item\n     */\n    _getFirstSelectable() {\n      throw new Error(\"Abstract method call: _getFirstSelectable()\");\n    },\n\n    /**\n     * Returns the last selectable item.\n     *\n     * @return {var} The last selectable item\n     */\n    _getLastSelectable() {\n      throw new Error(\"Abstract method call: _getLastSelectable()\");\n    },\n\n    /**\n     * Returns the first visible and selectable item.\n     *\n     * @return {var} The first visible and selectable item\n     */\n    _getFirstVisibleSelectable() {\n      throw new Error(\"Abstract method call: _getFirstVisibleSelectable()\");\n    },\n\n    /**\n     * Returns the last visible and selectable item.\n     *\n     * @return {var} The last visible and selectable item\n     */\n    _getLastVisibleSelectable() {\n      throw new Error(\"Abstract method call: _getLastVisibleSelectable()\");\n    },\n\n    /**\n     * Returns a selectable item which is related to the given\n     * <code>item</code> through the value of <code>relation</code>.\n     *\n     * @param item {var} Any item\n     * @param relation {String} A valid relation: <code>above</code>,\n     *    <code>right</code>, <code>under</code> or <code>left</code>\n     * @return {var} The related item\n     */\n    _getRelatedSelectable(item, relation) {\n      throw new Error(\"Abstract method call: _getRelatedSelectable()\");\n    },\n\n    /**\n     * Returns the item which should be selected on pageUp/pageDown.\n     *\n     * May also scroll to the needed position.\n     *\n     * @param lead {var} The current lead item\n     * @param up {Boolean?false} Which page key was pressed:\n     *   <code>up</code> or <code>down</code>.\n     */\n    _getPage(lead, up) {\n      throw new Error(\"Abstract method call: _getPage()\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyMode(value, old) {\n      this._setLeadItem(null);\n      this._setAnchorItem(null);\n\n      this._clearSelection();\n\n      // Mode \"one\" requires one selected item\n      if (value === \"one\") {\n        this._applyDefaultSelection(true);\n      }\n\n      this._fireChange();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      POINTER SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * This method should be connected to the <code>pointerover</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Pointer} A valid pointer event\n     */\n    handlePointerOver(event) {\n      // All browsers (except Opera) fire a native \"mouseover\" event when a scroll appears\n      // by keyboard interaction. We have to ignore the event to avoid a selection for\n      // \"pointerover\" (quick selection). For more details see [BUG #4225]\n      if (\n        this.__oldScrollTop != null &&\n        this.__oldScrollTop != this._getScroll().top\n      ) {\n        this.__oldScrollTop = null;\n        return;\n      }\n\n      // quick select should only work on mouse events\n      if (event.getPointerType() != \"mouse\") {\n        return;\n      }\n\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      if (!this.getQuick()) {\n        this._userInteraction = false;\n        return;\n      }\n\n      var mode = this.getMode();\n      if (mode !== \"one\" && mode !== \"single\") {\n        this._userInteraction = false;\n        return;\n      }\n\n      var item = this._getSelectableFromPointerEvent(event);\n      if (item === null) {\n        this._userInteraction = false;\n        return;\n      }\n\n      this._setSelectedItem(item);\n\n      // Be sure that item is in view\n      // This does not feel good when pointerover is used\n      // this._scrollItemIntoView(item);\n\n      // Fire change event as needed\n      this._fireChange(\"quick\");\n\n      this._userInteraction = false;\n    },\n\n    /**\n     * This method should be connected to the <code>pointerdown</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Pointer} A valid pointer event\n     */\n    handlePointerDown(event) {\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      var item = this._getSelectableFromPointerEvent(event);\n      if (item === null) {\n        this._userInteraction = false;\n        return;\n      }\n\n      // Read in keyboard modifiers\n      var isCtrlPressed =\n        event.isCtrlPressed() ||\n        (qx.core.Environment.get(\"os.name\") == \"osx\" && event.isMetaPressed());\n      var isShiftPressed = event.isShiftPressed();\n\n      // tapping on selected items deselect on pointerup, not on pointerdown\n      if (\n        this.isItemSelected(item) &&\n        !isShiftPressed &&\n        !isCtrlPressed &&\n        !this.getDrag()\n      ) {\n        this.__pointerDownOnSelected = item;\n        this._userInteraction = false;\n        return;\n      } else {\n        this.__pointerDownOnSelected = null;\n      }\n\n      // Be sure that item is in view\n      this._scrollItemIntoView(item);\n\n      // Drag selection\n      var mode = this.getMode();\n      if (\n        this.getDrag() &&\n        mode !== \"single\" &&\n        mode !== \"one\" &&\n        !isShiftPressed &&\n        !isCtrlPressed &&\n        event.getPointerType() == \"mouse\"\n      ) {\n        this._setAnchorItem(item);\n        this._setLeadItem(item);\n\n        // Cache location/scroll data\n        this.__frameLocation = this._getLocation();\n        this.__frameScroll = this._getScroll();\n\n        // Store position at start\n        this.__dragStartX = event.getDocumentLeft() + this.__frameScroll.left;\n        this.__dragStartY = event.getDocumentTop() + this.__frameScroll.top;\n\n        // Switch to capture mode\n        this.__inCapture = true;\n        this._capture();\n      }\n\n      // Fire change event as needed\n      this._fireChange(\"tap\");\n\n      this._userInteraction = false;\n    },\n\n    /**\n     * This method should be connected to the <code>tap</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Tap} A valid pointer event\n     */\n    handleTap(event) {\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      // Read in keyboard modifiers\n      var isCtrlPressed =\n        event.isCtrlPressed() ||\n        (qx.core.Environment.get(\"os.name\") == \"osx\" && event.isMetaPressed());\n      var isShiftPressed = event.isShiftPressed();\n\n      if (\n        !isCtrlPressed &&\n        !isShiftPressed &&\n        this.__pointerDownOnSelected != null\n      ) {\n        this._userInteraction = false;\n        var item = this._getSelectableFromPointerEvent(event);\n        if (item === null || !this.isItemSelected(item)) {\n          return;\n        }\n      }\n\n      var item = this._getSelectableFromPointerEvent(event);\n      if (item === null) {\n        this._userInteraction = false;\n        return;\n      }\n\n      // Action depends on selected mode\n      if (!this.isReadOnly()) {\n        switch (this.getMode()) {\n          case \"single\":\n          case \"one\":\n            this._setSelectedItem(item);\n            break;\n\n          case \"additive\":\n            this._setLeadItem(item);\n            this._setAnchorItem(item);\n            this._toggleInSelection(item);\n            break;\n\n          case \"multi\":\n            // Update lead item\n            this._setLeadItem(item);\n\n            // Create/Update range selection\n            if (isShiftPressed) {\n              var anchor = this._getAnchorItem();\n              if (anchor === null) {\n                anchor = this._getFirstSelectable();\n                this._setAnchorItem(anchor);\n              }\n\n              this._selectItemRange(anchor, item, isCtrlPressed);\n            }\n\n            // Toggle in selection\n            else if (isCtrlPressed) {\n              this._setAnchorItem(item);\n              this._toggleInSelection(item);\n            }\n\n            // Replace current selection\n            else {\n              this._setAnchorItem(item);\n              this._setSelectedItem(item);\n            }\n\n            break;\n        }\n      }\n\n      // Cleanup operation\n      this._userInteraction = false;\n      this._cleanup();\n    },\n\n    /**\n     * This method should be connected to the <code>losecapture</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Pointer} A valid pointer event\n     */\n    handleLoseCapture(event) {\n      this._cleanup();\n    },\n\n    /**\n     * This method should be connected to the <code>pointermove</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Pointer} A valid pointer event\n     */\n    handlePointerMove(event) {\n      // Only relevant when capturing is enabled\n      if (!this.__inCapture) {\n        return;\n      }\n\n      // Update pointer position cache\n      this.__pointerX = event.getDocumentLeft();\n      this.__pointerY = event.getDocumentTop();\n\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      // Detect move directions\n      var dragX = this.__pointerX + this.__frameScroll.left;\n      if (dragX > this.__dragStartX) {\n        this.__moveDirectionX = 1;\n      } else if (dragX < this.__dragStartX) {\n        this.__moveDirectionX = -1;\n      } else {\n        this.__moveDirectionX = 0;\n      }\n\n      var dragY = this.__pointerY + this.__frameScroll.top;\n      if (dragY > this.__dragStartY) {\n        this.__moveDirectionY = 1;\n      } else if (dragY < this.__dragStartY) {\n        this.__moveDirectionY = -1;\n      } else {\n        this.__moveDirectionY = 0;\n      }\n\n      // Update scroll steps\n      var location = this.__frameLocation;\n\n      if (this.__pointerX < location.left) {\n        this.__scrollStepX = this.__pointerX - location.left;\n      } else if (this.__pointerX > location.right) {\n        this.__scrollStepX = this.__pointerX - location.right;\n      } else {\n        this.__scrollStepX = 0;\n      }\n\n      if (this.__pointerY < location.top) {\n        this.__scrollStepY = this.__pointerY - location.top;\n      } else if (this.__pointerY > location.bottom) {\n        this.__scrollStepY = this.__pointerY - location.bottom;\n      } else {\n        this.__scrollStepY = 0;\n      }\n\n      // Dynamically create required timer instance\n      if (!this.__scrollTimer) {\n        this.__scrollTimer = new qx.event.Timer(100);\n        this.__scrollTimer.addListener(\"interval\", this._onInterval, this);\n      }\n\n      // Start interval\n      this.__scrollTimer.start();\n\n      // Auto select based on new cursor position\n      this._autoSelect();\n\n      event.stopPropagation();\n      this._userInteraction = false;\n    },\n\n    /**\n     * This method should be connected to the <code>addItem</code> event\n     * of the managed object.\n     *\n     * @param e {qx.event.type.Data} The event object\n     */\n    handleAddItem(e) {\n      var item = e.getData();\n      if (this.getMode() === \"one\" && this.isSelectionEmpty()) {\n        this.addItem(item);\n      }\n    },\n\n    /**\n     * This method should be connected to the <code>removeItem</code> event\n     * of the managed object.\n     *\n     * @param e {qx.event.type.Data} The event object\n     */\n    handleRemoveItem(e) {\n      this.removeItem(e.getData());\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      POINTER SUPPORT INTERNALS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Stops all timers, release capture etc. to cleanup drag selection\n     */\n    _cleanup() {\n      if (!this.getDrag() && this.__inCapture) {\n        return;\n      }\n\n      // Fire change event if needed\n      if (this.__selectionModified) {\n        this._fireChange(\"tap\");\n      }\n\n      // Remove flags\n      delete this.__inCapture;\n      delete this.__lastRelX;\n      delete this.__lastRelY;\n\n      // Stop capturing\n      this._releaseCapture();\n\n      // Stop timer\n      if (this.__scrollTimer) {\n        this.__scrollTimer.stop();\n      }\n    },\n\n    /**\n     * Event listener for timer used by drag selection\n     *\n     * @param e {qx.event.type.Event} Timer event\n     */\n    _onInterval(e) {\n      // Scroll by defined block size\n      this._scrollBy(this.__scrollStepX, this.__scrollStepY);\n\n      // Update scroll cache\n      this.__frameScroll = this._getScroll();\n\n      // Auto select based on new scroll position and cursor\n      this._autoSelect();\n    },\n\n    /**\n     * Automatically selects items based on the pointer movement during a drag selection\n     */\n    _autoSelect() {\n      var inner = this._getDimension();\n\n      // Get current relative Y position and compare it with previous one\n      var relX =\n        Math.max(\n          0,\n          Math.min(this.__pointerX - this.__frameLocation.left, inner.width)\n        ) + this.__frameScroll.left;\n      var relY =\n        Math.max(\n          0,\n          Math.min(this.__pointerY - this.__frameLocation.top, inner.height)\n        ) + this.__frameScroll.top;\n\n      // Compare old and new relative coordinates (for performance reasons)\n      if (this.__lastRelX === relX && this.__lastRelY === relY) {\n        return;\n      }\n      this.__lastRelX = relX;\n      this.__lastRelY = relY;\n\n      // Cache anchor\n      var anchor = this._getAnchorItem();\n      var lead = anchor;\n\n      // Process X-coordinate\n      var moveX = this.__moveDirectionX;\n      var nextX, locationX;\n\n      while (moveX !== 0) {\n        // Find next item to process depending on current scroll direction\n        nextX =\n          moveX > 0\n            ? this._getRelatedSelectable(lead, \"right\")\n            : this._getRelatedSelectable(lead, \"left\");\n\n        // May be null (e.g. first/last item)\n        if (nextX !== null) {\n          locationX = this._getSelectableLocationX(nextX);\n\n          // Continue when the item is in the visible area\n          if (\n            (moveX > 0 && locationX.left <= relX) ||\n            (moveX < 0 && locationX.right >= relX)\n          ) {\n            lead = nextX;\n            continue;\n          }\n        }\n\n        // Otherwise break\n        break;\n      }\n\n      // Process Y-coordinate\n      var moveY = this.__moveDirectionY;\n      var nextY, locationY;\n\n      while (moveY !== 0) {\n        // Find next item to process depending on current scroll direction\n        nextY =\n          moveY > 0\n            ? this._getRelatedSelectable(lead, \"under\")\n            : this._getRelatedSelectable(lead, \"above\");\n\n        // May be null (e.g. first/last item)\n        if (nextY !== null) {\n          locationY = this._getSelectableLocationY(nextY);\n\n          // Continue when the item is in the visible area\n          if (\n            (moveY > 0 && locationY.top <= relY) ||\n            (moveY < 0 && locationY.bottom >= relY)\n          ) {\n            lead = nextY;\n            continue;\n          }\n        }\n\n        // Otherwise break\n        break;\n      }\n\n      // Differenciate between the two supported modes\n      var mode = this.getMode();\n      if (mode === \"multi\") {\n        // Replace current selection with new range\n        this._selectItemRange(anchor, lead);\n      } else if (mode === \"additive\") {\n        // Behavior depends on the fact whether the\n        // anchor item is selected or not\n        if (this.isItemSelected(anchor)) {\n          this._selectItemRange(anchor, lead, true);\n        } else {\n          this._deselectItemRange(anchor, lead);\n        }\n\n        // Improve performance. This mode does not rely\n        // on full ranges as it always extend the old\n        // selection/deselection.\n        this._setAnchorItem(lead);\n      }\n\n      // Fire change event as needed\n      this._fireChange(\"drag\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      KEYBOARD SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @type {Map} All supported navigation keys\n     *\n     * @lint ignoreReferenceField(__navigationKeys)\n     */\n    __navigationKeys: {\n      Home: 1,\n      Down: 1,\n      Right: 1,\n      PageDown: 1,\n      End: 1,\n      Up: 1,\n      Left: 1,\n      PageUp: 1\n    },\n\n    /**\n     * This method should be connected to the <code>keypress</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.KeySequence} A valid key sequence event\n     */\n    handleKeyPress(event) {\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      var current, next;\n      var key = event.getKeyIdentifier();\n      var mode = this.getMode();\n\n      // Support both control keys on Mac\n      var isCtrlPressed =\n        event.isCtrlPressed() ||\n        (qx.core.Environment.get(\"os.name\") == \"osx\" && event.isMetaPressed());\n      var isShiftPressed = event.isShiftPressed();\n\n      var consumed = false;\n      var readOnly = this.isReadOnly();\n\n      if (key === \"A\" && isCtrlPressed && !readOnly) {\n        if (mode !== \"single\" && mode !== \"one\") {\n          this._selectAllItems();\n          consumed = true;\n        }\n      } else if (key === \"Escape\" && !readOnly) {\n        if (mode !== \"single\" && mode !== \"one\") {\n          this._clearSelection();\n          consumed = true;\n        }\n      } else if (key === \"Space\" && !readOnly) {\n        var lead = this.getLeadItem();\n        if (lead != null && !isShiftPressed) {\n          if (isCtrlPressed || mode === \"additive\") {\n            this._toggleInSelection(lead);\n          } else {\n            this._setSelectedItem(lead);\n          }\n          consumed = true;\n        }\n      } else if (this.__navigationKeys[key] && readOnly) {\n        switch (key) {\n          case \"Home\":\n            next = this._getFirstSelectable();\n            break;\n\n          case \"End\":\n            next = this._getLastSelectable();\n            break;\n\n          case \"Up\":\n            next = this._getRelatedSelectable(\n              this._getFirstVisibleSelectable(),\n              \"above\"\n            );\n\n            break;\n\n          case \"Down\":\n            next = this._getRelatedSelectable(\n              this._getLastVisibleSelectable(),\n              \"under\"\n            );\n\n            break;\n\n          case \"Left\":\n            next = this._getRelatedSelectable(\n              this._getFirstVisibleSelectable(),\n              \"left\"\n            );\n\n            break;\n\n          case \"Right\":\n            next = this._getRelatedSelectable(\n              this._getLastVisibleSelectable(),\n              \"right\"\n            );\n\n            break;\n\n          case \"PageUp\":\n            next = this._getPage(this._getFirstVisibleSelectable(), true);\n            break;\n\n          case \"PageDown\":\n            next = this._getPage(this._getLastVisibleSelectable(), false);\n            break;\n        }\n\n        if (next) {\n          consumed = true;\n          this.__oldScrollTop = this._getScroll().top;\n          this._scrollItemIntoView(next);\n        }\n      } else if (this.__navigationKeys[key]) {\n        consumed = true;\n        if (mode === \"single\" || mode == \"one\") {\n          current = this._getSelectedItem();\n        } else {\n          current = this.getLeadItem();\n        }\n\n        if (current !== null) {\n          switch (key) {\n            case \"Home\":\n              next = this._getFirstSelectable();\n              break;\n\n            case \"End\":\n              next = this._getLastSelectable();\n              break;\n\n            case \"Up\":\n              next = this._getRelatedSelectable(current, \"above\");\n              break;\n\n            case \"Down\":\n              next = this._getRelatedSelectable(current, \"under\");\n              break;\n\n            case \"Left\":\n              next = this._getRelatedSelectable(current, \"left\");\n              break;\n\n            case \"Right\":\n              next = this._getRelatedSelectable(current, \"right\");\n              break;\n\n            case \"PageUp\":\n              next = this._getPage(current, true);\n              break;\n\n            case \"PageDown\":\n              next = this._getPage(current, false);\n              break;\n          }\n        } else {\n          switch (key) {\n            case \"Home\":\n            case \"Down\":\n            case \"Right\":\n            case \"PageDown\":\n              next = this._getFirstSelectable();\n              break;\n\n            case \"End\":\n            case \"Up\":\n            case \"Left\":\n            case \"PageUp\":\n              next = this._getLastSelectable();\n              break;\n          }\n        }\n\n        // Process result\n        if (next !== null) {\n          switch (mode) {\n            case \"single\":\n            case \"one\":\n              this._setSelectedItem(next);\n              break;\n\n            case \"additive\":\n              this._setLeadItem(next);\n              break;\n\n            case \"multi\":\n              if (isShiftPressed) {\n                var anchor = this._getAnchorItem();\n                if (anchor === null) {\n                  this._setAnchorItem((anchor = this._getFirstSelectable()));\n                }\n\n                this._setLeadItem(next);\n                this._selectItemRange(anchor, next, isCtrlPressed);\n              } else {\n                this._setAnchorItem(next);\n                this._setLeadItem(next);\n\n                if (!isCtrlPressed) {\n                  this._setSelectedItem(next);\n                }\n              }\n\n              break;\n          }\n\n          this.__oldScrollTop = this._getScroll().top;\n          this._scrollItemIntoView(next);\n        }\n      }\n\n      if (consumed) {\n        // Stop processed events\n        event.stop();\n\n        // Fire change event as needed\n        this._fireChange(\"key\");\n      }\n      this._userInteraction = false;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SUPPORT FOR ITEM RANGES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds all items to the selection\n     */\n    _selectAllItems() {\n      var range = this.getSelectables();\n      for (var i = 0, l = range.length; i < l; i++) {\n        this._addToSelection(range[i]);\n      }\n    },\n\n    /**\n     * Clears current selection\n     */\n    _clearSelection() {\n      var selection = this.__selection;\n      for (var hash in selection) {\n        this._removeFromSelection(selection[hash]);\n      }\n      this.__selection = {};\n    },\n\n    /**\n     * Select a range from <code>item1</code> to <code>item2</code>.\n     *\n     * @param item1 {Object} Start with this item\n     * @param item2 {Object} End with this item\n     * @param extend {Boolean?false} Whether the current\n     *    selection should be replaced or extended.\n     */\n    _selectItemRange(item1, item2, extend) {\n      var range = this._getSelectableRange(item1, item2);\n\n      // Remove items which are not in the detected range\n      if (!extend) {\n        var selected = this.__selection;\n        var mapped = this.__rangeToMap(range);\n\n        for (var hash in selected) {\n          if (!mapped[hash]) {\n            this._removeFromSelection(selected[hash]);\n          }\n        }\n      }\n\n      // Add new items to the selection\n      for (var i = 0, l = range.length; i < l; i++) {\n        this._addToSelection(range[i]);\n      }\n    },\n\n    /**\n     * Deselect all items between <code>item1</code> and <code>item2</code>.\n     *\n     * @param item1 {Object} Start with this item\n     * @param item2 {Object} End with this item\n     */\n    _deselectItemRange(item1, item2) {\n      var range = this._getSelectableRange(item1, item2);\n      for (var i = 0, l = range.length; i < l; i++) {\n        this._removeFromSelection(range[i]);\n      }\n    },\n\n    /**\n     * Internal method to convert a range to a map of hash\n     * codes for faster lookup during selection compare routines.\n     *\n     * @param range {Array} List of selectable items\n     */\n    __rangeToMap(range) {\n      var mapped = {};\n      var item;\n\n      for (var i = 0, l = range.length; i < l; i++) {\n        item = range[i];\n        mapped[this._selectableToHashCode(item)] = item;\n      }\n\n      return mapped;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SINGLE ITEM QUERY AND MODIFICATION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the first selected item. Only makes sense\n     * when using manager in single selection mode.\n     *\n     * @return {var} The selected item (or <code>null</code>)\n     */\n    _getSelectedItem() {\n      for (var hash in this.__selection) {\n        return this.__selection[hash];\n      }\n\n      return null;\n    },\n\n    /**\n     * Replace current selection with given item.\n     *\n     * @param item {var} Any valid selectable item\n     */\n    _setSelectedItem(item) {\n      if (this._isSelectable(item)) {\n        // If already selected try to find out if this is the only item\n        var current = this.__selection;\n        var hash = this._selectableToHashCode(item);\n\n        if (!current[hash] || current.length >= 2) {\n          this._clearSelection();\n          this._addToSelection(item);\n        }\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      MODIFY ITEM SELECTION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds an item to the current selection.\n     *\n     * @param item {Object} Any item\n     */\n    _addToSelection(item) {\n      var hash = this._selectableToHashCode(item);\n\n      if (this.__selection[hash] == null && this._isSelectable(item)) {\n        this.__selection[hash] = item;\n        this._styleSelectable(item, \"selected\", true);\n\n        this.__selectionModified = true;\n      }\n    },\n\n    /**\n     * Toggles the item e.g. remove it when already selected\n     * or select it when currently not.\n     *\n     * @param item {Object} Any item\n     */\n    _toggleInSelection(item) {\n      var hash = this._selectableToHashCode(item);\n\n      if (this.__selection[hash] == null) {\n        this.__selection[hash] = item;\n        this._styleSelectable(item, \"selected\", true);\n      } else {\n        delete this.__selection[hash];\n        this._styleSelectable(item, \"selected\", false);\n      }\n\n      this.__selectionModified = true;\n    },\n\n    /**\n     * Removes the given item from the current selection.\n     *\n     * @param item {Object} Any item\n     */\n    _removeFromSelection(item) {\n      var hash = this._selectableToHashCode(item);\n\n      if (this.__selection[hash] != null) {\n        delete this.__selection[hash];\n        this._styleSelectable(item, \"selected\", false);\n\n        this.__selectionModified = true;\n      }\n    },\n\n    /**\n     * Replaces current selection with items from given array.\n     *\n     * @param items {Array} List of items to select\n     */\n    _replaceMultiSelection(items) {\n      if (items.length === 0) {\n        this.clearSelection();\n        return;\n      }\n\n      var modified = false;\n\n      // Build map from hash codes and filter non-selectables\n      var selectable, hash;\n      var incoming = {};\n      for (var i = 0, l = items.length; i < l; i++) {\n        selectable = items[i];\n        if (this._isSelectable(selectable)) {\n          hash = this._selectableToHashCode(selectable);\n          incoming[hash] = selectable;\n        }\n      }\n\n      // Remember last\n      var first = items[0];\n      var last = selectable;\n\n      // Clear old entries from map\n      var current = this.__selection;\n      for (var hash in current) {\n        if (incoming[hash]) {\n          // Reduce map to make next loop faster\n          delete incoming[hash];\n        } else {\n          // update internal map\n          selectable = current[hash];\n          delete current[hash];\n\n          // apply styling\n          this._styleSelectable(selectable, \"selected\", false);\n\n          // remember that the selection has been modified\n          modified = true;\n        }\n      }\n\n      // Add remaining selectables to selection\n      for (var hash in incoming) {\n        // update internal map\n        selectable = current[hash] = incoming[hash];\n\n        // apply styling\n        this._styleSelectable(selectable, \"selected\", true);\n\n        // remember that the selection has been modified\n        modified = true;\n      }\n\n      // Do not do anything if selection is equal to previous one\n      if (!modified) {\n        return false;\n      }\n\n      // Scroll last incoming item into view\n      this._scrollItemIntoView(last);\n\n      // Reset anchor and lead item\n      this._setLeadItem(first);\n      this._setAnchorItem(first);\n\n      // Finally fire change event\n      this.__selectionModified = true;\n      this._fireChange();\n    },\n\n    /**\n     * Fires the selection change event if the selection has\n     * been modified.\n     *\n     * @param context {String} One of <code>tap</code>, <code>quick</code>,\n     *    <code>drag</code> or <code>key</code> or <code>null</code>\n     */\n    _fireChange(context) {\n      if (this.__selectionModified) {\n        // Store context\n        this.__selectionContext = context || null;\n\n        // Fire data event which contains the current selection\n        this.fireDataEvent(\"changeSelection\", this.getSelection());\n        delete this.__selectionModified;\n      }\n    },\n\n    /**\n     * Applies the default selection. The default item is the first item.\n     *\n     * @param force {Boolean} Whether the default selection should be forced.\n     *\n     * @return {var} The selected item.\n     */\n    _applyDefaultSelection(force) {\n      if (\n        force === true ||\n        (this.getMode() === \"one\" && this.isSelectionEmpty())\n      ) {\n        var first = this._getFirstSelectable();\n        if (first != null) {\n          this.selectItem(first);\n        }\n        return first;\n      }\n      return null;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._disposeObjects(\"__scrollTimer\");\n    this.__selection = this.__pointerDownOnSelected = this.__anchorItem = null;\n    this.__leadItem = null;\n  }\n});\n"
  ]
}