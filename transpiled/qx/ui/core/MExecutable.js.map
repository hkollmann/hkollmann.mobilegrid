{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/core/MExecutable.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "events",
    "execute",
    "properties",
    "command",
    "check",
    "apply",
    "event",
    "nullable",
    "members",
    "__executableBindingIds",
    "__semaphore",
    "__executeListenerId",
    "_bindableProperties",
    "core",
    "Environment",
    "select",
    "cmd",
    "getCommand",
    "fireEvent",
    "__onCommandExecute",
    "e",
    "isEnabled",
    "_applyCommand",
    "value",
    "old",
    "removeListenerById",
    "addListener",
    "ids",
    "selfPropertyValue",
    "i",
    "length",
    "property",
    "isDisposed",
    "removeBinding",
    "Class",
    "hasProperty",
    "constructor",
    "cmdPropertyValue",
    "get",
    "$$resyncNeeded",
    "syncAppearance",
    "util",
    "PropertyUtil",
    "getThemeValue",
    "bind",
    "set",
    "destruct",
    "ui",
    "MExecutable"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * This mixin is included by all widgets, which support an 'execute' like\n * buttons or menu entries.\n */\nqx.Mixin.define(\"qx.ui.core.MExecutable\", {\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Fired if the {@link #execute} method is invoked.*/\n    execute: \"qx.event.type.Event\"\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * A command called if the {@link #execute} method is called, e.g. on a\n     * button tap.\n     */\n    command: {\n      check: \"qx.ui.command.Command\",\n      apply: \"_applyCommand\",\n      event: \"changeCommand\",\n      nullable: true\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __executableBindingIds: null,\n    __semaphore: false,\n    __executeListenerId: null,\n\n    /**\n     * @type {Map} Set of properties, which will by synced from the command to the\n     *    including widget\n     *\n     * @lint ignoreReferenceField(_bindableProperties)\n     */\n    _bindableProperties: qx.core.Environment.select(\"qx.command.bindEnabled\", {\n      true: [\"enabled\", \"label\", \"icon\", \"toolTipText\", \"value\", \"menu\"],\n\n      false: [\"label\", \"icon\", \"toolTipText\", \"value\", \"menu\"]\n    }),\n\n    /**\n     * Initiate the execute action.\n     */\n    execute() {\n      var cmd = this.getCommand();\n\n      if (cmd) {\n        if (this.__semaphore) {\n          this.__semaphore = false;\n        } else {\n          this.__semaphore = true;\n          cmd.execute(this);\n        }\n      }\n\n      this.fireEvent(\"execute\");\n    },\n\n    /**\n     * Handler for the execute event of the command.\n     *\n     * @param e {qx.event.type.Event} The execute event of the command.\n     */\n    __onCommandExecute(e) {\n      if (this.isEnabled()) {\n        if (this.__semaphore) {\n          this.__semaphore = false;\n          return;\n        }\n        if (this.isEnabled()) {\n          this.__semaphore = true;\n          this.execute();\n        }\n      }\n    },\n\n    // property apply\n    _applyCommand(value, old) {\n      // execute forwarding\n      if (old != null) {\n        old.removeListenerById(this.__executeListenerId);\n      }\n      if (value != null) {\n        this.__executeListenerId = value.addListener(\n          \"execute\",\n          this.__onCommandExecute,\n          this\n        );\n      }\n\n      // binding stuff\n      var ids = this.__executableBindingIds;\n      if (ids == null) {\n        this.__executableBindingIds = ids = {};\n      }\n\n      var selfPropertyValue;\n      for (var i = 0; i < this._bindableProperties.length; i++) {\n        var property = this._bindableProperties[i];\n\n        // remove the old binding\n        if (old != null && !old.isDisposed() && ids[property] != null) {\n          old.removeBinding(ids[property]);\n          ids[property] = null;\n        }\n\n        // add the new binding\n        if (value != null && qx.Class.hasProperty(this.constructor, property)) {\n          // handle the init value (don't sync the initial null)\n          var cmdPropertyValue = value.get(property);\n          if (cmdPropertyValue == null) {\n            selfPropertyValue = this.get(property);\n            // check also for themed values [BUG #5906]\n            if (selfPropertyValue == null) {\n              // update the appearance to make sure every themed property is up to date\n              this.$$resyncNeeded = true;\n              this.syncAppearance();\n              selfPropertyValue = qx.util.PropertyUtil.getThemeValue(\n                this,\n                property\n              );\n            }\n          } else {\n            // Reset the self property value [BUG #4534]\n            selfPropertyValue = null;\n          }\n          // set up the binding\n          ids[property] = value.bind(property, this, property);\n          // reapply the former value\n          if (selfPropertyValue) {\n            this.set(property, selfPropertyValue);\n          }\n        }\n      }\n    }\n  },\n\n  destruct() {\n    this._applyCommand(null, this.getCommand());\n    this.__executableBindingIds = null;\n  }\n});\n"
  ]
}