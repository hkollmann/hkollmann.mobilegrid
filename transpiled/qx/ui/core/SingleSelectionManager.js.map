{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/core/SingleSelectionManager.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "selectionProvider",
    "__selectionProvider",
    "events",
    "changeSelected",
    "properties",
    "allowEmptySelection",
    "check",
    "init",
    "apply",
    "members",
    "__selected",
    "getSelected",
    "setSelected",
    "item",
    "__isChildElement",
    "Error",
    "__setSelected",
    "resetSelected",
    "isSelected",
    "isSelectionEmpty",
    "getSelectables",
    "all",
    "items",
    "getItems",
    "result",
    "i",
    "length",
    "isItemSelectable",
    "push",
    "getEnabled",
    "splice",
    "__applyAllowEmptySelection",
    "value",
    "old",
    "oldSelected",
    "newSelected",
    "isAllowEmptySelection",
    "firstElement",
    "fireDataEvent",
    "destruct",
    "toHashCode",
    "_disposeObjects",
    "ui",
    "SingleSelectionManager"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * Responsible for the single selection management.\n *\n * The class manage a list of {@link qx.ui.core.Widget} which are returned from\n * {@link qx.ui.core.ISingleSelectionProvider#getItems}.\n *\n * @internal\n */\nqx.Class.define(\"qx.ui.core.SingleSelectionManager\", {\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Construct the single selection manager.\n   *\n   * @param selectionProvider {qx.ui.core.ISingleSelectionProvider} The provider\n   * for selection.\n   */\n  construct(selectionProvider) {\n    super();\n\n    if (qx.core.Environment.get(\"qx.debug\")) {\n      qx.core.Assert.assertInterface(\n        selectionProvider,\n        qx.ui.core.ISingleSelectionProvider,\n        \"Invalid selectionProvider!\"\n      );\n    }\n\n    this.__selectionProvider = selectionProvider;\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Fires after the selection was modified */\n    changeSelected: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * If the value is <code>true</code> the manager allows an empty selection,\n     * otherwise the first selectable element returned from the\n     * <code>qx.ui.core.ISingleSelectionProvider</code> will be selected.\n     */\n    allowEmptySelection: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"__applyAllowEmptySelection\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /** @type {qx.ui.core.Widget} The selected widget. */\n    __selected: null,\n\n    /** @type {qx.ui.core.ISingleSelectionProvider} The provider for selection management */\n    __selectionProvider: null,\n\n    /*\n    ---------------------------------------------------------------------------\n       PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the current selected element.\n     *\n     * @return {qx.ui.core.Widget | null} The current selected widget or\n     *    <code>null</code> if the selection is empty.\n     */\n    getSelected() {\n      return this.__selected;\n    },\n\n    /**\n     * Selects the passed element.\n     *\n     * @param item {qx.ui.core.Widget} Element to select.\n     * @throws {Error} if the element is not a child element.\n     */\n    setSelected(item) {\n      if (!this.__isChildElement(item)) {\n        throw new Error(\n          \"Could not select \" + item + \", because it is not a child element!\"\n        );\n      }\n\n      this.__setSelected(item);\n    },\n\n    /**\n     * Reset the current selection. If {@link #allowEmptySelection} is set to\n     * <code>true</code> the first element will be selected.\n     */\n    resetSelected() {\n      this.__setSelected(null);\n    },\n\n    /**\n     * Return <code>true</code> if the passed element is selected.\n     *\n     * @param item {qx.ui.core.Widget} Element to check if selected.\n     * @return {Boolean} <code>true</code> if passed element is selected,\n     *    <code>false</code> otherwise.\n     * @throws {Error} if the element is not a child element.\n     */\n    isSelected(item) {\n      if (!this.__isChildElement(item)) {\n        throw new Error(\n          \"Could not check if \" +\n            item +\n            \" is selected,\" +\n            \" because it is not a child element!\"\n        );\n      }\n      return this.__selected === item;\n    },\n\n    /**\n     * Returns <code>true</code> if selection is empty.\n     *\n     * @return {Boolean} <code>true</code> if selection is empty,\n     *    <code>false</code> otherwise.\n     */\n    isSelectionEmpty() {\n      return this.__selected == null;\n    },\n\n    /**\n     * Returns all elements which are selectable.\n     *\n     * @param all {Boolean} true for all selectables, false for the\n     *   selectables the user can interactively select\n     * @return {qx.ui.core.Widget[]} The contained items.\n     */\n    getSelectables(all) {\n      var items = this.__selectionProvider.getItems();\n      var result = [];\n\n      for (var i = 0; i < items.length; i++) {\n        if (this.__selectionProvider.isItemSelectable(items[i])) {\n          result.push(items[i]);\n        }\n      }\n\n      // in case of an user selectable list, remove the enabled items\n      if (!all) {\n        for (var i = result.length - 1; i >= 0; i--) {\n          if (!result[i].getEnabled()) {\n            result.splice(i, 1);\n          }\n        }\n      }\n\n      return result;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       APPLY METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    // apply method\n    __applyAllowEmptySelection(value, old) {\n      if (!value) {\n        this.__setSelected(this.__selected);\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       HELPERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Set selected element.\n     *\n     * If passes value is <code>null</code>, the selection will be reseted.\n     *\n     * @param item {qx.ui.core.Widget | null} element to select, or\n     *    <code>null</code> to reset selection.\n     */\n    __setSelected(item) {\n      var oldSelected = this.__selected;\n      var newSelected = item;\n\n      if (newSelected != null && oldSelected === newSelected) {\n        return;\n      }\n\n      if (!this.isAllowEmptySelection() && newSelected == null) {\n        var firstElement = this.getSelectables(true)[0];\n\n        if (firstElement) {\n          newSelected = firstElement;\n        }\n      }\n\n      this.__selected = newSelected;\n      this.fireDataEvent(\"changeSelected\", newSelected, oldSelected);\n    },\n\n    /**\n     * Checks if passed element is a child element.\n     *\n     * @param item {qx.ui.core.Widget} Element to check if child element.\n     * @return {Boolean} <code>true</code> if element is child element,\n     *    <code>false</code> otherwise.\n     */\n    __isChildElement(item) {\n      var items = this.__selectionProvider.getItems();\n\n      for (var i = 0; i < items.length; i++) {\n        if (items[i] === item) {\n          return true;\n        }\n      }\n      return false;\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCTOR\n   *****************************************************************************\n   */\n  destruct() {\n    if (this.__selectionProvider.toHashCode) {\n      this._disposeObjects(\"__selectionProvider\");\n    } else {\n      this.__selectionProvider = null;\n    }\n\n    this._disposeObjects(\"__selected\");\n  }\n});\n"
  ]
}