{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/mobile/core/Widget.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "include",
    "locale",
    "MTranslation",
    "construct",
    "_setContainerElement",
    "_createContainerElement",
    "__children",
    "setId",
    "getId",
    "initDefaultCssClass",
    "initName",
    "initAnonymous",
    "initActivatable",
    "events",
    "mousemove",
    "mouseover",
    "mouseout",
    "mousedown",
    "mouseup",
    "click",
    "dblclick",
    "contextmenu",
    "beforeContextmenuOpen",
    "mousewheel",
    "touchstart",
    "touchend",
    "touchmove",
    "touchcancel",
    "tap",
    "longtap",
    "swipe",
    "rotate",
    "pinch",
    "track",
    "keyup",
    "keydown",
    "keypress",
    "keyinput",
    "domupdated",
    "appear",
    "disappear",
    "focus",
    "blur",
    "focusin",
    "focusout",
    "activate",
    "deactivate",
    "roll",
    "properties",
    "defaultCssClass",
    "check",
    "init",
    "nullable",
    "apply",
    "enabled",
    "event",
    "name",
    "anonymous",
    "id",
    "transform",
    "visibility",
    "activatable",
    "rotation",
    "transformUnit",
    "scaleX",
    "scaleY",
    "translateX",
    "translateY",
    "translateZ",
    "statics",
    "ID_PREFIX",
    "__registry",
    "__idCounter",
    "__domUpdatedScheduleId",
    "onShutdown",
    "window",
    "clearTimeout",
    "ui",
    "mobile",
    "Widget",
    "getCurrentId",
    "registerWidget",
    "widget",
    "registry",
    "unregisterWidget",
    "getWidgetById",
    "scheduleDomUpdated",
    "setTimeout",
    "domUpdated",
    "GlobalError",
    "observeMethod",
    "clazz",
    "handler",
    "Appear",
    "refresh",
    "DomUpdatedHandler",
    "addAttributeMapping",
    "property",
    "attribute",
    "values",
    "ATTRIBUTE_MAPPING",
    "addStyleMapping",
    "style",
    "STYLE_MAPPING",
    "selectable",
    "readOnly",
    "members",
    "__containerElement",
    "__contentElement",
    "__layoutParent",
    "__layoutManager",
    "_getTagName",
    "dom",
    "Element",
    "create",
    "_domUpdated",
    "_transformId",
    "value",
    "_applyId",
    "old",
    "element",
    "getContainerElement",
    "_applyEnabled",
    "removeCssClass",
    "_setStyle",
    "getAnonymous",
    "addCssClass",
    "_add",
    "child",
    "layoutProperties",
    "_initializeChildLayout",
    "getContentElement",
    "appendChild",
    "push",
    "_addAt",
    "index",
    "options",
    "getLayoutParent",
    "lang",
    "Array",
    "remove",
    "ref",
    "_addBefore",
    "beforeWidget",
    "insertBefore",
    "_addAfter",
    "afterWidget",
    "length",
    "_getChildren",
    "_indexOf",
    "insertAfter",
    "_remove",
    "setLayoutParent",
    "_removeAt",
    "Error",
    "_removeAll",
    "children",
    "concat",
    "i",
    "l",
    "indexOf",
    "parent",
    "oldParent",
    "$$disposed",
    "removeChild",
    "layout",
    "_getLayout",
    "disconnectFromChildWidget",
    "_hasChildren",
    "_setLayout",
    "connectToWidget",
    "setLayoutProperties",
    "connectToChildWidget",
    "updateLayoutProperties",
    "updateLayout",
    "action",
    "_setHtml",
    "innerHTML",
    "_transform",
    "propertyValue",
    "getRotation",
    "getScaleX",
    "getScaleY",
    "resolutionFactor",
    "getTransformUnit",
    "getTranslateX",
    "getTranslateY",
    "isTransform3d",
    "Environment",
    "get",
    "getTranslateZ",
    "bom",
    "Style",
    "set",
    "_applyAttribute",
    "_setAttribute",
    "mapping",
    "Attribute",
    "reset",
    "_getAttribute",
    "_applyStyle",
    "_getStyle",
    "_applyDefaultCssClass",
    "cssClass",
    "add",
    "addCssClasses",
    "cssClasses",
    "addClasses",
    "hasCssClass",
    "removeCssClasses",
    "removeClasses",
    "toggleCssClass",
    "has",
    "_applyVisibility",
    "__setVisibility",
    "setVisibility",
    "show",
    "hide",
    "exclude",
    "isVisible",
    "getVisibility",
    "isHidden",
    "isExcluded",
    "isSeeable",
    "offsetWidth",
    "_getContentElement",
    "destroy",
    "dispose",
    "destruct",
    "ObjectRegistry",
    "inShutDown",
    "Registration",
    "removeAllListeners",
    "defer",
    "Lifecycle"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tino Butz (tbtz)\n\n************************************************************************ */\n\n/**\n * This is the base class for all mobile widgets.\n *\n * @use(qx.ui.mobile.core.EventHandler)\n * @require(qx.bom.Lifecycle)\n */\nqx.Class.define(\"qx.ui.mobile.core.Widget\", {\n  extend: qx.core.Object,\n  include: [qx.locale.MTranslation],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n\n    this._setContainerElement(this._createContainerElement());\n\n    // Init member variables\n\n    this.__children = [];\n\n    this.setId(this.getId());\n    this.initDefaultCssClass();\n    this.initName();\n    this.initAnonymous();\n    this.initActivatable();\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Fired if the mouse cursor moves over the widget. */\n    mousemove: \"qx.event.type.Mouse\",\n\n    /** Fired if the mouse cursor enters the widget. */\n    mouseover: \"qx.event.type.Mouse\",\n\n    /** Fired if the mouse cursor leaves widget. */\n    mouseout: \"qx.event.type.Mouse\",\n\n    /** Mouse button is pressed on the widget. */\n    mousedown: \"qx.event.type.Mouse\",\n\n    /** Mouse button is released on the widget. */\n    mouseup: \"qx.event.type.Mouse\",\n\n    /** Widget is clicked using left or middle button.\n        {@link qx.event.type.Mouse#getButton} for more details.*/\n    click: \"qx.event.type.Mouse\",\n\n    /** Widget is double clicked using left or middle button.\n        {@link qx.event.type.Mouse#getButton} for more details.*/\n    dblclick: \"qx.event.type.Mouse\",\n\n    /** Widget is clicked using the right mouse button. */\n    contextmenu: \"qx.event.type.Mouse\",\n\n    /** Fired before the context menu is opened. */\n    beforeContextmenuOpen: \"qx.event.type.Mouse\",\n\n    /** Fired if the mouse wheel is used over the widget. */\n    mousewheel: \"qx.event.type.MouseWheel\",\n\n    /** Fired if a touch at the screen is started. */\n    touchstart: \"qx.event.type.Touch\",\n\n    /** Fired if a touch at the screen has ended. */\n    touchend: \"qx.event.type.Touch\",\n\n    /** Fired during a touch at the screen. */\n    touchmove: \"qx.event.type.Touch\",\n\n    /** Fired if a touch at the screen is canceled. */\n    touchcancel: \"qx.event.type.Touch\",\n\n    /** Fired when a finger taps on the screen. */\n    tap: \"qx.event.type.Tap\",\n\n    /** Fired when a finger holds on the screen. */\n    longtap: \"qx.event.type.Tap\",\n\n    /** Fired when a finger swipes over the screen. */\n    swipe: \"qx.event.type.Touch\",\n\n    /** Fired when two pointers performing a rotate gesture on the screen. */\n    rotate: \"qx.event.type.Rotate\",\n\n    /** Fired when two pointers performing a pinch in/out gesture on the screen. */\n    pinch: \"qx.event.type.Pinch\",\n\n    /** Fired when an active pointer moves on the screen (after pointerdown till pointerup). */\n    track: \"qx.event.type.Track\",\n\n    /**\n     * This event if fired if a keyboard key is released.\n     **/\n    keyup: \"qx.event.type.KeySequence\",\n\n    /**\n     * This event if fired if a keyboard key is pressed down. This event is\n     * only fired once if the user keeps the key pressed for a while.\n     */\n    keydown: \"qx.event.type.KeySequence\",\n\n    /**\n     * This event is fired any time a key is pressed. It will be repeated if\n     * the user keeps the key pressed. The pressed key can be determined using\n     * {@link qx.event.type.KeySequence#getKeyIdentifier}.\n     */\n    keypress: \"qx.event.type.KeySequence\",\n\n    /**\n     * This event is fired if the pressed key or keys result in a printable\n     * character. Since the character is not necessarily associated with a\n     * single physical key press, the event does not have a key identifier\n     * getter. This event gets repeated if the user keeps pressing the key(s).\n     *\n     * The unicode code of the pressed key can be read using\n     * {@link qx.event.type.KeyInput#getCharCode}.\n     */\n    keyinput: \"qx.event.type.KeyInput\",\n\n    /**\n     * Fired after a massive DOM manipulation, e.g. when DOM elements were\n     * added or styles were changed. Listen to this event, if you need to\n     * recalculate a layout or have to update your view.\n     */\n    domupdated: \"qx.event.type.Event\",\n\n    /**\n     * Fired after the widget appears on the screen.\n     */\n    appear: \"qx.event.type.Event\",\n\n    /**\n     * Fired after the widget disappears from the screen.\n     */\n    disappear: \"qx.event.type.Event\",\n\n    /**\n     * The event is fired when the widget gets focused.\n     */\n    focus: \"qx.event.type.Focus\",\n\n    /**\n     * The event is fired when the widget gets blurred.\n     */\n    blur: \"qx.event.type.Focus\",\n\n    /**\n     * When the widget itself or any child of the widget receive the focus.\n     */\n    focusin: \"qx.event.type.Focus\",\n\n    /**\n     * When the widget itself or any child of the widget lost the focus.\n     */\n    focusout: \"qx.event.type.Focus\",\n\n    /**\n     * When the widget gets active (receives keyboard events etc.)\n     */\n    activate: \"qx.event.type.Focus\",\n\n    /**\n     * When the widget gets inactive\n     */\n    deactivate: \"qx.event.type.Focus\",\n\n    /**\n     * Fired when an active pointer moves on the screen or the mouse wheel is used.\n     */\n    roll: \"qx.event.type.Roll\"\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * The default CSS class used for this widget. The default CSS class\n     * should contain the common appearance of the widget.\n     * It is set to the container element of the widget. Use {@link #addCssClass}\n     * to enhance the default appearance of the widget.\n     */\n    defaultCssClass: {\n      check: \"String\",\n      init: null,\n      nullable: true,\n      apply: \"_applyDefaultCssClass\"\n    },\n\n    /**\n     * Whether this widget is enabled or not\n     */\n    enabled: {\n      init: true,\n      check: \"Boolean\",\n      nullable: false,\n      event: \"changeEnabled\",\n      apply: \"_applyEnabled\"\n    },\n\n    /**\n     * The name attribute of the container element. Useful when you want to find\n     * an element by its name attribute.\n     */\n    name: {\n      check: \"String\",\n      init: null,\n      nullable: true,\n      apply: \"_applyAttribute\"\n    },\n\n    /**\n     * Whether the widget should be the target of an event. Set this property\n     * to <code>false</code> when the widget is a child of another widget and\n     * shouldn't react on events.\n     */\n    anonymous: {\n      check: \"Boolean\",\n      init: null,\n      nullable: true,\n      apply: \"_applyStyle\"\n    },\n\n    /**\n     * The ID of the widget. When the ID is set to <code>null</code> an auto\n     * id will be generated.\n     */\n    id: {\n      check: \"String\",\n      init: null,\n      nullable: true,\n      apply: \"_applyId\",\n      transform: \"_transformId\",\n      event: \"changeId\"\n    },\n\n    /**\n     * Controls the visibility. Valid values are:\n     *\n     * <ul>\n     *   <li><b>visible</b>: Render the widget</li>\n     *   <li><b>hidden</b>: Hide the widget. The space will be still available.</li>\n     *   <li><b>excluded</b>: Hide the widget. The space will be released.</li>\n     * </ul>\n     */\n    visibility: {\n      check: [\"visible\", \"hidden\", \"excluded\"],\n      init: \"visible\",\n      apply: \"_applyVisibility\",\n      event: \"changeVisibility\"\n    },\n\n    /**\n     * Whether the widget can be activated or not. When the widget is activated\n     * a css class <code>active</code> is automatically added to the widget, which\n     * can indicate the activation status.\n     */\n    activatable: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyAttribute\"\n    },\n\n    /**\n     * Rotates the widget. Negative and positive values are allowed.\n     */\n    rotation: {\n      check: \"Number\",\n      nullable: true,\n      init: null,\n      apply: \"_transform\"\n    },\n\n    /**\n     * This property controls whether the transformation uses the length unit <code>px<code> or <code>rem</code>.\n     * This feature is important for creating a resolution independent transformation.\n     */\n    transformUnit: {\n      check: [\"rem\", \"px\"],\n      nullable: false,\n      init: \"rem\",\n      apply: \"_transform\"\n    },\n\n    /**\n     * Scales the widget in X direction (width).\n     */\n    scaleX: {\n      check: \"Number\",\n      nullable: true,\n      init: null,\n      apply: \"_transform\"\n    },\n\n    /**\n     * Scales the widget in Y direction (height).\n     */\n    scaleY: {\n      check: \"Number\",\n      nullable: true,\n      init: null,\n      apply: \"_transform\"\n    },\n\n    /**\n     * Moves the widget on X axis.\n     */\n    translateX: {\n      check: \"Number\",\n      nullable: true,\n      init: 0,\n      apply: \"_transform\"\n    },\n\n    /**\n     * Moves the widget on Y axis.\n     */\n    translateY: {\n      check: \"Number\",\n      nullable: true,\n      init: 0,\n      apply: \"_transform\"\n    },\n\n    /**\n     * Moves the widget on Z axis.\n     */\n    translateZ: {\n      check: \"Number\",\n      nullable: true,\n      init: 0,\n      apply: \"_transform\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** @type {String} Prefix for the auto id */\n    ID_PREFIX: \"qx_id_\",\n\n    /** @type {Map} Internal data structure to store widgets */\n    __registry: {},\n\n    /** @type {Integer} Incremental counter of the current id */\n    __idCounter: 0,\n\n    /** @type {Integer} ID of the timeout for the DOM update */\n    __domUpdatedScheduleId: null,\n\n    /**\n     * Event handler. Called when the application is in shutdown.\n     * @internal\n     */\n    onShutdown() {\n      window.clearTimeout(qx.ui.mobile.core.Widget.__domUpdatedScheduleId);\n      delete qx.ui.mobile.core.Widget.__registry;\n    },\n\n    /**\n     * Returns the current widget id of the registry.\n     * @return {Integer} The current id\n     * @internal\n     */\n\n    getCurrentId() {\n      return qx.ui.mobile.core.Widget.__idCounter;\n    },\n\n    /**\n     * Registers a widget with its id for internal widget handling.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to register\n     *\n     * @internal\n     */\n    registerWidget(widget) {\n      var id = widget.getId();\n      var registry = qx.ui.mobile.core.Widget.__registry;\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertUndefined(\n          registry[id],\n          \"Widget with the id '\" + id + \"' is already registered\"\n        );\n      }\n      registry[id] = widget;\n    },\n\n    /**\n     * Unregisters the widget with the given id.\n     *\n     * @param id {String} The id of the widget to unregister\n     *\n     * @internal\n     */\n    unregisterWidget(id) {\n      delete qx.ui.mobile.core.Widget.__registry[id];\n    },\n\n    /**\n     * Returns the widget with the given id.\n     *\n     * @param id {String} The id of the widget\n     * @return {qx.ui.core.Widget} The widget with the given id\n     */\n    getWidgetById(id) {\n      return qx.ui.mobile.core.Widget.__registry[id];\n    },\n\n    /**\n     * Schedules the {@link #domUpdated} method. The method will be called after a timeout\n     * to prevent the triggered events to be fired too often, during massive DOM manipulations.\n     *\n     * @internal\n     */\n    scheduleDomUpdated() {\n      if (qx.ui.mobile.core.Widget.__domUpdatedScheduleId == null) {\n        qx.ui.mobile.core.Widget.__domUpdatedScheduleId = window.setTimeout(\n          qx.ui.mobile.core.Widget.domUpdated,\n          0\n        );\n      }\n    },\n\n    /**\n     * Fires the DOM updated event directly. Triggers the {@link qx.event.handler.Appear#refresh} and\n     * {@link qx.ui.mobile.core.DomUpdatedHandler#refresh} methods. Do not use this\n     * method during massive DOM manipulations. Use {@link #scheduleDomUpdated} instead.\n     *\n     * @internal\n     */\n    domUpdated: qx.event.GlobalError.observeMethod(function () {\n      var clazz = qx.ui.mobile.core.Widget;\n      window.clearTimeout(clazz.__domUpdatedScheduleId);\n      clazz.__domUpdatedScheduleId = null;\n      qx.event.handler.Appear.refresh();\n      qx.ui.mobile.core.DomUpdatedHandler.refresh();\n    }),\n\n    /**\n     * Adds an attribute mapping entry. This entry is used by the {@link #_applyAttribute}\n     * method. Shortcut when the property name differs from the real\n     * attribute name. Use this method if you want to add an attribute entry to the mapping\n     * from the defer function of a different widget.\n     *\n     * e.g.:\n     * \"selectable\" :\n     * {\n     *   attribute : \"data-selectable\",\n     *   values :\n     *   {\n     *     \"true\" : null,\n     *     \"false\" : \"false\"\n     *   }\n     * }\n     *\n     * @param property {String} The property name\n     * @param attribute {String} The real attribute name\n     * @param values {Map} Values of the property to the real attribute value.\n     *      Use null, when you want not to set the attribute.\n     */\n    addAttributeMapping(property, attribute, values) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var attributeMapping = qx.ui.mobile.core.Widget.ATTRIBUTE_MAPPING;\n        qx.core.Assert.assertUndefined(\n          attributeMapping[property],\n          \"Attribute mapping for \" + property + \" already exists\"\n        );\n      }\n\n      qx.ui.mobile.core.Widget.ATTRIBUTE_MAPPING[property] = {\n        attribute: attribute,\n        values: values\n      };\n    },\n\n    /**\n     * Adds a style mapping entry. This entry is used by the {@link #_applyStyle}\n     * method. Shortcut when the property name differs from the real\n     * style name. Use this method if you want to add a style entry to the mapping\n     * from the defer function of a different widget.\n     *\n     * e.g.:\n     * \"anonymous\" :\n     * {\n     *  style : \"pointer-events\",\n     *  values :\n     *  {\n     *    \"true\" : \"none\",\n     *    \"false\" : null\n     *  }\n     * }\n     *\n     * @param property {String} The property name\n     * @param style {String} The real style name\n     * @param values {Map} Values of the property to the real style value.\n     *      Use null, when you want not to set the style.\n     */\n    addStyleMapping(property, style, values) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var styleMapping = qx.ui.mobile.core.Widget.STYLE_MAPPING;\n        qx.core.Assert.assertUndefined(\n          styleMapping[property],\n          \"Style mapping for \" + property + \" already exists\"\n        );\n      }\n\n      qx.ui.mobile.core.Widget.STYLE_MAPPING[property] = {\n        style: style,\n        values: values\n      };\n    },\n\n    /**\n     * Mapping of attribute properties to their real attribute name.\n     *\n     * @internal\n     */\n    ATTRIBUTE_MAPPING: {\n      selectable: {\n        attribute: \"data-selectable\",\n        values: {\n          true: null,\n          false: \"false\"\n        }\n      },\n\n      activatable: {\n        attribute: \"data-activatable\",\n        values: {\n          true: \"true\",\n          false: null\n        }\n      },\n\n      readOnly: {\n        attribute: \"readonly\"\n      }\n    },\n\n    /**\n     * Mapping of style properties to their real style name.\n     *\n     * @internal\n     */\n    STYLE_MAPPING: {\n      anonymous: {\n        style: \"pointerEvents\",\n        values: {\n          true: \"none\",\n          false: null\n        }\n      }\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __containerElement: null,\n    __contentElement: null,\n\n    __layoutParent: null,\n    __children: null,\n    __layoutManager: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      Basic Template\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the tag name of the container element of this widget.\n     * Override this method if you want to create a custom widget.\n     * @return {String} The container element's tag name\n     */\n    _getTagName() {\n      return \"div\";\n    },\n\n    /**\n     * Creates the container DOM element of the widget.\n     * Override this method if you want to create a custom widget.\n     *\n     * @return {Element} the container element.\n     */\n    _createContainerElement() {\n      return qx.dom.Element.create(this._getTagName());\n    },\n\n    /**\n     * Triggers the {@link #scheduleDomUpdated} method. This method needs to be called\n     * when the DOM has changed, e.g. an element was added / removed / styled.\n     */\n    _domUpdated() {\n      qx.ui.mobile.core.Widget.scheduleDomUpdated();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      ID Handling\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Transforms the value of the ID property. When the value is null, an auto\n     * generated ID is set. This makes sure that an ID is always set.\n     *\n     * @param value {String} The set id of the widget\n     * @return {String} The transformed ID\n     */\n    _transformId(value) {\n      if (value == null) {\n        var clazz = qx.ui.mobile.core.Widget;\n        value = clazz.ID_PREFIX + clazz.__idCounter++;\n      }\n      return value;\n    },\n\n    // property apply\n    _applyId(value, old) {\n      if (old != null) {\n        // Unregister widget with old id\n        qx.ui.mobile.core.Widget.unregisterWidget(old);\n      }\n      // Change the id of the DOM element\n      var element = this.getContainerElement();\n      element.id = value;\n      // Register the widget\n      qx.ui.mobile.core.Widget.registerWidget(this);\n    },\n\n    /**\n     * Sets the enable property to the new value\n     * @param value {Boolean}, the new value of the widget\n     * @param old {Boolean?}, the old value of the widget\n     *\n     */\n    _applyEnabled(value, old) {\n      if (value) {\n        this.removeCssClass(\"disabled\");\n        this._setStyle(\"anonymous\", this.getAnonymous());\n      } else {\n        this.addCssClass(\"disabled\");\n        this._setStyle(\"anonymous\", true);\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      Child Handling\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds a new child widget.\n     *\n     * @param child {qx.ui.core.Widget} the widget to add.\n     * @param layoutProperties {Map?null} Optional layout data for widget.\n     */\n    _add(child, layoutProperties) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (child.getLayoutParent() === this) {\n          throw new Error(\n            \"The widget is already added this widget. Please remove it first.\"\n          );\n        }\n      }\n\n      this._initializeChildLayout(child, layoutProperties);\n\n      this.getContentElement().appendChild(child.getContainerElement());\n      this.__children.push(child);\n\n      this._domUpdated();\n    },\n\n    /**\n     * Add a child widget at the specified index\n     *\n     * @param child {qx.ui.core.Widget} widget to add\n     * @param index {Integer} Index, at which the widget will be inserted. If no\n     *   widget exists at the given index, the new widget gets appended to the\n     *   current list of children.\n     * @param options {Map?null} Optional layout data for widget.\n     */\n    _addAt(child, index, options) {\n      // When moving in the same widget, remove widget first\n      if (child.getLayoutParent() == this) {\n        qx.lang.Array.remove(this.__children, child);\n      }\n\n      var ref = this.__children[index];\n\n      if (ref) {\n        this._addBefore(child, ref, options);\n      } else {\n        this._add(child, options);\n      }\n    },\n\n    /**\n     * Add a widget before another already inserted widget\n     *\n     * @param child {qx.ui.core.Widget} widget to add\n     * @param beforeWidget {qx.ui.core.Widget} widget before the new widget will be inserted.\n     * @param layoutProperties {Map?null} Optional layout data for widget.\n     */\n    _addBefore(child, beforeWidget, layoutProperties) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (child.getLayoutParent() === this) {\n          throw new Error(\n            \"The widget is already added this widget. Please remove it first.\"\n          );\n        }\n\n        this.assertInArray(\n          beforeWidget,\n          this._getChildren(),\n          \"The 'before' widget is not a child of this widget!\"\n        );\n      }\n\n      if (child == beforeWidget) {\n        return;\n      }\n\n      this._initializeChildLayout(child, layoutProperties);\n\n      this.getContentElement().insertBefore(\n        child.getContainerElement(),\n        beforeWidget.getContainerElement()\n      );\n\n      qx.lang.Array.insertBefore(this.__children, child, beforeWidget);\n\n      this._domUpdated();\n    },\n\n    /**\n     * Add a widget after another already inserted widget.\n     *\n     * @param child {qx.ui.core.Widget} The widget to add.\n     * @param afterWidget {qx.ui.core.Widget} Widget, after which the new widget will be inserted.\n     * @param layoutProperties {Map?null} Optional layout data for widget.\n     */\n    _addAfter(child, afterWidget, layoutProperties) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (child.getLayoutParent() === this) {\n          throw new Error(\n            \"The child is already added to this widget. Please remove it first.\"\n          );\n        }\n\n        this.assertInArray(\n          afterWidget,\n          this._getChildren(),\n          \"The 'after' widget is not a child of this widget!\"\n        );\n      }\n\n      if (child == afterWidget) {\n        return;\n      }\n\n      this._initializeChildLayout(child, layoutProperties);\n\n      var length = this._getChildren().length;\n      var index = this._indexOf(afterWidget);\n\n      if (index == length - 1) {\n        this.getContentElement().appendChild(child.getContainerElement());\n      } else {\n        var beforeWidget = this._getChildren()[index + 1];\n        this.getContentElement().insertBefore(\n          child.getContainerElement(),\n          beforeWidget.getContainerElement()\n        );\n      }\n\n      qx.lang.Array.insertAfter(this.__children, child, afterWidget);\n\n      this._domUpdated();\n    },\n\n    /**\n     * Removes a given child from the widget.\n     *\n     * @param child {qx.ui.core.Widget} The widget to remove.\n     */\n    _remove(child) {\n      child.setLayoutParent(null);\n      this._domUpdated();\n    },\n\n    /**\n     * Remove the widget at the specified index.\n     *\n     * @param index {Integer} Index of the widget to remove.\n     */\n    _removeAt(index) {\n      if (!this.__children) {\n        throw new Error(\"This widget has no children!\");\n      }\n\n      var child = this.__children[index];\n      this._remove(child);\n    },\n\n    /**\n     * Removes all children from the widget.\n     * @return {Array} An Array including the removed children.\n     */\n    _removeAll() {\n      // create a copy of the array\n      var children = this.__children.concat();\n      for (var i = 0, l = children.length; i < l; i++) {\n        this._remove(children[i]);\n      }\n      return children;\n    },\n\n    /**\n     * Returns the index position of the given widget if it is\n     * a child widget. Otherwise it returns <code>-1</code>.\n     *\n     * @param child {qx.ui.core.Widget} the widget to query for\n     * @return {Integer} The index position or <code>-1</code> when\n     *   the given widget is no child of this layout.\n     */\n    _indexOf(child) {\n      var children = this.__children;\n      if (!children) {\n        return -1;\n      }\n\n      return children.indexOf(child);\n    },\n\n    /**\n     * Internal method. Sets the layout parent.\n     *\n     * @param parent {qx.ui.mobile.core.Widget} The parent widget\n     *\n     * @internal\n     */\n    setLayoutParent(parent) {\n      if (this.__layoutParent === parent) {\n        return;\n      }\n\n      var oldParent = this.__layoutParent;\n      if (oldParent && !oldParent.$$disposed) {\n        this.__layoutParent.removeChild(this);\n      }\n\n      this.__layoutParent = parent || null;\n    },\n\n    /**\n     * Internal method. Removes a given child widget and the corresponding DOM element.\n     *\n     * @param child {qx.ui.core.Widget} The widget to remove\n     *\n     * @internal\n     */\n    removeChild(child) {\n      qx.lang.Array.remove(this.__children, child);\n      this.getContentElement().removeChild(child.getContainerElement());\n      var layout = this._getLayout();\n      if (layout) {\n        layout.disconnectFromChildWidget(child);\n      }\n    },\n\n    /**\n     * Returns the parent widget of this widget.\n     *\n     * @return {qx.ui.core.Widget} The parent of the widget\n     */\n    getLayoutParent() {\n      return this.__layoutParent;\n    },\n\n    /**\n     * Returns the children of the widget.\n     *\n     * @return {qx.ui.core.Widget[]} The children of the widget\n     */\n    _getChildren() {\n      return this.__children;\n    },\n\n    /**\n     * Whether the widget has child widgets.\n     *\n     * @return {Boolean} Whether the widget has children or not.\n     */\n    _hasChildren() {\n      return this.__children && this.__children.length > 0;\n    },\n\n    /*\n     ---------------------------------------------------------------------------\n       Layout handling\n     ---------------------------------------------------------------------------\n     */\n\n    /**\n     * Set a layout manager for the widget. A layout manager can only be connected\n     * with one widget. Reset the connection with a previous widget first, if you\n     * like to use it in another widget instead.\n     *\n     * @param layout {qx.ui.mobile.layout.Abstract} The new layout or\n     *     <code>null</code> to reset the layout.\n     */\n    _setLayout(layout) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (layout) {\n          this.assertInstance(layout, qx.ui.mobile.layout.Abstract);\n        }\n      }\n\n      if (this.__layoutManager) {\n        this.__layoutManager.connectToWidget(null);\n        for (var i = 0; i < this._getChildren().length; i++) {\n          var child = this._getChildren()[i];\n          this.__layoutManager.disconnectFromChildWidget(child);\n        }\n      }\n\n      if (layout) {\n        layout.connectToWidget(this);\n      }\n      this.__layoutManager = layout;\n      this._domUpdated();\n    },\n\n    /**\n     * Initializes the layout of the given child widget.\n     *\n     * @param child {qx.ui.core.Widget} The child widget\n     * @param layoutProperties {Map?null} Optional layout data for widget\n     */\n    _initializeChildLayout(child, layoutProperties) {\n      child.setLayoutParent(this);\n      child.setLayoutProperties(layoutProperties);\n      var layout = this._getLayout();\n      if (layout) {\n        layout.connectToChildWidget(child);\n      }\n    },\n\n    /**\n     * Returns the set layout manager for the widget.\n     *\n     * @return  {qx.ui.mobile.layout.Abstract} the layout manager of the widget.\n     */\n    _getLayout() {\n      return this.__layoutManager;\n    },\n\n    /**\n     * Stores the given layout properties.\n     *\n     * @param properties {Map} Incoming layout property data\n     */\n    setLayoutProperties(properties) {\n      // Check values through parent\n      var parent = this.getLayoutParent();\n      if (parent) {\n        parent.updateLayoutProperties(this, properties);\n      }\n    },\n\n    /**\n     * Updates the layout properties of a given widget.\n     *\n     * @param widget {qx.ui.mobile.core.Widget} The widget that should be updated\n     * @param properties {Map} Incoming layout property data\n     *\n     * @internal\n     */\n    updateLayoutProperties(widget, properties) {\n      var layout = this._getLayout();\n      if (layout) {\n        layout.setLayoutProperties(widget, properties);\n      }\n      this._domUpdated();\n    },\n\n    /**\n     * Updates the layout with the given arguments.\n     *\n     * @param widget {qx.ui.mobile.core.Widget} The target widget\n     * @param action {String} The causing action that triggered the layout update.\n     * @param properties {Map} The animation properties to set. Key / value pairs.\n     *\n     * @internal\n     */\n    updateLayout(widget, action, properties) {\n      var layout = this._getLayout();\n      if (layout) {\n        layout.updateLayout(widget, action, properties);\n      }\n      this._domUpdated();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      Content handling\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets the innerHTML of the content element and calls the {@link #_domUpdated}\n     * method.\n     *\n     * @param value {String?\"\"} The html to set in the content element.\n     */\n    _setHtml(value) {\n      this.getContentElement().innerHTML = value || \"\";\n      this._domUpdated();\n    },\n\n    /**\n     * Transforms this widget (rotate, scale, translate3d)\n     */\n    _transform() {\n      var propertyValue = \"\";\n      if (this.getRotation() != null) {\n        propertyValue =\n          propertyValue + \"rotate(\" + this.getRotation() + \"deg) \";\n      }\n\n      if (this.getScaleX() != null && this.getScaleY() != null) {\n        propertyValue =\n          propertyValue +\n          \"scale(\" +\n          this.getScaleX() +\n          \",\" +\n          this.getScaleY() +\n          \") \";\n      }\n\n      var resolutionFactor = 1;\n      if (this.getTransformUnit() == \"rem\") {\n        resolutionFactor = 16;\n      }\n\n      if (this.getTranslateX() != null && this.getTranslateY() != null) {\n        var isTransform3d = qx.core.Environment.get(\"css.transform.3d\");\n        if (isTransform3d && this.getTranslateZ() != null) {\n          propertyValue =\n            propertyValue +\n            \"translate3d(\" +\n            this.getTranslateX() / resolutionFactor +\n            this.getTransformUnit() +\n            \",\" +\n            this.getTranslateY() / resolutionFactor +\n            this.getTransformUnit() +\n            \",\" +\n            this.getTranslateZ() / resolutionFactor +\n            this.getTransformUnit() +\n            \") \";\n        } else {\n          propertyValue =\n            propertyValue +\n            \"translate(\" +\n            this.getTranslateX() / resolutionFactor +\n            this.getTransformUnit() +\n            \",\" +\n            this.getTranslateY() / resolutionFactor +\n            this.getTransformUnit() +\n            \") \";\n        }\n      }\n\n      qx.bom.element.Style.set(\n        this.getContainerElement(),\n        \"transform\",\n        propertyValue\n      );\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      Attributes handling\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Shortcut for each property that should change a certain attribute of the\n     * container element.\n     * Use the {@link #addAttributeMapping} method to add a property to attribute\n     * mapping when the attribute name or value differs from the property name or\n     * value.\n     *\n     * @param value {var} The set value\n     * @param old {var} The old value\n     * @param attribute {String} The property name\n     */\n    _applyAttribute(value, old, attribute) {\n      this._setAttribute(attribute, value);\n    },\n\n    /**\n     * Sets an attribute with the given value of the container element. The\n     * <code>null</code> value resets the attribute.\n     *\n     * @param attribute {String} The attribute name.\n     * @param value {var} The attribute value. <code>Null</code> will reset the attribute.\n     */\n    _setAttribute(attribute, value) {\n      var mapping = qx.ui.mobile.core.Widget.ATTRIBUTE_MAPPING[attribute];\n      if (mapping) {\n        attribute = mapping.attribute || attribute;\n        var values = mapping.values;\n        value =\n          values && typeof values[value] !== \"undefined\"\n            ? values[value]\n            : value;\n      }\n\n      var element = this.getContainerElement();\n      if (value != null) {\n        qx.bom.element.Attribute.set(element, attribute, value);\n      } else {\n        qx.bom.element.Attribute.reset(element, attribute);\n      }\n      this._domUpdated();\n    },\n\n    /**\n     * Returns the set value of the given attribute.\n     *\n     * @param attribute {String} The attribute name\n     * @return {var} The attribute's value\n     */\n    _getAttribute(attribute) {\n      var element = this.getContainerElement();\n      return qx.bom.element.Attribute.get(element, attribute);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      Styles handling\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Shortcut for each property that should change a certain style of the container\n     * element.\n     * Use the {@link #addStyleMapping} method to add a property to style\n     * mapping when the style name or value differs from the property name or\n     * value.\n     */\n    _applyStyle(value, old, style) {\n      this._setStyle(style, value);\n    },\n\n    /**\n     * Sets the value of a certain style of the container element. The\n     * <code>null</code> value resets the attribute.\n     *\n     * @param style {String} The style of which the value should be set\n     * @param value {var} The value of the style. <code>Null</code> will reset the attribute.\n     */\n    _setStyle(style, value) {\n      var mapping = qx.ui.mobile.core.Widget.STYLE_MAPPING[style];\n      if (mapping) {\n        style = mapping.style || style;\n        value = mapping.values[value];\n      }\n\n      var element = this.getContainerElement();\n      if (value != null) {\n        qx.bom.element.Style.set(element, style, value);\n      } else {\n        qx.bom.element.Style.reset(element, style);\n      }\n      this._domUpdated();\n    },\n\n    /**\n     * Returns the value of a certain style of the container element.\n     *\n     * @param style {String} The style name of which the value should be returned\n     * @return {var} The value of the style\n     */\n    _getStyle(style) {\n      var element = this.getContainerElement();\n      return qx.bom.element.Style.get(element, style);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      CSS Handling\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyDefaultCssClass(value, old) {\n      if (old) {\n        this.removeCssClass(old);\n      }\n      if (value) {\n        this.addCssClass(value);\n      }\n    },\n\n    /**\n     * Adds a CSS class to the container element of the widget. Use this method\n     * to enhance the default appearance of the widget.\n     *\n     * @param cssClass {String} The CSS class to add\n     */\n    addCssClass(cssClass) {\n      qx.bom.element.Class.add(this.getContainerElement(), cssClass);\n      this._domUpdated();\n    },\n\n    /**\n     * Adds an array of CSS classes to the container element of the widget. Use this method\n     * to enhance the default appearance of the widget.\n     *\n     * @param cssClasses {String[]} The CSS classes to add, wrapped by an array.\n     */\n    addCssClasses(cssClasses) {\n      if (cssClasses) {\n        qx.bom.element.Class.addClasses(this.getContainerElement(), cssClasses);\n        this._domUpdated();\n      }\n    },\n\n    /**\n     * Removes a CSS class from the container element of the widget.\n     *\n     * @param cssClass {String} The CSS class to remove\n     */\n    removeCssClass(cssClass) {\n      if (this.hasCssClass(cssClass)) {\n        qx.bom.element.Class.remove(this.getContainerElement(), cssClass);\n        this._domUpdated();\n      }\n    },\n\n    /**\n     * Removes an array of CSS classes from the container element of the widget.\n     *\n     * @param cssClasses {String[]} The CSS classes to remove from widget.\n     */\n    removeCssClasses(cssClasses) {\n      if (cssClasses) {\n        qx.bom.element.Class.removeClasses(\n          this.getContainerElement(),\n          cssClasses\n        );\n\n        this._domUpdated();\n      }\n    },\n\n    /**\n     * Toggles the given CSS. Adds or removes the CSS class from the container element of the widget.\n     *\n     * @param cssClass {String} The CSS class to toggle\n     */\n    toggleCssClass(cssClass) {\n      if (this.hasCssClass(cssClass)) {\n        this.removeCssClass(cssClass);\n      } else {\n        this.addCssClass(cssClass);\n      }\n    },\n\n    /**\n     * Checks if the widget has a certain CSS class set.\n     *\n     * @param cssClass {String} The CSS class to check\n     * @return {Boolean} Whether the CSS class is set or not\n     */\n    hasCssClass(cssClass) {\n      return qx.bom.element.Class.has(this.getContainerElement(), cssClass);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      Visibility handling\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyVisibility(value, old) {\n      if (value == \"excluded\") {\n        this.addCssClass(\"exclude\");\n      } else if (value == \"visible\") {\n        this.removeCssClass(\"exclude\");\n        this._setStyle(\"visibility\", \"visible\");\n      } else if (value == \"hidden\") {\n        this._setStyle(\"visibility\", \"hidden\");\n      }\n      this._domUpdated();\n    },\n\n    /**\n     * Sets the visibility of the widget.\n     *\n     * @param action {String} The causing action that triggered the layout update.\n     * @param properties {Map} The animation properties to set. Key / value pairs.\n     */\n    __setVisibility(action, properties) {\n      this.setVisibility(action);\n\n      var parent = this.getLayoutParent();\n      if (parent) {\n        parent.updateLayout(this, action, properties);\n      }\n    },\n\n    /**\n     * Make this widget visible.\n     *\n     * @param properties {Map} The animation properties to set. Key / value pairs.\n     *\n     */\n    show(properties) {\n      this.__setVisibility(\"visible\", properties);\n    },\n\n    /**\n     * Hide this widget.\n     *\n     * @param properties {Map} The animation properties to set. Key / value pairs.\n     *\n     */\n    hide(properties) {\n      this.__setVisibility(\"hidden\", properties);\n    },\n\n    /**\n     * Hide this widget and exclude it from the underlying layout.\n     *\n     * @param properties {Map} The animation properties to set. Key / value pairs.\n     *\n     */\n    exclude(properties) {\n      this.__setVisibility(\"excluded\", properties);\n    },\n\n    /**\n     * Whether the widget is locally visible.\n     *\n     * Note: This method does not respect the hierarchy.\n     *\n     * @return {Boolean} Returns <code>true</code> when the widget is visible\n     */\n    isVisible() {\n      return this.getVisibility() === \"visible\";\n    },\n\n    /**\n     * Whether the widget is locally hidden.\n     *\n     * Note: This method does not respect the hierarchy.\n     *\n     * @return {Boolean} Returns <code>true</code> when the widget is hidden\n     */\n    isHidden() {\n      return this.getVisibility() !== \"visible\";\n    },\n\n    /**\n     * Whether the widget is locally excluded.\n     *\n     * Note: This method does not respect the hierarchy.\n     *\n     * @return {Boolean} Returns <code>true</code> when the widget is excluded\n     */\n    isExcluded() {\n      return this.getVisibility() === \"excluded\";\n    },\n\n    /**\n     * Detects if the widget and all its parents are visible.\n     *\n     * Warning: forces rendering of the browser. Do not use this method during\n     * animations or performance critical tasks.\n     * @return {Boolean} <code>true</code>if the widget is seeable\n     */\n    isSeeable() {\n      return this.getContainerElement().offsetWidth > 0;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n     Element handling\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets the container DOM element of the widget.\n     *\n     * @param element {Element} The container DOM element of the widget\n     */\n    _setContainerElement(element) {\n      this.__containerElement = element;\n    },\n\n    /**\n     * Returns the container DOM element of the widget.\n     *\n     * @return {Element} the container DOM element of the widget\n     *\n     * @internal\n     */\n    getContainerElement() {\n      return this.__containerElement;\n    },\n\n    /**\n     * Returns the content DOM element of the widget.\n     *\n     * @return {Element} the content DOM element of the widget\n     *\n     * @internal\n     */\n    getContentElement() {\n      if (!this.__contentElement) {\n        this.__contentElement = this._getContentElement();\n      }\n      return this.__contentElement;\n    },\n\n    /**\n     * Returns the content DOM element of the widget.\n     * Override this method, to define another element as the content element.\n     *\n     * Note: Most times this element points to to the container element.\n     * When the widget has a more complex element structure,\n     * the function should return a reference of the element that should contain\n     * the content.\n     *\n     * @return {Element} the content DOM element of the widget\n     */\n    _getContentElement() {\n      return this.getContainerElement();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      ENHANCED DISPOSE SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Removes this widget from its parent and disposes it.\n     */\n    destroy() {\n      if (this.$$disposed) {\n        return;\n      }\n\n      var parent = this.__layoutParent;\n      if (parent) {\n        parent._remove(this);\n      }\n      this.dispose();\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    if (!qx.core.ObjectRegistry.inShutDown) {\n      // Cleanup event listeners\n      // Needed as we rely on the containerElement in the qx.ui.mobile.core.EventHandler\n      qx.event.Registration.removeAllListeners(this);\n\n      if (this.getId()) {\n        qx.ui.mobile.core.Widget.unregisterWidget(this.getId());\n      }\n    }\n\n    this.__layoutParent =\n      this.__containerElement =\n      this.__contentElement =\n        null;\n    if (this.__layoutManager) {\n      this.__layoutManager.dispose();\n    }\n    this.__layoutManager = null;\n  },\n\n  /*\n  *****************************************************************************\n     DEFER\n  *****************************************************************************\n  */\n\n  defer(statics) {\n    qx.bom.Lifecycle.onShutdown(statics.onShutdown, statics);\n  }\n});\n"
  ]
}