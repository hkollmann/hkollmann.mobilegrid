{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/mobile/core/MChildrenHandling.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "getChildren",
    "_getChildren",
    "hasChildren",
    "_hasChildren",
    "indexOf",
    "child",
    "_indexOf",
    "add",
    "layoutProperties",
    "_add",
    "addAt",
    "index",
    "options",
    "_addAt",
    "addBefore",
    "before",
    "_addBefore",
    "addAfter",
    "after",
    "_addAfter",
    "remove",
    "_remove",
    "removeAt",
    "_removeAt",
    "removeAll",
    "_removeAll",
    "statics",
    "remap",
    "ui",
    "mobile",
    "core",
    "MChildrenHandling"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tino Butz (tbtz)\n\n************************************************************************ */\n\n/**\n * This mixin exposes all basic methods to manage widget children as public methods.\n * It can only be included into instances of {@link Widget}.\n *\n * To optimize the method calls the including widget should call the method\n * {@link #remap} in its defer function. This will map the protected\n * methods to the public ones and save one method call for each function.\n */\nqx.Mixin.define(\"qx.ui.mobile.core.MChildrenHandling\", {\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /**\n     * Returns the children list\n     *\n     * @return {qx.ui.core.Widget[]} The children array (Arrays are\n     *   reference types, please do not modify them in-place)\n     */\n    getChildren() {\n      return this._getChildren();\n    },\n\n    /**\n     * Whether the widget contains children.\n     *\n     * @return {Boolean} Returns <code>true</code> when the widget has children.\n     */\n    hasChildren() {\n      return this._hasChildren();\n    },\n\n    /**\n     * Returns the index position of the given widget if it is\n     * a child widget. Otherwise it returns <code>-1</code>.\n     *\n     * @param child {qx.ui.core.Widget} the widget to query for\n     * @return {Integer} The index position or <code>-1</code> when\n     *   the given widget is no child of this layout.\n     */\n    indexOf(child) {\n      return this._indexOf(child);\n    },\n\n    /**\n     * Adds a new child widget.\n     *\n     * @param child {qx.ui.core.Widget} the widget to add.\n     * @param layoutProperties {Map?null} Optional layout data for widget.\n     */\n    add(child, layoutProperties) {\n      this._add(child, layoutProperties);\n    },\n\n    /**\n     * Add a child widget at the specified index\n     *\n     * @param child {qx.ui.core.Widget} widget to add\n     * @param index {Integer} Index, at which the widget will be inserted\n     * @param options {Map?null} Optional layout data for widget.\n     */\n    addAt(child, index, options) {\n      this._addAt(child, index, options);\n    },\n\n    /**\n     * Add a widget before another already inserted widget\n     *\n     * @param child {qx.ui.core.Widget} Widget to add\n     * @param before {qx.ui.core.Widget} Widget before the new widget will be inserted.\n     * @param layoutProperties {Map?null} Optional layout data for widget.\n     */\n    addBefore(child, before, layoutProperties) {\n      this._addBefore(child, before, layoutProperties);\n    },\n\n    /**\n     * Add a widget after another already inserted widget\n     *\n     * @param child {qx.ui.core.Widget} Widget to add\n     * @param after {qx.ui.core.Widget} Widget, after which the new widget will be inserted\n     * @param layoutProperties {Map?null} Optional layout data for widget.\n     */\n    addAfter(child, after, layoutProperties) {\n      this._addAfter(child, after, layoutProperties);\n    },\n\n    /**\n     * Remove the given child widget.\n     *\n     * @param child {qx.ui.core.Widget} the widget to remove\n     */\n    remove(child) {\n      this._remove(child);\n    },\n\n    /**\n     * Remove the widget at the specified index.\n     *\n     * @param index {Integer} Index of the widget to remove.\n     */\n    removeAt(index) {\n      this._removeAt(index);\n    },\n\n    /**\n     * Remove all children.\n     */\n    removeAll() {\n      this._removeAll();\n    }\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Mapping of protected methods to public.\n     * This omits an additional function call when using these methods. Call\n     * this methods in the defer block of the including class.\n     *\n     * @param members {Map} The including classes members map\n     */\n    remap(members) {\n      members.getChildren = members._getChildren;\n      members.hasChildren = members._hasChildren;\n      members.indexOf = members._indexOf;\n\n      members.add = members._add;\n      members.addAt = members._addAt;\n      members.addBefore = members._addBefore;\n      members.addAfter = members._addAfter;\n\n      members.remove = members._remove;\n      members.removeAt = members._removeAt;\n      members.removeAll = members._removeAll;\n    }\n  }\n});\n"
  ]
}