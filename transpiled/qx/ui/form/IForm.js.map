{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/form/IForm.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "events",
    "changeEnabled",
    "changeValid",
    "changeInvalidMessage",
    "changeRequired",
    "members",
    "setEnabled",
    "enabled",
    "arguments",
    "length",
    "getEnabled",
    "setRequired",
    "required",
    "getRequired",
    "setValid",
    "valid",
    "getValid",
    "setInvalidMessage",
    "message",
    "getInvalidMessage",
    "setRequiredInvalidMessage",
    "getRequiredInvalidMessage",
    "ui",
    "form",
    "IForm"
  ],
  "mappings": ";;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,SAAH,CAAaC,MAAb,CAAoB,kBAApB,EAAwC;AACtC;AACF;AACA;AACA;AACA;AAEEC,IAAAA,MAAM,EAAE;AACN;AACAC,MAAAA,aAAa,EAAE,oBAFT;;AAIN;AACAC,MAAAA,WAAW,EAAE,oBALP;;AAON;AACAC,MAAAA,oBAAoB,EAAE,oBARhB;;AAUN;AACAC,MAAAA,cAAc,EAAE;AAXV,KAP8B;;AAqBtC;AACF;AACA;AACA;AACA;AAEEC,IAAAA,OAAO,EAAE;AACP;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACIC,MAAAA,UAZO,sBAYIC,OAZJ,EAYa;AAClB,eAAOC,SAAS,CAACC,MAAV,IAAoB,CAA3B;AACD,OAdM;;AAgBP;AACJ;AACA;AACA;AACA;AACIC,MAAAA,UArBO,wBAqBM,CAAE,CArBR;;AAuBP;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACIC,MAAAA,WAlCO,uBAkCKC,QAlCL,EAkCe;AACpB,eAAOJ,SAAS,CAACC,MAAV,IAAoB,CAA3B;AACD,OApCM;;AAsCP;AACJ;AACA;AACA;AACA;AACII,MAAAA,WA3CO,yBA2CO,CAAE,CA3CT;;AA6CP;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACIC,MAAAA,QAxDO,oBAwDEC,KAxDF,EAwDS;AACd,eAAOP,SAAS,CAACC,MAAV,IAAoB,CAA3B;AACD,OA1DM;;AA4DP;AACJ;AACA;AACA;AACA;AACIO,MAAAA,QAjEO,sBAiEI,CAAE,CAjEN;;AAmEP;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACIC,MAAAA,iBA9EO,6BA8EWC,OA9EX,EA8EoB;AACzB,eAAOV,SAAS,CAACC,MAAV,IAAoB,CAA3B;AACD,OAhFM;;AAkFP;AACJ;AACA;AACA;AACA;AACIU,MAAAA,iBAvFO,+BAuFa,CAAE,CAvFf;;AAyFP;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACIC,MAAAA,yBApGO,qCAoGmBF,OApGnB,EAoG4B;AACjC,eAAOV,SAAS,CAACC,MAAV,IAAoB,CAA3B;AACD,OAtGM;;AAwGP;AACJ;AACA;AACA;AACA;AACIY,MAAAA,yBA7GO,uCA6GqB,CAAE;AA7GvB;AA3B6B,GAAxC;AAtBA3B,EAAAA,EAAE,CAAC4B,EAAH,CAAMC,IAAN,CAAWC,KAAX,CAAiB3B,aAAjB,GAAiCA,aAAjC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * Form interface for all form widgets. It includes the API for enabled,\n * required and valid states.\n */\nqx.Interface.define(\"qx.ui.form.IForm\", {\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Fired when the enabled state was modified */\n    changeEnabled: \"qx.event.type.Data\",\n\n    /** Fired when the valid state was modified */\n    changeValid: \"qx.event.type.Data\",\n\n    /** Fired when the invalidMessage was modified */\n    changeInvalidMessage: \"qx.event.type.Data\",\n\n    /** Fired when the required was modified */\n    changeRequired: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /*\n    ---------------------------------------------------------------------------\n      ENABLED PROPERTY\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Set the enabled state of the widget.\n     *\n     * @param enabled {Boolean} The enabled state.\n     */\n    setEnabled(enabled) {\n      return arguments.length == 1;\n    },\n\n    /**\n     * Return the current set enabled state.\n     *\n     * @return {Boolean} If the widget is enabled.\n     */\n    getEnabled() {},\n\n    /*\n    ---------------------------------------------------------------------------\n      REQUIRED PROPERTY\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets the required state of a widget.\n     *\n     * @param required {Boolean} A flag signaling if the widget is required.\n     */\n    setRequired(required) {\n      return arguments.length == 1;\n    },\n\n    /**\n     * Return the current required state of the widget.\n     *\n     * @return {Boolean} True, if the widget is required.\n     */\n    getRequired() {},\n\n    /*\n    ---------------------------------------------------------------------------\n      VALID PROPERTY\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets the valid state of the widget.\n     *\n     * @param valid {Boolean} The valid state of the widget.\n     */\n    setValid(valid) {\n      return arguments.length == 1;\n    },\n\n    /**\n     * Returns the valid state of the widget.\n     *\n     * @return {Boolean} If the state of the widget is valid.\n     */\n    getValid() {},\n\n    /*\n    ---------------------------------------------------------------------------\n      INVALID MESSAGE PROPERTY\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets the invalid message of the widget.\n     *\n     * @param message {String} The invalid message.\n     */\n    setInvalidMessage(message) {\n      return arguments.length == 1;\n    },\n\n    /**\n     * Returns the invalid message of the widget.\n     *\n     * @return {String} The current set message.\n     */\n    getInvalidMessage() {},\n\n    /*\n    ---------------------------------------------------------------------------\n      REQUIRED INVALID MESSAGE PROPERTY\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets the invalid message if required of the widget.\n     *\n     * @param message {String} The invalid message.\n     */\n    setRequiredInvalidMessage(message) {\n      return arguments.length == 1;\n    },\n\n    /**\n     * Returns the invalid message if required of the widget.\n     *\n     * @return {String} The current set message.\n     */\n    getRequiredInvalidMessage() {}\n  }\n});\n"
  ]
}