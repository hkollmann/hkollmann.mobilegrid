{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/form/RadioGroup.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "ui",
    "ISingleSelection",
    "form",
    "IField",
    "IForm",
    "IModelSelection",
    "include",
    "MSingleSelectionHandling",
    "MModelSelection",
    "construct",
    "varargs",
    "__items",
    "addListener",
    "__onChangeSelection",
    "add",
    "apply",
    "arguments",
    "properties",
    "groupedProperty",
    "check",
    "event",
    "init",
    "groupProperty",
    "enabled",
    "wrap",
    "allowEmptySelection",
    "valid",
    "required",
    "invalidMessage",
    "requiredInvalidMessage",
    "nullable",
    "members",
    "getItems",
    "items",
    "item",
    "getGroupedProperty",
    "groupedPropertyUp",
    "lang",
    "String",
    "firstUp",
    "i",
    "l",
    "length",
    "includes",
    "_onItemChangeChecked",
    "push",
    "set",
    "getGroupProperty",
    "get",
    "setSelection",
    "isAllowEmptySelection",
    "getSelection",
    "remove",
    "Array",
    "reset",
    "removeListener",
    "resetSelection",
    "getChildren",
    "e",
    "getTarget",
    "_applyGroupedProperty",
    "value",
    "old",
    "oldFirstUp",
    "newFirstUp",
    "_applyInvalidMessage",
    "setInvalidMessage",
    "_applyValid",
    "setValid",
    "_applyEnabled",
    "resetEnabled",
    "setEnabled",
    "_applyAllowEmptySelection",
    "isSelectionEmpty",
    "selectNext",
    "index",
    "indexOf",
    "getWrap",
    "Math",
    "min",
    "getEnabled",
    "selectPrevious",
    "max",
    "_getItems",
    "_isAllowEmptySelection",
    "_isItemSelectable",
    "getData",
    "getOldData",
    "__isGroupFocused",
    "isFocusable",
    "focus",
    "focusHandler",
    "FocusHandler",
    "getInstance",
    "isFocused",
    "destruct",
    "_disposeArray",
    "RadioGroup"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Christian Hagendorn (chris_schmidt)\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * The radio group handles a collection of items from which only one item\n * can be selected. Selection another item will deselect the previously selected\n * item.\n *\n * This class is e.g. used to create radio groups or {@link qx.ui.form.RadioButton}\n * or {@link qx.ui.toolbar.RadioButton} instances.\n *\n * We also offer a widget for the same purpose which uses this class. So if\n * you like to act with a widget instead of a pure logic coupling of the\n * widgets, take a look at the {@link qx.ui.form.RadioButtonGroup} widget.\n */\nqx.Class.define(\"qx.ui.form.RadioGroup\", {\n  extend: qx.core.Object,\n  implement: [\n    qx.ui.core.ISingleSelection,\n    qx.ui.form.IField,\n    qx.ui.form.IForm,\n    qx.ui.form.IModelSelection\n  ],\n\n  include: [qx.ui.core.MSingleSelectionHandling, qx.ui.form.MModelSelection],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param varargs {qx.core.Object} A variable number of items, which are\n   *     initially added to the radio group, the first item will be selected.\n   */\n  construct(varargs) {\n    super();\n\n    // create item array\n    this.__items = [];\n\n    // add listener before call add!!!\n    this.addListener(\"changeSelection\", this.__onChangeSelection, this);\n\n    if (varargs != null) {\n      this.add.apply(this, arguments);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * The property name in each of the added widgets that is grouped\n     */\n    groupedProperty: {\n      check: \"String\",\n      apply: \"_applyGroupedProperty\",\n      event: \"changeGroupedProperty\",\n      init: \"value\"\n    },\n\n    /**\n     * The property name in each of the added widgets that is informed of the\n     * RadioGroup object it is a member of\n     */\n    groupProperty: {\n      check: \"String\",\n      event: \"changeGroupProperty\",\n      init: \"group\"\n    },\n\n    /**\n     * Whether the radio group is enabled\n     */\n    enabled: {\n      check: \"Boolean\",\n      apply: \"_applyEnabled\",\n      event: \"changeEnabled\",\n      init: true\n    },\n\n    /**\n     * Whether the selection should wrap around. This means that the successor of\n     * the last item is the first item.\n     */\n    wrap: {\n      check: \"Boolean\",\n      init: true\n    },\n\n    /**\n     * If is set to <code>true</code> the selection could be empty,\n     * otherwise is always one <code>RadioButton</code> selected.\n     */\n    allowEmptySelection: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyAllowEmptySelection\"\n    },\n\n    /**\n     * Flag signaling if the group at all is valid. All children will have the\n     * same state.\n     */\n    valid: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyValid\",\n      event: \"changeValid\"\n    },\n\n    /**\n     * Flag signaling if the group is required.\n     */\n    required: {\n      check: \"Boolean\",\n      init: false,\n      event: \"changeRequired\"\n    },\n\n    /**\n     * Message which is shown in an invalid tooltip.\n     */\n    invalidMessage: {\n      check: \"String\",\n      init: \"\",\n      event: \"changeInvalidMessage\",\n      apply: \"_applyInvalidMessage\"\n    },\n\n    /**\n     * Message which is shown in an invalid tooltip if the {@link #required} is\n     * set to true.\n     */\n    requiredInvalidMessage: {\n      check: \"String\",\n      nullable: true,\n      event: \"changeInvalidMessage\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /** @type {qx.ui.form.IRadioItem[]} The items of the radio group */\n    __items: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      UTILITIES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get all managed items\n     *\n     * @return {qx.ui.form.IRadioItem[]} All managed items.\n     */\n    getItems() {\n      return this.__items;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      REGISTRY\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Add the passed items to the radio group.\n     *\n     * @param varargs {qx.ui.form.IRadioItem} A variable number of items to add.\n     */\n    add(varargs) {\n      var items = this.__items;\n      var item;\n      var groupedProperty = this.getGroupedProperty();\n      var groupedPropertyUp = qx.lang.String.firstUp(groupedProperty);\n\n      for (var i = 0, l = arguments.length; i < l; i++) {\n        item = arguments[i];\n\n        if (items.includes(item)) {\n          continue;\n        }\n\n        // Register listeners\n        item.addListener(\n          \"change\" + groupedPropertyUp,\n          this._onItemChangeChecked,\n          this\n        );\n\n        // Push RadioButton to array\n        items.push(item);\n\n        // Inform radio button about new group\n        item.set(this.getGroupProperty(), this);\n\n        // Need to update internal value?\n        if (item.get(groupedProperty)) {\n          this.setSelection([item]);\n        }\n      }\n\n      // Select first item when only one is registered\n      if (\n        !this.isAllowEmptySelection() &&\n        items.length > 0 &&\n        !this.getSelection()[0]\n      ) {\n        this.setSelection([items[0]]);\n      }\n    },\n\n    /**\n     * Remove an item from the radio group.\n     *\n     * @param item {qx.ui.form.IRadioItem} The item to remove.\n     */\n    remove(item) {\n      var items = this.__items;\n      var groupedProperty = this.getGroupedProperty();\n      var groupedPropertyUp = qx.lang.String.firstUp(groupedProperty);\n\n      if (items.includes(item)) {\n        // Remove RadioButton from array\n        qx.lang.Array.remove(items, item);\n\n        // Inform radio button about new group\n        if (item.get(this.getGroupProperty()) === this) {\n          item.reset(this.getGroupProperty());\n        }\n\n        // Deregister listeners\n        item.removeListener(\n          \"change\" + groupedPropertyUp,\n          this._onItemChangeChecked,\n          this\n        );\n\n        // if the radio was checked, set internal selection to null\n        if (item.get(groupedProperty)) {\n          this.resetSelection();\n        }\n      }\n    },\n\n    /**\n     * Returns an array containing the group's items.\n     *\n     * @return {qx.ui.form.IRadioItem[]} The item array\n     */\n    getChildren() {\n      return this.__items;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      LISTENER FOR ITEM CHANGES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Event listener for <code>changeValue</code> event of every managed item.\n     *\n     * @param e {qx.event.type.Data} Data event\n     */\n    _onItemChangeChecked(e) {\n      var item = e.getTarget();\n      var groupedProperty = this.getGroupedProperty();\n\n      if (item.get(groupedProperty)) {\n        this.setSelection([item]);\n      } else if (this.getSelection()[0] == item) {\n        this.resetSelection();\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyGroupedProperty(value, old) {\n      var item;\n      var oldFirstUp = qx.lang.String.firstUp(old);\n      var newFirstUp = qx.lang.String.firstUp(value);\n\n      for (var i = 0; i < this.__items.length; i++) {\n        item = this.__items[i];\n\n        // remove the listener for the old change event\n        item.removeListener(\n          \"change\" + oldFirstUp,\n          this._onItemChangeChecked,\n          this\n        );\n\n        // add the listener for the new change event\n        item.removeListener(\n          \"change\" + newFirstUp,\n          this._onItemChangeChecked,\n          this\n        );\n      }\n    },\n\n    // property apply\n    _applyInvalidMessage(value, old) {\n      for (var i = 0; i < this.__items.length; i++) {\n        this.__items[i].setInvalidMessage(value);\n      }\n    },\n\n    // property apply\n    _applyValid(value, old) {\n      for (var i = 0; i < this.__items.length; i++) {\n        this.__items[i].setValid(value);\n      }\n    },\n\n    // property apply\n    _applyEnabled(value, old) {\n      var items = this.__items;\n      if (value == null) {\n        for (var i = 0, l = items.length; i < l; i++) {\n          items[i].resetEnabled();\n        }\n      } else {\n        for (var i = 0, l = items.length; i < l; i++) {\n          items[i].setEnabled(value);\n        }\n      }\n    },\n\n    // property apply\n    _applyAllowEmptySelection(value, old) {\n      if (!value && this.isSelectionEmpty()) {\n        this.resetSelection();\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SELECTION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Select the item following the given item.\n     */\n    selectNext() {\n      var item = this.getSelection()[0];\n      var items = this.__items;\n      var index = items.indexOf(item);\n      if (index == -1) {\n        return;\n      }\n\n      var i = 0;\n      var length = items.length;\n\n      // Find next enabled item\n      if (this.getWrap()) {\n        index = (index + 1) % length;\n      } else {\n        index = Math.min(index + 1, length - 1);\n      }\n\n      while (i < length && !items[index].getEnabled()) {\n        index = (index + 1) % length;\n        i++;\n      }\n\n      this.setSelection([items[index]]);\n    },\n\n    /**\n     * Select the item previous the given item.\n     */\n    selectPrevious() {\n      var item = this.getSelection()[0];\n      var items = this.__items;\n      var index = items.indexOf(item);\n      if (index == -1) {\n        return;\n      }\n\n      var i = 0;\n      var length = items.length;\n\n      // Find previous enabled item\n      if (this.getWrap()) {\n        index = (index - 1 + length) % length;\n      } else {\n        index = Math.max(index - 1, 0);\n      }\n\n      while (i < length && !items[index].getEnabled()) {\n        index = (index - 1 + length) % length;\n        i++;\n      }\n\n      this.setSelection([items[index]]);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER METHODS FOR SELECTION API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the items for the selection.\n     *\n     * @return {qx.ui.form.IRadioItem[]} Items to select.\n     */\n    _getItems() {\n      return this.getItems();\n    },\n\n    /**\n     * Returns if the selection could be empty or not.\n     *\n     * @return {Boolean} <code>true</code> If selection could be empty,\n     *    <code>false</code> otherwise.\n     */\n    _isAllowEmptySelection() {\n      return this.isAllowEmptySelection();\n    },\n\n    /**\n     * Returns whether the item is selectable. In opposite to the default\n     * implementation (which checks for visible items) every radio button\n     * which is part of the group is selected even if it is currently not visible.\n     *\n     * @param item {qx.ui.form.IRadioItem} The item to check if its selectable.\n     * @return {Boolean} <code>true</code> if the item is part of the radio group\n     *    <code>false</code> otherwise.\n     */\n    _isItemSelectable(item) {\n      return this.__items.indexOf(item) != -1;\n    },\n\n    /**\n     * Event handler for <code>changeSelection</code>.\n     *\n     * @param e {qx.event.type.Data} Data event.\n     */\n    __onChangeSelection(e) {\n      var value = e.getData()[0];\n      var old = e.getOldData()[0];\n      var groupedProperty = this.getGroupedProperty();\n\n      if (old) {\n        old.set(groupedProperty, false);\n      }\n\n      if (value) {\n        value.set(groupedProperty, true);\n\n        // If Group is focused, the selection was changed by keyboard. Switch focus to new value\n        if (this.__isGroupFocused() && value.isFocusable()) {\n          value.focus();\n        }\n      }\n    },\n\n    /**\n     * Checks if this group is focused by checking focused state of each item\n     * @returns {Boolean} result\n     */\n    __isGroupFocused() {\n      const focusHandler = qx.ui.core.FocusHandler.getInstance();\n      for (const item of this._getItems()) {\n        if (focusHandler.isFocused(item)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._disposeArray(\"__items\");\n  }\n});\n"
  ]
}