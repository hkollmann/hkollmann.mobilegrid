{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/form/Slider.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "implement",
    "form",
    "IForm",
    "INumberForm",
    "IRange",
    "include",
    "MForm",
    "construct",
    "orientation",
    "_setLayout",
    "layout",
    "Canvas",
    "getContentElement",
    "setAttribute",
    "addListener",
    "_onKeyPress",
    "_onRoll",
    "_onPointerDown",
    "_onPointerUp",
    "_onUpdate",
    "_onStopEvent",
    "setOrientation",
    "initOrientation",
    "events",
    "changeValue",
    "slideAnimationEnd",
    "properties",
    "appearance",
    "refine",
    "init",
    "focusable",
    "check",
    "apply",
    "value",
    "nullable",
    "minimum",
    "event",
    "maximum",
    "singleStep",
    "pageStep",
    "knobFactor",
    "members",
    "__sliderLocation",
    "__knobLocation",
    "__knobSize",
    "__dragMode",
    "__dragOffset",
    "__trackingMode",
    "__trackingDirection",
    "__trackingEnd",
    "__timer",
    "__dragTimer",
    "__lastValueEvent",
    "__dragValue",
    "__scrollAnimationframe",
    "_forwardStates",
    "invalid",
    "renderLayout",
    "left",
    "top",
    "width",
    "height",
    "_updateKnobPosition",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "_onPointerOver",
    "_onPointerOut",
    "_add",
    "e",
    "addState",
    "removeState",
    "getPointerType",
    "axis",
    "getOrientation",
    "delta",
    "getDelta",
    "direction",
    "slideBy",
    "getSingleStep",
    "stop",
    "isHorizontal",
    "backward",
    "forward",
    "getKeyIdentifier",
    "slideForward",
    "slideBack",
    "slidePageForward",
    "slidePageBack",
    "slideToBegin",
    "slideToEnd",
    "__isHorizontal",
    "knob",
    "getChildControl",
    "locationProperty",
    "cursorLocation",
    "getDocumentLeft",
    "getDocumentTop",
    "decorator",
    "getDecorator",
    "theme",
    "manager",
    "Decoration",
    "getInstance",
    "resolve",
    "decoratorPadding",
    "getInsets",
    "padding",
    "getPaddingLeft",
    "getPaddingTop",
    "sliderLocation",
    "bom",
    "element",
    "Location",
    "get",
    "getDomElement",
    "knobLocation",
    "getTarget",
    "Timer",
    "_fireValue",
    "start",
    "__computeTrackingEnd",
    "_onInterval",
    "_onPointerMove",
    "capture",
    "stopPropagation",
    "releaseCapture",
    "getType",
    "deltaSlider",
    "deltaPosition",
    "positionSlider",
    "_valueToPosition",
    "getValue",
    "getBounds",
    "removeListener",
    "dragStop",
    "position",
    "slideTo",
    "_positionToValue",
    "getPageStep",
    "getMinimum",
    "getMaximum",
    "availSize",
    "getInnerSize",
    "knobSize",
    "sizeProperty",
    "_updateKnobSize",
    "__slidingSpace",
    "min",
    "max",
    "old",
    "step",
    "method",
    "Math",
    "avail",
    "percent",
    "range",
    "round",
    "_setKnobPosition",
    "dec",
    "content",
    "getPadding",
    "setStyle",
    "getKnobFactor",
    "setWidth",
    "setHeight",
    "duration",
    "offset",
    "stopSlideAnimation",
    "__animateTo",
    "updatePosition",
    "setValue",
    "__normalizeValue",
    "cancelSequence",
    "to",
    "from",
    "AnimationFrame",
    "on",
    "timePassed",
    "parseInt",
    "fireEvent",
    "startSequence",
    "_applyOrientation",
    "setLayoutProperties",
    "right",
    "bottom",
    "_applyKnobFactor",
    "resetWidth",
    "resetHeight",
    "_applyValue",
    "type",
    "Data",
    "resetValue",
    "tmp",
    "_applyMinimum",
    "_applyMaximum",
    "Slider"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The Slider widget provides a vertical or horizontal slider.\n *\n * The Slider is the classic widget for controlling a bounded value.\n * It lets the user move a slider handle along a horizontal or vertical\n * groove and translates the handle's position into an integer value\n * within the defined range.\n *\n * The Slider has very few of its own functions.\n * The most useful functions are slideTo() to set the slider directly to some\n * value; setSingleStep(), setPageStep() to set the steps; and setMinimum()\n * and setMaximum() to define the range of the slider.\n *\n * A slider accepts focus on Tab and provides both a mouse wheel and\n * a keyboard interface. The keyboard interface is the following:\n *\n * * Left/Right move a horizontal slider by one single step.\n * * Up/Down move a vertical slider by one single step.\n * * PageUp moves up one page.\n * * PageDown moves down one page.\n * * Home moves to the start (minimum).\n * * End moves to the end (maximum).\n *\n * Here are the main properties of the class:\n *\n * # <code>value</code>: The bounded integer that {@link qx.ui.form.INumberForm}\n * maintains.\n * # <code>minimum</code>: The lowest possible value.\n * # <code>maximum</code>: The highest possible value.\n * # <code>singleStep</code>: The smaller of two natural steps that an abstract\n * sliders provides and typically corresponds to the user pressing an arrow key.\n * # <code>pageStep</code>: The larger of two natural steps that an abstract\n * slider provides and typically corresponds to the user pressing PageUp or\n * PageDown.\n *\n * @childControl knob {qx.ui.core.Widget} knob to set the value of the slider\n */\nqx.Class.define(\"qx.ui.form.Slider\", {\n  extend: qx.ui.core.Widget,\n  implement: [qx.ui.form.IForm, qx.ui.form.INumberForm, qx.ui.form.IRange],\n\n  include: [qx.ui.form.MForm],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param orientation {String?\"horizontal\"} Configure the\n   * {@link #orientation} property\n   */\n  construct(orientation) {\n    super();\n\n    // Force canvas layout\n    this._setLayout(new qx.ui.layout.Canvas());\n\n    // ARIA attrs\n    this.getContentElement().setAttribute(\"role\", \"slider\");\n\n    // Add listeners\n    this.addListener(\"keypress\", this._onKeyPress);\n    this.addListener(\"roll\", this._onRoll);\n    this.addListener(\"pointerdown\", this._onPointerDown);\n    this.addListener(\"pointerup\", this._onPointerUp);\n    this.addListener(\"losecapture\", this._onPointerUp);\n    this.addListener(\"resize\", this._onUpdate);\n\n    // Stop events\n    this.addListener(\"contextmenu\", this._onStopEvent);\n    this.addListener(\"tap\", this._onStopEvent);\n    this.addListener(\"dbltap\", this._onStopEvent);\n\n    // Initialize orientation\n    if (orientation != null) {\n      this.setOrientation(orientation);\n    } else {\n      this.initOrientation();\n    }\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Change event for the value.\n     */\n    changeValue: \"qx.event.type.Data\",\n\n    /** Fired as soon as the slide animation ended. */\n    slideAnimationEnd: \"qx.event.type.Event\"\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    // overridden\n    appearance: {\n      refine: true,\n      init: \"slider\"\n    },\n\n    // overridden\n    focusable: {\n      refine: true,\n      init: true\n    },\n\n    /** Whether the slider is horizontal or vertical. */\n    orientation: {\n      check: [\"horizontal\", \"vertical\"],\n      init: \"horizontal\",\n      apply: \"_applyOrientation\"\n    },\n\n    /**\n     * The current slider value.\n     *\n     * Strictly validates according to {@link #minimum} and {@link #maximum}.\n     * Do not apply any value correction to the incoming value. If you depend\n     * on this, please use {@link #slideTo} instead.\n     */\n    value: {\n      check:\n        \"typeof value==='number'&&value>=this.getMinimum()&&value<=this.getMaximum()\",\n      init: 0,\n      apply: \"_applyValue\",\n      nullable: true\n    },\n\n    /**\n     * The minimum slider value (may be negative). This value must be smaller\n     * than {@link #maximum}.\n     */\n    minimum: {\n      check: \"Integer\",\n      init: 0,\n      apply: \"_applyMinimum\",\n      event: \"changeMinimum\"\n    },\n\n    /**\n     * The maximum slider value (may be negative). This value must be larger\n     * than {@link #minimum}.\n     */\n    maximum: {\n      check: \"Integer\",\n      init: 100,\n      apply: \"_applyMaximum\",\n      event: \"changeMaximum\"\n    },\n\n    /**\n     * The amount to increment on each event. Typically corresponds\n     * to the user pressing an arrow key.\n     */\n    singleStep: {\n      check: \"Integer\",\n      init: 1\n    },\n\n    /**\n     * The amount to increment on each event. Typically corresponds\n     * to the user pressing <code>PageUp</code> or <code>PageDown</code>.\n     */\n    pageStep: {\n      check: \"Integer\",\n      init: 10\n    },\n\n    /**\n     * Factor to apply to the width/height of the knob in relation\n     * to the dimension of the underlying area.\n     */\n    knobFactor: {\n      check: \"Number\",\n      apply: \"_applyKnobFactor\",\n      nullable: true\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __sliderLocation: null,\n    __knobLocation: null,\n    __knobSize: null,\n    __dragMode: null,\n    __dragOffset: null,\n    __trackingMode: null,\n    __trackingDirection: null,\n    __trackingEnd: null,\n    __timer: null,\n\n    // event delay stuff during drag\n    __dragTimer: null,\n    __lastValueEvent: null,\n    __dragValue: null,\n\n    __scrollAnimationframe: null,\n\n    // overridden\n    /**\n     * @lint ignoreReferenceField(_forwardStates)\n     */\n    _forwardStates: {\n      invalid: true\n    },\n\n    // overridden\n    renderLayout(left, top, width, height) {\n      super.renderLayout(left, top, width, height);\n      // make sure the layout engine does not override the knob position\n      this._updateKnobPosition();\n    },\n\n    // overridden\n    _createChildControlImpl(id, hash) {\n      var control;\n\n      switch (id) {\n        case \"knob\":\n          control = new qx.ui.core.Widget();\n\n          control.addListener(\"resize\", this._onUpdate, this);\n          control.addListener(\"pointerover\", this._onPointerOver);\n          control.addListener(\"pointerout\", this._onPointerOut);\n          this._add(control);\n          break;\n      }\n\n      return control || super._createChildControlImpl(id);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Event handler for pointerover events at the knob child control.\n     *\n     * Adds the 'hovered' state\n     *\n     * @param e {qx.event.type.Pointer} Incoming pointer event\n     */\n    _onPointerOver(e) {\n      this.addState(\"hovered\");\n    },\n\n    /**\n     * Event handler for pointerout events at the knob child control.\n     *\n     * Removes the 'hovered' state\n     *\n     * @param e {qx.event.type.Pointer} Incoming pointer event\n     */\n    _onPointerOut(e) {\n      this.removeState(\"hovered\");\n    },\n\n    /**\n     * Listener of roll event\n     *\n     * @param e {qx.event.type.Roll} Incoming event object\n     */\n    _onRoll(e) {\n      // only wheel\n      if (e.getPointerType() != \"wheel\") {\n        return;\n      }\n\n      var axis = this.getOrientation() === \"horizontal\" ? \"x\" : \"y\";\n      var delta = e.getDelta()[axis];\n\n      var direction = delta > 0 ? 1 : delta < 0 ? -1 : 0;\n      this.slideBy(direction * this.getSingleStep());\n\n      e.stop();\n    },\n\n    /**\n     * Event handler for keypress events.\n     *\n     * Adds support for arrow keys, page up, page down, home and end keys.\n     *\n     * @param e {qx.event.type.KeySequence} Incoming keypress event\n     */\n    _onKeyPress(e) {\n      var isHorizontal = this.getOrientation() === \"horizontal\";\n      var backward = isHorizontal ? \"Left\" : \"Up\";\n      var forward = isHorizontal ? \"Right\" : \"Down\";\n\n      switch (e.getKeyIdentifier()) {\n        case forward:\n          this.slideForward();\n          break;\n\n        case backward:\n          this.slideBack();\n          break;\n\n        case \"PageDown\":\n          this.slidePageForward(100);\n          break;\n\n        case \"PageUp\":\n          this.slidePageBack(100);\n          break;\n\n        case \"Home\":\n          this.slideToBegin(200);\n          break;\n\n        case \"End\":\n          this.slideToEnd(200);\n          break;\n\n        default:\n          return;\n      }\n\n      // Stop processed events\n      e.stop();\n    },\n\n    /**\n     * Listener of pointerdown event. Initializes drag or tracking mode.\n     *\n     * @param e {qx.event.type.Pointer} Incoming event object\n     */\n    _onPointerDown(e) {\n      // this can happen if the user releases the button while dragging outside\n      // of the browser viewport\n      if (this.__dragMode) {\n        return;\n      }\n\n      var isHorizontal = this.__isHorizontal;\n      var knob = this.getChildControl(\"knob\");\n\n      var locationProperty = isHorizontal ? \"left\" : \"top\";\n\n      var cursorLocation = isHorizontal\n        ? e.getDocumentLeft()\n        : e.getDocumentTop();\n\n      var decorator = this.getDecorator();\n      decorator = qx.theme.manager.Decoration.getInstance().resolve(decorator);\n      if (isHorizontal) {\n        var decoratorPadding = decorator ? decorator.getInsets().left : 0;\n        var padding = (this.getPaddingLeft() || 0) + decoratorPadding;\n      } else {\n        var decoratorPadding = decorator ? decorator.getInsets().top : 0;\n        var padding = (this.getPaddingTop() || 0) + decoratorPadding;\n      }\n\n      var sliderLocation = (this.__sliderLocation = qx.bom.element.Location.get(\n        this.getContentElement().getDomElement()\n      )[locationProperty]);\n      sliderLocation += padding;\n\n      var knobLocation = (this.__knobLocation = qx.bom.element.Location.get(\n        knob.getContentElement().getDomElement()\n      )[locationProperty]);\n\n      if (e.getTarget() === knob) {\n        // Switch into drag mode\n        this.__dragMode = true;\n        if (!this.__dragTimer) {\n          // create a timer to fire delayed dragging events if dragging stops.\n          this.__dragTimer = new qx.event.Timer(100);\n          this.__dragTimer.addListener(\"interval\", this._fireValue, this);\n        }\n        this.__dragTimer.start();\n        // Compute dragOffset (includes both: inner position of the widget and\n        // cursor position on knob)\n        this.__dragOffset = cursorLocation + sliderLocation - knobLocation;\n\n        // add state\n        knob.addState(\"pressed\");\n      } else {\n        // Switch into tracking mode\n        this.__trackingMode = true;\n\n        // Detect tracking direction\n        this.__trackingDirection = cursorLocation <= knobLocation ? -1 : 1;\n\n        // Compute end value\n        this.__computeTrackingEnd(e);\n\n        // Directly call interval method once\n        this._onInterval();\n\n        // Initialize timer (when needed)\n        if (!this.__timer) {\n          this.__timer = new qx.event.Timer(100);\n          this.__timer.addListener(\"interval\", this._onInterval, this);\n        }\n\n        // Start timer\n        this.__timer.start();\n      }\n\n      // Register move listener\n      this.addListener(\"pointermove\", this._onPointerMove);\n\n      // Activate capturing\n      this.capture();\n\n      // Stop event\n      e.stopPropagation();\n    },\n\n    /**\n     * Listener of pointerup event. Used for cleanup of previously\n     * initialized modes.\n     *\n     * @param e {qx.event.type.Pointer} Incoming event object\n     */\n    _onPointerUp(e) {\n      if (this.__dragMode) {\n        // Release capture mode\n        this.releaseCapture();\n\n        // Cleanup status flags\n        delete this.__dragMode;\n\n        // as we come out of drag mode, make\n        // sure content gets synced\n        this.__dragTimer.stop();\n        this._fireValue();\n\n        delete this.__dragOffset;\n\n        // remove state\n        this.getChildControl(\"knob\").removeState(\"pressed\");\n\n        // it's necessary to check whether the cursor is over the knob widget to be able to\n        // to decide whether to remove the 'hovered' state.\n        if (e.getType() === \"pointerup\") {\n          var deltaSlider;\n          var deltaPosition;\n          var positionSlider;\n\n          if (this.__isHorizontal) {\n            deltaSlider =\n              e.getDocumentLeft() -\n              (this._valueToPosition(this.getValue()) + this.__sliderLocation);\n\n            positionSlider = qx.bom.element.Location.get(\n              this.getContentElement().getDomElement()\n            )[\"top\"];\n            deltaPosition =\n              e.getDocumentTop() -\n              (positionSlider + this.getChildControl(\"knob\").getBounds().top);\n          } else {\n            deltaSlider =\n              e.getDocumentTop() -\n              (this._valueToPosition(this.getValue()) + this.__sliderLocation);\n\n            positionSlider = qx.bom.element.Location.get(\n              this.getContentElement().getDomElement()\n            )[\"left\"];\n            deltaPosition =\n              e.getDocumentLeft() -\n              (positionSlider + this.getChildControl(\"knob\").getBounds().left);\n          }\n\n          if (\n            deltaPosition < 0 ||\n            deltaPosition > this.__knobSize ||\n            deltaSlider < 0 ||\n            deltaSlider > this.__knobSize\n          ) {\n            this.getChildControl(\"knob\").removeState(\"hovered\");\n          }\n        }\n      } else if (this.__trackingMode) {\n        // Stop timer interval\n        this.__timer.stop();\n\n        // Release capture mode\n        this.releaseCapture();\n\n        // Cleanup status flags\n        delete this.__trackingMode;\n        delete this.__trackingDirection;\n        delete this.__trackingEnd;\n      }\n\n      // Remove move listener again\n      this.removeListener(\"pointermove\", this._onPointerMove);\n\n      // Stop event\n      if (e.getType() === \"pointerup\") {\n        e.stopPropagation();\n      }\n    },\n\n    /**\n     * Listener of pointermove event for the knob. Only used in drag mode.\n     *\n     * @param e {qx.event.type.Pointer} Incoming event object\n     */\n    _onPointerMove(e) {\n      if (this.__dragMode) {\n        var dragStop = this.__isHorizontal\n          ? e.getDocumentLeft()\n          : e.getDocumentTop();\n        var position = dragStop - this.__dragOffset;\n\n        this.slideTo(this._positionToValue(position));\n      } else if (this.__trackingMode) {\n        // Update tracking end on pointermove\n        this.__computeTrackingEnd(e);\n      }\n\n      // Stop event\n      e.stopPropagation();\n    },\n\n    /**\n     * Listener of interval event by the internal timer. Only used\n     * in tracking sequences.\n     *\n     * @param e {qx.event.type.Event} Incoming event object\n     */\n    _onInterval(e) {\n      // Compute new value\n      var value =\n        this.getValue() + this.__trackingDirection * this.getPageStep();\n\n      // Limit value\n      if (value < this.getMinimum()) {\n        value = this.getMinimum();\n      } else if (value > this.getMaximum()) {\n        value = this.getMaximum();\n      }\n\n      // Stop at tracking position (where the pointer is pressed down)\n      var slideBack = this.__trackingDirection == -1;\n      if (\n        (slideBack && value <= this.__trackingEnd) ||\n        (!slideBack && value >= this.__trackingEnd)\n      ) {\n        value = this.__trackingEnd;\n      }\n\n      // Finally slide to the desired position\n      this.slideTo(value);\n    },\n\n    /**\n     * Listener of resize event for both the slider itself and the knob.\n     *\n     * @param e {qx.event.type.Data} Incoming event object\n     */\n    _onUpdate(e) {\n      // Update sliding space\n      var availSize = this.getInnerSize();\n      var knobSize = this.getChildControl(\"knob\").getBounds();\n      var sizeProperty = this.__isHorizontal ? \"width\" : \"height\";\n\n      // Sync knob size\n      this._updateKnobSize();\n\n      // Store knob size\n      this.__slidingSpace = availSize[sizeProperty] - knobSize[sizeProperty];\n      this.__knobSize = knobSize[sizeProperty];\n\n      // Update knob position (sliding space must be updated first)\n      this._updateKnobPosition();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      UTILS\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {Boolean} Whether the slider is laid out horizontally */\n    __isHorizontal: false,\n\n    /**\n     * @type {Integer} Available space for knob to slide on, computed on resize of\n     * the widget\n     */\n    __slidingSpace: 0,\n\n    /**\n     * Computes the value where the tracking should end depending on\n     * the current pointer position.\n     *\n     * @param e {qx.event.type.Pointer} Incoming pointer event\n     */\n    __computeTrackingEnd(e) {\n      var isHorizontal = this.__isHorizontal;\n      var cursorLocation = isHorizontal\n        ? e.getDocumentLeft()\n        : e.getDocumentTop();\n      var sliderLocation = this.__sliderLocation;\n      var knobLocation = this.__knobLocation;\n      var knobSize = this.__knobSize;\n\n      // Compute relative position\n      var position = cursorLocation - sliderLocation;\n      if (cursorLocation >= knobLocation) {\n        position -= knobSize;\n      }\n\n      // Compute stop value\n      var value = this._positionToValue(position);\n\n      var min = this.getMinimum();\n      var max = this.getMaximum();\n\n      if (value < min) {\n        value = min;\n      } else if (value > max) {\n        value = max;\n      } else {\n        var old = this.getValue();\n        var step = this.getPageStep();\n        var method = this.__trackingDirection < 0 ? \"floor\" : \"ceil\";\n\n        // Fix to page step\n        value = old + Math[method]((value - old) / step) * step;\n      }\n\n      // Store value when undefined, otherwise only when it follows the\n      // current direction e.g. goes up or down\n      if (\n        this.__trackingEnd == null ||\n        (this.__trackingDirection == -1 && value <= this.__trackingEnd) ||\n        (this.__trackingDirection == 1 && value >= this.__trackingEnd)\n      ) {\n        this.__trackingEnd = value;\n      }\n    },\n\n    /**\n     * Converts the given position to a value.\n     *\n     * Does not respect single or page step.\n     *\n     * @param position {Integer} Position to use\n     * @return {Integer} Resulting value (rounded)\n     */\n    _positionToValue(position) {\n      // Reading available space\n      var avail = this.__slidingSpace;\n\n      // Protect undefined value (before initial resize) and division by zero\n      if (avail == null || avail == 0) {\n        return 0;\n      }\n\n      // Compute and limit percent\n      var percent = position / avail;\n      if (percent < 0) {\n        percent = 0;\n      } else if (percent > 1) {\n        percent = 1;\n      }\n\n      // Compute range\n      var range = this.getMaximum() - this.getMinimum();\n\n      // Compute value\n      return this.getMinimum() + Math.round(range * percent);\n    },\n\n    /**\n     * Converts the given value to a position to place\n     * the knob to.\n     *\n     * @param value {Integer} Value to use\n     * @return {Integer} Computed position (rounded)\n     */\n    _valueToPosition(value) {\n      // Reading available space\n      var avail = this.__slidingSpace;\n      if (avail == null) {\n        return 0;\n      }\n\n      // Computing range\n      var range = this.getMaximum() - this.getMinimum();\n\n      // Protect division by zero\n      if (range == 0) {\n        return 0;\n      }\n\n      // Translating value to distance from minimum\n      var value = value - this.getMinimum();\n\n      // Compute and limit percent\n      var percent = value / range;\n      if (percent < 0) {\n        percent = 0;\n      } else if (percent > 1) {\n        percent = 1;\n      }\n\n      // Compute position from available space and percent\n      return Math.round(avail * percent);\n    },\n\n    /**\n     * Updates the knob position following the currently configured\n     * value. Useful on reflows where the dimensions of the slider\n     * itself have been modified.\n     *\n     */\n    _updateKnobPosition() {\n      this._setKnobPosition(this._valueToPosition(this.getValue()));\n    },\n\n    /**\n     * Moves the knob to the given position.\n     *\n     * @param position {Integer} Any valid position (needs to be\n     *   greater or equal than zero)\n     */\n    _setKnobPosition(position) {\n      // Use the DOM Element to prevent unnecessary layout recalculations\n      var knob = this.getChildControl(\"knob\");\n      var dec = this.getDecorator();\n      dec = qx.theme.manager.Decoration.getInstance().resolve(dec);\n      var content = knob.getContentElement();\n      if (this.__isHorizontal) {\n        if (dec && dec.getPadding()) {\n          position += dec.getPadding().left;\n        }\n        position += this.getPaddingLeft() || 0;\n        content.setStyle(\"left\", position + \"px\", true);\n      } else {\n        if (dec && dec.getPadding()) {\n          position += dec.getPadding().top;\n        }\n        position += this.getPaddingTop() || 0;\n        content.setStyle(\"top\", position + \"px\", true);\n      }\n    },\n\n    /**\n     * Reconfigures the size of the knob depending on\n     * the optionally defined {@link #knobFactor}.\n     *\n     */\n    _updateKnobSize() {\n      // Compute knob size\n      var knobFactor = this.getKnobFactor();\n      if (knobFactor == null) {\n        return;\n      }\n\n      // Ignore when not rendered yet\n      var avail = this.getInnerSize();\n      if (avail == null) {\n        return;\n      }\n\n      // Read size property\n      if (this.__isHorizontal) {\n        this.getChildControl(\"knob\").setWidth(\n          Math.round(knobFactor * avail.width)\n        );\n      } else {\n        this.getChildControl(\"knob\").setHeight(\n          Math.round(knobFactor * avail.height)\n        );\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SLIDE METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Slides backward to the minimum value\n     * @param duration {Number} The time in milliseconds the slide to should take.\n     */\n    slideToBegin(duration) {\n      this.slideTo(this.getMinimum(), duration);\n    },\n\n    /**\n     * Slides forward to the maximum value\n     * @param duration {Number} The time in milliseconds the slide to should take.\n     */\n    slideToEnd(duration) {\n      this.slideTo(this.getMaximum(), duration);\n    },\n\n    /**\n     * Slides forward (right or bottom depending on orientation)\n     *\n     */\n    slideForward() {\n      this.slideBy(this.getSingleStep());\n    },\n\n    /**\n     * Slides backward (to left or top depending on orientation)\n     *\n     */\n    slideBack() {\n      this.slideBy(-this.getSingleStep());\n    },\n\n    /**\n     * Slides a page forward (to right or bottom depending on orientation)\n     * @param duration {Number} The time in milliseconds the slide to should take.\n     */\n    slidePageForward(duration) {\n      this.slideBy(this.getPageStep(), duration);\n    },\n\n    /**\n     * Slides a page backward (to left or top depending on orientation)\n     * @param duration {Number} The time in milliseconds the slide to should take.\n     */\n    slidePageBack(duration) {\n      this.slideBy(-this.getPageStep(), duration);\n    },\n\n    /**\n     * Slides by the given offset.\n     *\n     * This method works with the value, not with the coordinate.\n     *\n     * @param offset {Integer} Offset to scroll by\n     * @param duration {Number} The time in milliseconds the slide to should take.\n     */\n    slideBy(offset, duration) {\n      this.slideTo(this.getValue() + offset, duration);\n    },\n\n    /**\n     * Slides to the given value\n     *\n     * This method works with the value, not with the coordinate.\n     *\n     * @param value {Integer} Scroll to a value between the defined\n     *   minimum and maximum.\n     * @param duration {Number} The time in milliseconds the slide to should take.\n     */\n    slideTo(value, duration) {\n      this.stopSlideAnimation();\n\n      if (duration) {\n        this.__animateTo(value, duration);\n      } else {\n        this.updatePosition(value);\n      }\n    },\n\n    /**\n     * Updates the position property considering the minimum and maximum values.\n     * @param value {Number} The new position.\n     */\n    updatePosition(value) {\n      this.setValue(this.__normalizeValue(value));\n    },\n\n    /**\n     * In case a slide animation is currently running, it will be stopped.\n     * If not, the method does nothing.\n     */\n    stopSlideAnimation() {\n      if (this.__scrollAnimationframe) {\n        this.__scrollAnimationframe.cancelSequence();\n        this.__scrollAnimationframe = null;\n      }\n    },\n\n    /**\n     * Internal helper to normalize the given value concerning the minimum\n     * and maximum value.\n     * @param value {Number} The value to normalize.\n     * @return {Number} The normalized value.\n     */\n    __normalizeValue(value) {\n      // Bring into allowed range or fix to single step grid\n      if (value < this.getMinimum()) {\n        value = this.getMinimum();\n      } else if (value > this.getMaximum()) {\n        value = this.getMaximum();\n      } else {\n        value =\n          this.getMinimum() +\n          Math.round((value - this.getMinimum()) / this.getSingleStep()) *\n            this.getSingleStep();\n      }\n      return value;\n    },\n\n    /**\n     * Animation helper which takes care of the animated slide.\n     * @param to {Number} The target value.\n     * @param duration {Number} The time in milliseconds the slide to should take.\n     */\n    __animateTo(to, duration) {\n      to = this.__normalizeValue(to);\n      var from = this.getValue();\n\n      this.__scrollAnimationframe = new qx.bom.AnimationFrame();\n\n      this.__scrollAnimationframe.on(\n        \"frame\",\n        function (timePassed) {\n          this.setValue(parseInt((timePassed / duration) * (to - from) + from));\n        },\n        this\n      );\n\n      this.__scrollAnimationframe.on(\n        \"end\",\n        function () {\n          this.setValue(to);\n          this.__scrollAnimationframe = null;\n          this.fireEvent(\"slideAnimationEnd\");\n        },\n        this\n      );\n\n      this.__scrollAnimationframe.startSequence(duration);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyOrientation(value, old) {\n      // ARIA attrs\n      this.getContentElement().setAttribute(\"aria-orientation\", value);\n\n      var knob = this.getChildControl(\"knob\");\n\n      // Update private flag for faster access\n      this.__isHorizontal = value === \"horizontal\";\n\n      // Toggle states and knob layout\n      if (this.__isHorizontal) {\n        this.removeState(\"vertical\");\n        knob.removeState(\"vertical\");\n\n        this.addState(\"horizontal\");\n        knob.addState(\"horizontal\");\n\n        knob.setLayoutProperties({ top: 0, right: null, bottom: 0 });\n      } else {\n        this.removeState(\"horizontal\");\n        knob.removeState(\"horizontal\");\n\n        this.addState(\"vertical\");\n        knob.addState(\"vertical\");\n\n        knob.setLayoutProperties({ right: 0, bottom: null, left: 0 });\n      }\n\n      // Sync knob position\n      this._updateKnobPosition();\n    },\n\n    // property apply\n    _applyKnobFactor(value, old) {\n      if (value != null) {\n        this._updateKnobSize();\n      } else {\n        if (this.__isHorizontal) {\n          this.getChildControl(\"knob\").resetWidth();\n        } else {\n          this.getChildControl(\"knob\").resetHeight();\n        }\n      }\n    },\n\n    // property apply\n    _applyValue(value, old) {\n      if (value != null) {\n        // ARIA attrs\n        this.getContentElement().setAttribute(\"aria-valuenow\", value);\n\n        this._updateKnobPosition();\n        if (this.__dragMode) {\n          this.__dragValue = [value, old];\n        } else {\n          this.fireEvent(\"changeValue\", qx.event.type.Data, [value, old]);\n        }\n      } else {\n        this.resetValue();\n      }\n    },\n\n    /**\n     * Helper for applyValue which fires the changeValue event.\n     */\n    _fireValue() {\n      if (!this.__dragValue) {\n        return;\n      }\n      var tmp = this.__dragValue;\n      this.__dragValue = null;\n      this.fireEvent(\"changeValue\", qx.event.type.Data, tmp);\n    },\n\n    // property apply\n    _applyMinimum(value, old) {\n      // ARIA attrs\n      this.getContentElement().setAttribute(\"aria-valuemin\", value);\n\n      if (this.getValue() < value) {\n        this.setValue(value);\n      }\n\n      this._updateKnobPosition();\n    },\n\n    // property apply\n    _applyMaximum(value, old) {\n      // ARIA attrs\n      this.getContentElement().setAttribute(\"aria-valuemax\", value);\n\n      if (this.getValue() > value) {\n        this.setValue(value);\n      }\n\n      this._updateKnobPosition();\n    }\n  }\n});\n"
  ]
}