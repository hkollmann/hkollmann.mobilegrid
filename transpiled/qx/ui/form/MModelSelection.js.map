{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/form/MModelSelection.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "__modelSelection",
    "data",
    "Array",
    "addListener",
    "__onModelSelectionArrayChange",
    "__onModelSelectionChange",
    "events",
    "changeModelSelection",
    "members",
    "__inSelectionChange",
    "getSelection",
    "modelSelection",
    "i",
    "length",
    "item",
    "model",
    "getModel",
    "push",
    "setModelSelection",
    "e",
    "Error",
    "selectables",
    "getSelectables",
    "itemSelection",
    "toArray",
    "j",
    "selectable",
    "selectableModel",
    "setSelection",
    "currentSelection",
    "lang",
    "equals",
    "getModelSelection",
    "removeAll",
    "unshift",
    "getLength",
    "returnArray",
    "splice",
    "apply",
    "dispose",
    "destruct",
    "_disposeObjects",
    "ui",
    "form",
    "MModelSelection"
  ],
  "mappings": ";;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,4BAAhB,EAA8C;AAC5CC,IAAAA,SAD4C,uBAChC;AACV;AACA,WAAKC,SAAL,GAAwB,IAAIP,EAAE,CAACQ,IAAH,CAAQC,KAAZ,EAAxB,CAFU,CAIV;;AACA,WAAKF,SAAL,CAAsBG,WAAtB,CACE,QADF,EAEE,KAAKC,SAFP,EAGE,IAHF;;AAMA,WAAKD,WAAL,CAAiB,iBAAjB,EAAoC,KAAKE,SAAzC,EAAmE,IAAnE;AACD,KAb2C;AAe5CC,IAAAA,MAAM,EAAE;AACN;AACJ;AACA;AACA;AACIC,MAAAA,oBAAoB,EAAE;AALhB,KAfoC;AAuB5CC,IAAAA,OAAO,EAAE;AACPR,MAAAA,SAAgB,EAAE,IADX;AAEPS,MAAAA,SAAmB,EAAE,KAFd;;AAIP;AACJ;AACA;AACA;AACA;AACIJ,MAAAA,SATO,uBASoB;AACzB,YAAI,KAAKI,SAAT,EAA8B;AAC5B;AACD;;AACD,YAAIR,IAAI,GAAG,KAAKS,YAAL,EAAX,CAJyB,CAMzB;;AACA,YAAIC,cAAc,GAAG,EAArB;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,IAAI,CAACY,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,cAAIE,IAAI,GAAGb,IAAI,CAACW,CAAD,CAAf,CADoC,CAEpC;;AACA,cAAIG,KAAK,GAAGD,IAAI,CAACE,QAAL,GAAgBF,IAAI,CAACE,QAAL,EAAhB,GAAkC,IAA9C;;AACA,cAAID,KAAK,KAAK,IAAd,EAAoB;AAClBJ,YAAAA,cAAc,CAACM,IAAf,CAAoBF,KAApB;AACD;AACF;;AAED,YAAI;AACF,eAAKG,iBAAL,CAAuBP,cAAvB;AACD,SAFD,CAEE,OAAOQ,CAAP,EAAU;AACV,gBAAM,IAAIC,KAAJ,CACJ,0EACED,CAFE,CAAN;AAID;AACF,OAlCM;;AAoCP;AACJ;AACA;AACIf,MAAAA,SAvCO,uBAuCyB;AAC9B,aAAKK,SAAL,GAA2B,IAA3B;AACA,YAAIY,WAAW,GAAG,KAAKC,cAAL,CAAoB,IAApB,CAAlB;AACA,YAAIC,aAAa,GAAG,EAApB;;AAEA,YAAIZ,cAAc,GAAG,KAAKX,SAAL,CAAsBwB,OAAtB,EAArB;;AACA,aAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,cAAc,CAACE,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C,cAAIG,KAAK,GAAGJ,cAAc,CAACC,CAAD,CAA1B;;AACA,eAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,WAAW,CAACR,MAAhC,EAAwCY,CAAC,EAAzC,EAA6C;AAC3C,gBAAIC,UAAU,GAAGL,WAAW,CAACI,CAAD,CAA5B,CAD2C,CAE3C;;AACA,gBAAIE,eAAe,GAAGD,UAAU,CAACV,QAAX,GAClBU,UAAU,CAACV,QAAX,EADkB,GAElB,IAFJ;;AAGA,gBAAID,KAAK,KAAKY,eAAd,EAA+B;AAC7BJ,cAAAA,aAAa,CAACN,IAAd,CAAmBS,UAAnB;AACA;AACD;AACF;AACF;;AACD,aAAKE,YAAL,CAAkBL,aAAlB;AACA,aAAKd,SAAL,GAA2B,KAA3B,CArB8B,CAuB9B;;AACA,YAAIoB,gBAAgB,GAAG,KAAKnB,YAAL,EAAvB;;AACA,YAAI,CAACjB,EAAE,CAACqC,IAAH,CAAQ5B,KAAR,CAAc6B,MAAd,CAAqBF,gBAArB,EAAuCN,aAAvC,CAAL,EAA4D;AAC1D;AACA,eAAKlB,SAAL;AACD;AACF,OApEM;;AAsEP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI2B,MAAAA,iBA/EO,+BA+Ea;AAClB,eAAO,KAAKhC,SAAZ;AACD,OAjFM;;AAmFP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIkB,MAAAA,iBAhGO,6BAgGWP,cAhGX,EAgG2B;AAChC;AACA,YAAI,CAACA,cAAL,EAAqB;AACnB,eAAKX,SAAL,CAAsBiC,SAAtB;;AACA;AACD;;AAMD;AACAtB,QAAAA,cAAc,CAACuB,OAAf,CAAuB,KAAKlC,SAAL,CAAsBmC,SAAtB,EAAvB,EAZgC,CAY2B;;AAC3DxB,QAAAA,cAAc,CAACuB,OAAf,CAAuB,CAAvB,EAbgC,CAaL;;AAE3B,YAAIE,WAAW,GAAG,KAAKpC,SAAL,CAAsBqC,MAAtB,CAA6BC,KAA7B,CAChB,KAAKtC,SADW,EAEhBW,cAFgB,CAAlB;;AAKAyB,QAAAA,WAAW,CAACG,OAAZ;AACD;AArHM,KAvBmC;AA+I5CC,IAAAA,QA/I4C,sBA+IjC;AACT,WAAKC,eAAL,CAAqB,WAArB;AACD;AAjJ2C,GAA9C;AAvBAhD,EAAAA,EAAE,CAACiD,EAAH,CAAMC,IAAN,CAAWC,eAAX,CAA2BhD,aAA3B,GAA2CA,aAA3C",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n/**\n * This mixin offers the selection of the model properties.\n * It can only be included if the object including it implements the\n * {@link qx.ui.core.ISingleSelection} interface and the selectables implement\n * the {@link qx.ui.form.IModel} interface.\n */\nqx.Mixin.define(\"qx.ui.form.MModelSelection\", {\n  construct() {\n    // create the selection array\n    this.__modelSelection = new qx.data.Array();\n\n    // listen to the changes\n    this.__modelSelection.addListener(\n      \"change\",\n      this.__onModelSelectionArrayChange,\n      this\n    );\n\n    this.addListener(\"changeSelection\", this.__onModelSelectionChange, this);\n  },\n\n  events: {\n    /**\n     * Pseudo event. It will never be fired because the array itself can not\n     * be changed. But the event description is needed for the data binding.\n     */\n    changeModelSelection: \"qx.event.type.Data\"\n  },\n\n  members: {\n    __modelSelection: null,\n    __inSelectionChange: false,\n\n    /**\n     * Handler for the selection change of the including class e.g. SelectBox,\n     * List, ...\n     * It sets the new modelSelection via {@link #setModelSelection}.\n     */\n    __onModelSelectionChange() {\n      if (this.__inSelectionChange) {\n        return;\n      }\n      var data = this.getSelection();\n\n      // create the array with the modes inside\n      var modelSelection = [];\n      for (var i = 0; i < data.length; i++) {\n        var item = data[i];\n        // fallback if getModel is not implemented\n        var model = item.getModel ? item.getModel() : null;\n        if (model !== null) {\n          modelSelection.push(model);\n        }\n      }\n\n      try {\n        this.setModelSelection(modelSelection);\n      } catch (e) {\n        throw new Error(\n          \"Could not set the model selection. Maybe your models are not unique? \" +\n            e\n        );\n      }\n    },\n\n    /**\n     * Listener for the change of the internal model selection data array.\n     */\n    __onModelSelectionArrayChange() {\n      this.__inSelectionChange = true;\n      var selectables = this.getSelectables(true);\n      var itemSelection = [];\n\n      var modelSelection = this.__modelSelection.toArray();\n      for (var i = 0; i < modelSelection.length; i++) {\n        var model = modelSelection[i];\n        for (var j = 0; j < selectables.length; j++) {\n          var selectable = selectables[j];\n          // fallback if getModel is not implemented\n          var selectableModel = selectable.getModel\n            ? selectable.getModel()\n            : null;\n          if (model === selectableModel) {\n            itemSelection.push(selectable);\n            break;\n          }\n        }\n      }\n      this.setSelection(itemSelection);\n      this.__inSelectionChange = false;\n\n      // check if the setting has worked\n      var currentSelection = this.getSelection();\n      if (!qx.lang.Array.equals(currentSelection, itemSelection)) {\n        // if not, set the actual selection\n        this.__onModelSelectionChange();\n      }\n    },\n\n    /**\n     * Returns always an array of the models of the selected items. If no\n     * item is selected or no model is given, the array will be empty.\n     *\n     * *CAREFUL!* The model selection can only work if every item item in the\n     * selection providing widget has a model property!\n     *\n     * @return {qx.data.Array} An array of the models of the selected items.\n     */\n    getModelSelection() {\n      return this.__modelSelection;\n    },\n\n    /**\n     * Takes the given models in the array and searches for the corresponding\n     * selectables. If an selectable does have that model attached, it will be\n     * selected.\n     *\n     * *Attention:* This method can have a time complexity of O(n^2)!\n     *\n     * *CAREFUL!* The model selection can only work if every item item in the\n     * selection providing widget has a model property!\n     *\n     * @param modelSelection {Array} An array of models, which should be\n     *   selected.\n     */\n    setModelSelection(modelSelection) {\n      // check for null values\n      if (!modelSelection) {\n        this.__modelSelection.removeAll();\n        return;\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertArray(modelSelection, \"Please use an array as parameter.\");\n      }\n\n      // add the first two parameter\n      modelSelection.unshift(this.__modelSelection.getLength()); // remove index\n      modelSelection.unshift(0); // start index\n\n      var returnArray = this.__modelSelection.splice.apply(\n        this.__modelSelection,\n        modelSelection\n      );\n\n      returnArray.dispose();\n    }\n  },\n\n  destruct() {\n    this._disposeObjects(\"__modelSelection\");\n  }\n});\n"
  ]
}