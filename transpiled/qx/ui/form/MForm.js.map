{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/form/MForm.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "locale",
    "Manager",
    "getInstance",
    "addListener",
    "__onChangeLocale",
    "properties",
    "valid",
    "check",
    "init",
    "apply",
    "event",
    "required",
    "invalidMessage",
    "requiredInvalidMessage",
    "nullable",
    "members",
    "_applyValid",
    "value",
    "old",
    "removeState",
    "addState",
    "core",
    "Environment",
    "select",
    "e",
    "getInvalidMessage",
    "translate",
    "setInvalidMessage",
    "getRequiredInvalidMessage",
    "setRequiredInvalidMessage",
    "destruct",
    "removeListener",
    "ui",
    "form",
    "MForm"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,kBAAhB,EAAoC;AAClCC,IAAAA,SADkC,uBACtB;AACmC;AAC3CN,QAAAA,EAAE,CAACO,MAAH,CAAUC,OAAV,CAAkBC,WAAlB,GAAgCC,WAAhC,CACE,cADF,EAEE,KAAKC,SAFP,EAGE,IAHF;AAKD;AACF,KATiC;AAWlCC,IAAAA,UAAU,EAAE;AACV;AACJ;AACA;AACA;AACIC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,SADF;AAELC,QAAAA,IAAI,EAAE,IAFD;AAGLC,QAAAA,KAAK,EAAE,aAHF;AAILC,QAAAA,KAAK,EAAE;AAJF,OALG;;AAYV;AACJ;AACA;AACIC,MAAAA,QAAQ,EAAE;AACRJ,QAAAA,KAAK,EAAE,SADC;AAERC,QAAAA,IAAI,EAAE,KAFE;AAGRE,QAAAA,KAAK,EAAE;AAHC,OAfA;;AAqBV;AACJ;AACA;AACIE,MAAAA,cAAc,EAAE;AACdL,QAAAA,KAAK,EAAE,QADO;AAEdC,QAAAA,IAAI,EAAE,EAFQ;AAGdE,QAAAA,KAAK,EAAE;AAHO,OAxBN;;AA8BV;AACJ;AACA;AACA;AACIG,MAAAA,sBAAsB,EAAE;AACtBN,QAAAA,KAAK,EAAE,QADe;AAEtBO,QAAAA,QAAQ,EAAE,IAFY;AAGtBJ,QAAAA,KAAK,EAAE;AAHe;AAlCd,KAXsB;AAoDlCK,IAAAA,OAAO,EAAE;AACP;AACAC,MAAAA,WAFO,uBAEKC,KAFL,EAEYC,GAFZ,EAEiB;AACtBD,QAAAA,KAAK,GAAG,KAAKE,WAAL,CAAiB,SAAjB,CAAH,GAAiC,KAAKC,QAAL,CAAc,SAAd,CAAtC;AACD,OAJM;;AAMP;AACJ;AACA;AACA;AACA;AACA;AACIhB,MAAAA,SAAgB,EAAEX,EAAE,CAAC4B,IAAH,CAAQC,WAAR,CAAoBC,MAApB,CAA2B,cAA3B,EAA2C;AAAA,+BACtDC,CADsD,EACnD;AACN;AACA,cAAIZ,cAAc,GAAG,KAAKa,iBAAL,EAArB;;AACA,cAAIb,cAAc,IAAIA,cAAc,CAACc,SAArC,EAAgD;AAC9C,iBAAKC,iBAAL,CAAuBf,cAAc,CAACc,SAAf,EAAvB;AACD,WALK,CAMN;;;AACA,cAAIb,sBAAsB,GAAG,KAAKe,yBAAL,EAA7B;;AACA,cAAIf,sBAAsB,IAAIA,sBAAsB,CAACa,SAArD,EAAgE;AAC9D,iBAAKG,yBAAL,CAA+BhB,sBAAsB,CAACa,SAAvB,EAA/B;AACD;AACF,SAZ0D;AAc3D,iBAAO;AAdoD,OAA3C;AAZX,KApDyB;AAkFlCI,IAAAA,QAlFkC,sBAkFvB;AACoC;AAC3CrC,QAAAA,EAAE,CAACO,MAAH,CAAUC,OAAV,CAAkBC,WAAlB,GAAgC6B,cAAhC,CACE,cADF,EAEE,KAAK3B,SAFP,EAGE,IAHF;AAKD;AACF;AA1FiC,GAApC;AArBAX,EAAAA,EAAE,CAACuC,EAAH,CAAMC,IAAN,CAAWC,KAAX,CAAiBtC,aAAjB,GAAiCA,aAAjC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * Mixin handling the valid and required properties for the form widgets.\n */\nqx.Mixin.define(\"qx.ui.form.MForm\", {\n  construct() {\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().addListener(\n        \"changeLocale\",\n        this.__onChangeLocale,\n        this\n      );\n    }\n  },\n\n  properties: {\n    /**\n     * Flag signaling if a widget is valid. If a widget is invalid, an invalid\n     * state will be set.\n     */\n    valid: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyValid\",\n      event: \"changeValid\"\n    },\n\n    /**\n     * Flag signaling if a widget is required.\n     */\n    required: {\n      check: \"Boolean\",\n      init: false,\n      event: \"changeRequired\"\n    },\n\n    /**\n     * Message which is shown in an invalid tooltip.\n     */\n    invalidMessage: {\n      check: \"String\",\n      init: \"\",\n      event: \"changeInvalidMessage\"\n    },\n\n    /**\n     * Message which is shown in an invalid tooltip if the {@link #required} is\n     * set to true.\n     */\n    requiredInvalidMessage: {\n      check: \"String\",\n      nullable: true,\n      event: \"changeInvalidMessage\"\n    }\n  },\n\n  members: {\n    // apply method\n    _applyValid(value, old) {\n      value ? this.removeState(\"invalid\") : this.addState(\"invalid\");\n    },\n\n    /**\n     * Locale change event handler\n     *\n     * @signature function(e)\n     * @param e {Event} the change event\n     */\n    __onChangeLocale: qx.core.Environment.select(\"qx.dynlocale\", {\n      true(e) {\n        // invalid message\n        var invalidMessage = this.getInvalidMessage();\n        if (invalidMessage && invalidMessage.translate) {\n          this.setInvalidMessage(invalidMessage.translate());\n        }\n        // required invalid message\n        var requiredInvalidMessage = this.getRequiredInvalidMessage();\n        if (requiredInvalidMessage && requiredInvalidMessage.translate) {\n          this.setRequiredInvalidMessage(requiredInvalidMessage.translate());\n        }\n      },\n\n      false: null\n    })\n  },\n\n  destruct() {\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().removeListener(\n        \"changeLocale\",\n        this.__onChangeLocale,\n        this\n      );\n    }\n  }\n});\n"
  ]
}