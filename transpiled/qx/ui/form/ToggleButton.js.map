{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/form/ToggleButton.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "basic",
    "Atom",
    "include",
    "core",
    "MExecutable",
    "implement",
    "form",
    "IBooleanForm",
    "IExecutable",
    "IRadioItem",
    "construct",
    "label",
    "icon",
    "addListener",
    "_onPointerOver",
    "_onPointerOut",
    "_onPointerDown",
    "_onPointerUp",
    "_onKeyDown",
    "_onKeyUp",
    "_onExecute",
    "contentEl",
    "getContentElement",
    "setAttribute",
    "properties",
    "appearance",
    "refine",
    "init",
    "focusable",
    "value",
    "check",
    "nullable",
    "event",
    "apply",
    "group",
    "triState",
    "members",
    "_applyGroup",
    "old",
    "remove",
    "add",
    "_applyValue",
    "addState",
    "removeState",
    "ariaPressed",
    "Boolean",
    "isTriState",
    "_applyTriState",
    "getValue",
    "e",
    "toggleValue",
    "getTarget",
    "hasState",
    "isLeftPressed",
    "capture",
    "stopPropagation",
    "releaseCapture",
    "execute",
    "getKeyIdentifier",
    "ToggleButton"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * A toggle Button widget\n *\n * If the user presses the button by tapping on it pressing the enter or\n * space key, the button toggles between the pressed an not pressed states.\n */\nqx.Class.define(\"qx.ui.form.ToggleButton\", {\n  extend: qx.ui.basic.Atom,\n  include: [qx.ui.core.MExecutable],\n\n  implement: [\n    qx.ui.form.IBooleanForm,\n    qx.ui.form.IExecutable,\n    qx.ui.form.IRadioItem\n  ],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Creates a ToggleButton.\n   *\n   * @param label {String} The text on the button.\n   * @param icon {String} An URI to the icon of the button.\n   */\n  construct(label, icon) {\n    super(label, icon);\n\n    // register pointer events\n    this.addListener(\"pointerover\", this._onPointerOver);\n    this.addListener(\"pointerout\", this._onPointerOut);\n    this.addListener(\"pointerdown\", this._onPointerDown);\n    this.addListener(\"pointerup\", this._onPointerUp);\n\n    // register keyboard events\n    this.addListener(\"keydown\", this._onKeyDown);\n    this.addListener(\"keyup\", this._onKeyUp);\n\n    // register execute event\n    this.addListener(\"execute\", this._onExecute, this);\n\n    // ARIA attrs\n    const contentEl = this.getContentElement();\n    contentEl.setAttribute(\"role\", \"button\");\n    contentEl.setAttribute(\"aria-pressed\", false);\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    // overridden\n    appearance: {\n      refine: true,\n      init: \"toggle-button\"\n    },\n\n    // overridden\n    focusable: {\n      refine: true,\n      init: true\n    },\n\n    /** The value of the widget. True, if the widget is checked. */\n    value: {\n      check: \"Boolean\",\n      nullable: true,\n      event: \"changeValue\",\n      apply: \"_applyValue\",\n      init: false\n    },\n\n    /** The assigned qx.ui.form.RadioGroup which handles the switching between registered buttons. */\n    group: {\n      check: \"qx.ui.form.RadioGroup\",\n      nullable: true,\n      apply: \"_applyGroup\"\n    },\n\n    /**\n     * Whether the button has a third state. Use this for tri-state checkboxes.\n     *\n     * When enabled, the value null of the property value stands for \"undetermined\",\n     * while true is mapped to \"enabled\" and false to \"disabled\" as usual. Note\n     * that the value property is set to false initially.\n     *\n     */\n    triState: {\n      check: \"Boolean\",\n      apply: \"_applyTriState\",\n      nullable: true,\n      init: null\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /** The assigned {@link qx.ui.form.RadioGroup} which handles the switching between registered buttons */\n    _applyGroup(value, old) {\n      if (old) {\n        old.remove(this);\n      }\n\n      if (value) {\n        value.add(this);\n      }\n    },\n\n    /**\n     * Changes the state of the button dependent on the checked value.\n     *\n     * @param value {Boolean} Current value\n     * @param old {Boolean} Previous value\n     */\n    _applyValue(value, old) {\n      value ? this.addState(\"checked\") : this.removeState(\"checked\");\n\n      let ariaPressed = Boolean(value);\n      if (this.isTriState()) {\n        if (value === null) {\n          ariaPressed = \"mixed\";\n          this.addState(\"undetermined\");\n        } else if (old === null) {\n          this.removeState(\"undetermined\");\n        }\n      }\n\n      this.getContentElement().setAttribute(\"aria-pressed\", ariaPressed);\n    },\n\n    /**\n     * Apply value property when triState property is modified.\n     *\n     * @param value {Boolean} Current value\n     * @param old {Boolean} Previous value\n     */\n    _applyTriState(value, old) {\n      this._applyValue(this.getValue());\n    },\n\n    /**\n     * Handler for the execute event.\n     *\n     * @param e {qx.event.type.Event} The execute event.\n     */\n    _onExecute(e) {\n      this.toggleValue();\n    },\n\n    /**\n     * Listener method for \"pointerover\" event.\n     * <ul>\n     * <li>Adds state \"hovered\"</li>\n     * <li>Removes \"abandoned\" and adds \"pressed\" state (if \"abandoned\" state is set)</li>\n     * </ul>\n     *\n     * @param e {qx.event.type.Pointer} Pointer event\n     */\n    _onPointerOver(e) {\n      if (e.getTarget() !== this) {\n        return;\n      }\n\n      this.addState(\"hovered\");\n\n      if (this.hasState(\"abandoned\")) {\n        this.removeState(\"abandoned\");\n        this.addState(\"pressed\");\n      }\n    },\n\n    /**\n     * Listener method for \"pointerout\" event.\n     * <ul>\n     * <li>Removes \"hovered\" state</li>\n     * <li>Adds \"abandoned\" state (if \"pressed\" state is set)</li>\n     * <li>Removes \"pressed\" state (if \"pressed\" state is set and button is not checked)\n     * </ul>\n     *\n     * @param e {qx.event.type.Pointer} pointer event\n     */\n    _onPointerOut(e) {\n      if (e.getTarget() !== this) {\n        return;\n      }\n\n      this.removeState(\"hovered\");\n\n      if (this.hasState(\"pressed\")) {\n        if (!this.getValue()) {\n          this.removeState(\"pressed\");\n        }\n\n        this.addState(\"abandoned\");\n      }\n    },\n\n    /**\n     * Listener method for \"pointerdown\" event.\n     * <ul>\n     * <li>Activates capturing</li>\n     * <li>Removes \"abandoned\" state</li>\n     * <li>Adds \"pressed\" state</li>\n     * </ul>\n     *\n     * @param e {qx.event.type.Pointer} pointer event\n     */\n    _onPointerDown(e) {\n      if (!e.isLeftPressed()) {\n        return;\n      }\n\n      // Activate capturing if the button get a pointerout while\n      // the button is pressed.\n      this.capture();\n\n      this.removeState(\"abandoned\");\n      this.addState(\"pressed\");\n      e.stopPropagation();\n    },\n\n    /**\n     * Listener method for \"pointerup\" event.\n     * <ul>\n     * <li>Releases capturing</li>\n     * <li>Removes \"pressed\" state (if not \"abandoned\" state is set and \"pressed\" state is set)</li>\n     * <li>Removes \"abandoned\" state (if set)</li>\n     * <li>Toggles {@link #value} (if state \"abandoned\" is not set and state \"pressed\" is set)</li>\n     * </ul>\n     *\n     * @param e {qx.event.type.Pointer} pointer event\n     */\n    _onPointerUp(e) {\n      this.releaseCapture();\n\n      if (this.hasState(\"abandoned\")) {\n        this.removeState(\"abandoned\");\n      } else if (this.hasState(\"pressed\")) {\n        this.execute();\n      }\n\n      this.removeState(\"pressed\");\n      e.stopPropagation();\n    },\n\n    /**\n     * Listener method for \"keydown\" event.<br/>\n     * Removes \"abandoned\" and adds \"pressed\" state\n     * for the keys \"Enter\" or \"Space\"\n     *\n     * @param e {Event} Key event\n     */\n    _onKeyDown(e) {\n      switch (e.getKeyIdentifier()) {\n        case \"Enter\":\n        case \"Space\":\n          this.removeState(\"abandoned\");\n          this.addState(\"pressed\");\n\n          e.stopPropagation();\n      }\n    },\n\n    /**\n     * Listener method for \"keyup\" event.<br/>\n     * Removes \"abandoned\" and \"pressed\" state (if \"pressed\" state is set)\n     * for the keys \"Enter\" or \"Space\". It also toggles the {@link #value} property.\n     *\n     * @param e {Event} Key event\n     */\n    _onKeyUp(e) {\n      if (!this.hasState(\"pressed\")) {\n        return;\n      }\n\n      switch (e.getKeyIdentifier()) {\n        case \"Enter\":\n        case \"Space\":\n          this.removeState(\"abandoned\");\n          this.execute();\n\n          this.removeState(\"pressed\");\n          e.stopPropagation();\n      }\n    }\n  }\n});\n"
  ]
}