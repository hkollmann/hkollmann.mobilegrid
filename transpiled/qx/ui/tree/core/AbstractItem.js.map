{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/tree/core/AbstractItem.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "type",
    "include",
    "form",
    "MModelProperty",
    "implement",
    "IModel",
    "construct",
    "label",
    "setLabel",
    "_setLayout",
    "layout",
    "HBox",
    "_addWidgets",
    "initOpen",
    "properties",
    "open",
    "check",
    "init",
    "event",
    "apply",
    "openSymbolMode",
    "indent",
    "themeable",
    "icon",
    "nullable",
    "iconOpened",
    "members",
    "__labelAdded",
    "__iconAdded",
    "__spacer",
    "Error",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "basic",
    "Label",
    "set",
    "alignY",
    "anonymous",
    "value",
    "getLabel",
    "Image",
    "source",
    "getIcon",
    "tree",
    "FolderOpenButton",
    "addListener",
    "_onChangeOpen",
    "_updateIndent",
    "addWidget",
    "widget",
    "options",
    "_add",
    "addSpacer",
    "Spacer",
    "_remove",
    "addOpenButton",
    "getChildControl",
    "e",
    "isOpenable",
    "setOpen",
    "getData",
    "addIcon",
    "addLabel",
    "text",
    "setValue",
    "_applyIcon",
    "old",
    "__getUserValueIconOpened",
    "__setIconSource",
    "isOpen",
    "_applyIconOpened",
    "__getUserValueIcon",
    "_applyLabel",
    "_applyOpen",
    "getIconOpened",
    "addState",
    "removeState",
    "util",
    "PropertyUtil",
    "getUserValue",
    "url",
    "setSource",
    "openMode",
    "getOpenSymbolMode",
    "hasChildren",
    "_shouldShowOpenSymbol",
    "_applyOpenSymbolMode",
    "openWidth",
    "show",
    "openBounds",
    "getBounds",
    "width",
    "exclude",
    "setWidth",
    "getLevel",
    "getIndent",
    "_applyIndent",
    "syncWidget",
    "jobs",
    "destruct",
    "_disposeObjects",
    "AbstractItem"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Derrell Lipman (derrell)\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * The AbstractItem serves as a common superclass for the {@link\n * qx.ui.tree.core.AbstractTreeItem} and {@link qx.ui.tree.VirtualTreeItem} classes.\n *\n * @childControl label {qx.ui.basic.Label} label of the tree item\n * @childControl icon {qx.ui.basic.Image} icon of the tree item\n * @childControl open {qx.ui.tree.core.FolderOpenButton} button to open/close a subtree\n */\nqx.Class.define(\"qx.ui.tree.core.AbstractItem\", {\n  extend: qx.ui.core.Widget,\n  type: \"abstract\",\n  include: [qx.ui.form.MModelProperty],\n  implement: [qx.ui.form.IModel],\n\n  /**\n   * @param label {String?null} The tree item's caption text\n   */\n  construct(label) {\n    super();\n\n    if (label != null) {\n      this.setLabel(label);\n    }\n\n    this._setLayout(new qx.ui.layout.HBox());\n    this._addWidgets();\n\n    this.initOpen();\n  },\n\n  properties: {\n    /**\n     * Whether the tree item is opened.\n     */\n    open: {\n      check: \"Boolean\",\n      init: false,\n      event: \"changeOpen\",\n      apply: \"_applyOpen\"\n    },\n\n    /**\n     * Controls, when to show the open symbol. If the mode is \"auto\" , the open\n     * symbol is shown only if the item has child items.\n     */\n    openSymbolMode: {\n      check: [\"always\", \"never\", \"auto\"],\n      init: \"auto\",\n      event: \"changeOpenSymbolMode\",\n      apply: \"_applyOpenSymbolMode\"\n    },\n\n    /**\n     * The number of pixel to indent the tree item for each level.\n     */\n    indent: {\n      check: \"Integer\",\n      init: 19,\n      apply: \"_applyIndent\",\n      event: \"changeIndent\",\n      themeable: true\n    },\n\n    /**\n     * URI of \"closed\" icon. Can be any URI String supported by qx.ui.basic.Image.\n     **/\n    icon: {\n      check: \"String\",\n      apply: \"_applyIcon\",\n      event: \"changeIcon\",\n      nullable: true,\n      themeable: true\n    },\n\n    /**\n     * URI of \"opened\" icon. Can be any URI String supported by qx.ui.basic.Image.\n     **/\n    iconOpened: {\n      check: \"String\",\n      apply: \"_applyIconOpened\",\n      event: \"changeIconOpened\",\n      nullable: true,\n      themeable: true\n    },\n\n    /**\n     * The label/caption/text\n     */\n    label: {\n      check: \"String\",\n      apply: \"_applyLabel\",\n      event: \"changeLabel\",\n      init: \"\"\n    }\n  },\n\n  members: {\n    __labelAdded: null,\n    __iconAdded: null,\n    __spacer: null,\n\n    /**\n     * This method configures the tree item by adding its sub widgets like\n     * label, icon, open symbol, ...\n     *\n     * This method must be overridden by sub classes.\n     */\n    _addWidgets() {\n      throw new Error(\"Abstract method call.\");\n    },\n\n    // overridden\n    _createChildControlImpl(id, hash) {\n      var control;\n\n      switch (id) {\n        case \"label\":\n          control = new qx.ui.basic.Label().set({\n            alignY: \"middle\",\n            anonymous: true,\n            value: this.getLabel()\n          });\n\n          break;\n\n        case \"icon\":\n          control = new qx.ui.basic.Image().set({\n            alignY: \"middle\",\n            anonymous: true,\n            source: this.getIcon()\n          });\n\n          break;\n\n        case \"open\":\n          control = new qx.ui.tree.core.FolderOpenButton().set({\n            alignY: \"middle\"\n          });\n\n          control.addListener(\"changeOpen\", this._onChangeOpen, this);\n          control.addListener(\"resize\", this._updateIndent, this);\n          break;\n      }\n\n      return control || super._createChildControlImpl(id);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      TREE ITEM CONFIGURATION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds a sub widget to the tree item's horizontal box layout.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to add\n     * @param options {Map?null} The (optional) layout options to use for the widget\n     */\n    addWidget(widget, options) {\n      this._add(widget, options);\n    },\n\n    /**\n     * Adds the spacer used to render the indentation to the item's horizontal\n     * box layout. If the spacer has been added before, it is removed from its\n     * old position and added to the end of the layout.\n     */\n    addSpacer() {\n      if (!this.__spacer) {\n        this.__spacer = new qx.ui.core.Spacer();\n      } else {\n        this._remove(this.__spacer);\n      }\n\n      this._add(this.__spacer);\n    },\n\n    /**\n     * Adds the open button to the item's horizontal box layout. If the open\n     * button has been added before, it is removed from its old position and\n     * added to the end of the layout.\n     */\n    addOpenButton() {\n      this._add(this.getChildControl(\"open\"));\n    },\n\n    /**\n     * Event handler, which listens to open state changes of the open button\n     *\n     * @param e {qx.event.type.Data} The event object\n     */\n    _onChangeOpen(e) {\n      if (this.isOpenable()) {\n        this.setOpen(e.getData());\n      }\n    },\n\n    /**\n     * Adds the icon widget to the item's horizontal box layout. If the icon\n     * widget has been added before, it is removed from its old position and\n     * added to the end of the layout.\n     */\n    addIcon() {\n      var icon = this.getChildControl(\"icon\");\n\n      if (this.__iconAdded) {\n        this._remove(icon);\n      }\n\n      this._add(icon);\n      this.__iconAdded = true;\n    },\n\n    /**\n     * Adds the label to the item's horizontal box layout. If the label\n     * has been added before, it is removed from its old position and\n     * added to the end of the layout.\n     *\n     * @param text {String?0} The label's contents\n     */\n    addLabel(text) {\n      var label = this.getChildControl(\"label\");\n\n      if (this.__labelAdded) {\n        this._remove(label);\n      }\n\n      if (text) {\n        this.setLabel(text);\n      } else {\n        label.setValue(this.getLabel());\n      }\n\n      this._add(label);\n      this.__labelAdded = true;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyIcon(value, old) {\n      // Set \"closed\" icon - even when \"opened\" - if no \"opened\" icon was\n      // user-defined\n      if (!this.__getUserValueIconOpened()) {\n        this.__setIconSource(value);\n      } else if (!this.isOpen()) {\n        this.__setIconSource(value);\n      }\n    },\n\n    // property apply\n    _applyIconOpened(value, old) {\n      if (this.isOpen()) {\n        // ... both \"closed\" and \"opened\" icon were user-defined\n        if (this.__getUserValueIcon() && this.__getUserValueIconOpened()) {\n          this.__setIconSource(value);\n        }\n\n        // .. only \"opened\" icon was user-defined\n        else if (\n          !this.__getUserValueIcon() &&\n          this.__getUserValueIconOpened()\n        ) {\n          this.__setIconSource(value);\n        }\n      }\n    },\n\n    // property apply\n    _applyLabel(value, old) {\n      var label = this.getChildControl(\"label\", true);\n      if (label) {\n        label.setValue(value);\n      }\n    },\n\n    // property apply\n    _applyOpen(value, old) {\n      var open = this.getChildControl(\"open\", true);\n      if (open) {\n        open.setOpen(value);\n      }\n\n      //\n      // Determine source of icon for \"opened\" or \"closed\" state\n      //\n      var source;\n\n      // Opened\n      if (value) {\n        // Never overwrite user-defined icon with themed \"opened\" icon\n        source = this.__getUserValueIconOpened() ? this.getIconOpened() : null;\n      }\n\n      // Closed\n      else {\n        source = this.getIcon();\n      }\n\n      if (source) {\n        this.__setIconSource(source);\n      }\n\n      value ? this.addState(\"opened\") : this.removeState(\"opened\");\n    },\n\n    /**\n     * Get user-defined value of \"icon\" property\n     *\n     * @return {var} The user value of the property \"icon\"\n     */\n    __getUserValueIcon() {\n      return qx.util.PropertyUtil.getUserValue(this, \"icon\");\n    },\n\n    /**\n     * Get user-defined value of \"iconOpened\" property\n     *\n     * @return {var} The user value of the property \"iconOpened\"\n     */\n    __getUserValueIconOpened() {\n      return qx.util.PropertyUtil.getUserValue(this, \"iconOpened\");\n    },\n\n    /**\n     * Set source of icon child control\n     *\n     * @param url {String} The URL of the icon\n     */\n    __setIconSource(url) {\n      var icon = this.getChildControl(\"icon\", true);\n      if (icon) {\n        icon.setSource(url);\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INDENT HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Whether the tree item can be opened.\n     *\n     * @return {Boolean} Whether the tree item can be opened.\n     */\n    isOpenable() {\n      var openMode = this.getOpenSymbolMode();\n      return (\n        openMode === \"always\" || (openMode === \"auto\" && this.hasChildren())\n      );\n    },\n\n    /**\n     * Whether the open symbol should be shown\n     *\n     * @return {Boolean} Whether the open symbol should be shown.\n     */\n    _shouldShowOpenSymbol() {\n      throw new Error(\"Abstract method call.\");\n    },\n\n    // property apply\n    _applyOpenSymbolMode(value, old) {\n      this._updateIndent();\n    },\n\n    /**\n     * Update the indentation of the tree item.\n     */\n    _updateIndent() {\n      var openWidth = 0;\n      var open = this.getChildControl(\"open\", true);\n\n      if (open) {\n        if (this._shouldShowOpenSymbol()) {\n          open.show();\n\n          var openBounds = open.getBounds();\n          if (openBounds) {\n            openWidth = openBounds.width;\n          } else {\n            return;\n          }\n        } else {\n          open.exclude();\n        }\n      }\n\n      if (this.__spacer) {\n        this.__spacer.setWidth(\n          (this.getLevel() + 1) * this.getIndent() - openWidth\n        );\n      }\n    },\n\n    // property apply\n    _applyIndent(value, old) {\n      this._updateIndent();\n    },\n\n    /**\n     * Computes the item's nesting level. If the item is not part of a tree\n     * this function will return <code>null</code>.\n     *\n     * @return {Integer|null} The item's nesting level or <code>null</code>.\n     */\n    getLevel() {\n      throw new Error(\"Abstract method call.\");\n    },\n\n    // overridden\n    syncWidget(jobs) {\n      this._updateIndent();\n    },\n\n    /**\n     * Whether the item has any children\n     *\n     * @return {Boolean} Whether the item has any children.\n     */\n    hasChildren() {\n      throw new Error(\"Abstract method call.\");\n    }\n  },\n\n  destruct() {\n    this._disposeObjects(\"__spacer\");\n  }\n});\n"
  ]
}