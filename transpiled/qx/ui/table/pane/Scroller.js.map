{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/table/pane/Scroller.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "scroll",
    "MScrollBarFactory",
    "construct",
    "table",
    "__table",
    "grid",
    "layout",
    "Grid",
    "setColumnFlex",
    "setRowFlex",
    "_setLayout",
    "__header",
    "_showChildControl",
    "__tablePane",
    "__top",
    "container",
    "Composite",
    "HBox",
    "set",
    "minWidth",
    "_add",
    "row",
    "column",
    "colSpan",
    "_headerClipper",
    "_createHeaderClipper",
    "add",
    "addListener",
    "_onChangeCaptureHeader",
    "_onPointermoveHeader",
    "_onPointerdownHeader",
    "_onPointerupHeader",
    "_onTapHeader",
    "flex",
    "_paneClipper",
    "_createPaneClipper",
    "_onRoll",
    "_onPointermovePane",
    "_onPointerdownPane",
    "_onTapPane",
    "_onContextMenu",
    "Environment",
    "get",
    "_onDbltapPane",
    "_onResizePane",
    "__clipperContainer",
    "setLayout",
    "Canvas",
    "edge",
    "__horScrollBar",
    "__verScrollBar",
    "__focusIndicator",
    "getChildControl",
    "initShowCellFocusIndicator",
    "hide",
    "_onPointerout",
    "_onAppear",
    "_onDisappear",
    "__timer",
    "event",
    "Timer",
    "_oninterval",
    "initScrollTimeout",
    "statics",
    "MIN_COLUMN_WIDTH",
    "RESIZE_REGION_RADIUS",
    "TAP_TOLERANCE",
    "HORIZONTAL_SCROLLBAR",
    "VERTICAL_SCROLLBAR",
    "events",
    "changeScrollY",
    "changeScrollX",
    "cellTap",
    "cellDbltap",
    "cellContextmenu",
    "beforeSort",
    "properties",
    "horizontalScrollBarVisible",
    "check",
    "init",
    "apply",
    "nullable",
    "verticalScrollBarVisible",
    "tablePaneModel",
    "liveResize",
    "focusCellOnPointerMove",
    "selectBeforeFocus",
    "showCellFocusIndicator",
    "contextMenuFromDataCellsOnly",
    "resetSelectionOnHeaderTap",
    "resetSelectionOnTapBelowRows",
    "scrollTimeout",
    "appearance",
    "refine",
    "minCellEditHeight",
    "members",
    "__lastRowCount",
    "__updateInterval",
    "__updateContentPlanned",
    "__onintervalWrapper",
    "_moveColumn",
    "__lastMoveColPos",
    "_lastMoveTargetX",
    "_lastMoveTargetScroller",
    "__lastMovePointerPageX",
    "__resizeColumn",
    "__lastResizePointerPageX",
    "__lastResizeWidth",
    "__lastPointerDownCell",
    "__firedTapEvent",
    "__ignoreTap",
    "__lastPointerPageX",
    "__lastPointerPageY",
    "__focusedCol",
    "__focusedRow",
    "_cellEditor",
    "__cellEditorFactory",
    "__topRightWidget",
    "__focusIndicatorPointerDownListener",
    "getPaneInsetRight",
    "topRight",
    "getTopRightWidget",
    "topRightWidth",
    "isVisible",
    "getBounds",
    "width",
    "getMarginLeft",
    "getMarginRight",
    "scrollBar",
    "scrollBarWidth",
    "getVerticalScrollBarVisible",
    "getVerticalScrollBarWidth",
    "Math",
    "max",
    "setPaneWidth",
    "isVerticalScrollBarVisible",
    "setWidth",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "getTable",
    "getNewTablePaneHeader",
    "getNewTablePane",
    "pane",
    "FocusIndicator",
    "setUserBounds",
    "setZIndex",
    "_onPointerupFocusIndicator",
    "show",
    "setDecorator",
    "_createScrollBar",
    "alignY",
    "_onScrollX",
    "setMinHeight",
    "AbstractScrollArea",
    "DEFAULT_SCROLLBAR_WIDTH",
    "bottom",
    "right",
    "left",
    "_onScrollY",
    "top",
    "_applyHorizontalScrollBarVisible",
    "value",
    "old",
    "setVisibility",
    "_applyVerticalScrollBarVisible",
    "_applyTablePaneModel",
    "removeListener",
    "_onPaneModelChanged",
    "_applyShowCellFocusIndicator",
    "_updateFocusIndicator",
    "getScrollY",
    "getPosition",
    "setScrollY",
    "scrollY",
    "renderSync",
    "scrollTo",
    "_updateContent",
    "getScrollX",
    "setScrollX",
    "scrollX",
    "Clipper",
    "onColVisibilityChanged",
    "updateHorScrollBarMaximum",
    "setColumnWidth",
    "col",
    "paneModel",
    "getTablePaneModel",
    "x",
    "getX",
    "onColOrderChanged",
    "onTableModelDataChanged",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "rowCount",
    "getTableModel",
    "getRowCount",
    "updateVerScrollBarMaximum",
    "focusedRow",
    "getFocusedRow",
    "setFocusedCell",
    "getFocusedColumn",
    "onSelectionChanged",
    "onFocusChanged",
    "onTableModelMetaDataChanged",
    "onPaneModelChanged",
    "_updateScrollBarVisibility",
    "paneSize",
    "getInnerSize",
    "scrollSize",
    "getTotalWidth",
    "setMaximum",
    "setKnobFactor",
    "pos",
    "setPosition",
    "min",
    "tableModel",
    "getKeepFirstVisibleRowComplete",
    "rowHeight",
    "getRowHeight",
    "height",
    "onKeepFirstVisibleRowCompleteChanged",
    "_startInterval",
    "getScrollTimeout",
    "_stopInterval",
    "e",
    "scrollLeft",
    "getData",
    "fireDataEvent",
    "getOldData",
    "scrollToX",
    "__inOnScrollY",
    "scrollbar",
    "delta",
    "abs",
    "getMaximum",
    "_postponedUpdateContent",
    "getPointerType",
    "getEnabled",
    "getDelta",
    "y",
    "scrollBy",
    "parseInt",
    "scrolled",
    "__isAtEdge",
    "getFocusCellOnPointerMove",
    "_focusCellAtPagePos",
    "stop",
    "stopMomentum",
    "position",
    "__handleResizeColumn",
    "pageX",
    "headerCell",
    "getHeaderWidgetAtColumn",
    "minColumnWidth",
    "getSizeHint",
    "newWidth",
    "getLiveResize",
    "columnModel",
    "getTableColumnModel",
    "_showResizeLine",
    "getColumnLeft",
    "__handleMoveColumn",
    "tapTolerance",
    "Scroller",
    "isShowingColumnMoveFeedback",
    "showColumnMoveFeedback",
    "targetScroller",
    "getTablePaneScrollerAtPageX",
    "hideColumnMoveFeedback",
    "useResizeCursor",
    "pointerOverColumn",
    "getDocumentLeft",
    "pageY",
    "getDocumentTop",
    "stopPropagation",
    "resizeCol",
    "_getResizeColumnForPageX",
    "_getColumnForPageX",
    "isColumnSortable",
    "cursor",
    "getApplicationRoot",
    "setGlobalCursor",
    "setCursor",
    "setPointerOverColumn",
    "_getRowForPagePos",
    "_startResizeHeader",
    "moveCol",
    "_startMoveHeader",
    "getColumnWidth",
    "capture",
    "isEditing",
    "stopEditing",
    "getRow",
    "getColumn",
    "fireEvent",
    "CellEvent",
    "_stopResizeHeader",
    "_stopMoveHeader",
    "_hideResizeLine",
    "releaseCapture",
    "fromVisXPos",
    "getFirstColumnX",
    "toVisXPos",
    "fromCol",
    "getVisibleColumnAtX",
    "toCol",
    "fromOverXPos",
    "getOverallX",
    "toOverXPos",
    "getOverallColumnCount",
    "moveColumn",
    "sortCol",
    "getSortColumnIndex",
    "ascending",
    "isSortAscending",
    "data",
    "tapEvent",
    "sortByColumn",
    "getResetSelectionOnHeaderTap",
    "getSelectionModel",
    "resetSelection",
    "getSelectBeforeFocus",
    "getSelectionManager",
    "handleTap",
    "isHidden",
    "getResetSelectionOnTapBelowRows",
    "getContextMenuFromDataCellsOnly",
    "getShowCellFocusIndicator",
    "menu",
    "getContextMenu",
    "getChildren",
    "length",
    "openAtPointer",
    "exclude",
    "preventDefault",
    "_onContextMenuOpen",
    "startEditing",
    "resizeLine",
    "getWidth",
    "paneBounds",
    "round",
    "_excludeChildControl",
    "paneLeft",
    "getContentLocation",
    "colCount",
    "getColumnCount",
    "targetXPos",
    "targetX",
    "currX",
    "xPos",
    "getColumnAtX",
    "colWidth",
    "scrollerLeft",
    "scrollerWidth",
    "lang",
    "Number",
    "limit",
    "scrollCellVisible",
    "clipperSize",
    "colLeft",
    "rowTop",
    "minScrollX",
    "maxScrollX",
    "minScrollY",
    "maxScrollY",
    "isColumnEditable",
    "getValue",
    "getCellEditorFactory",
    "cellInfo",
    "createCellEditor",
    "window",
    "Window",
    "setModal",
    "setShowClose",
    "_onCellEditorModalWindowClose",
    "f",
    "getModalCellEditorPreOpenFunction",
    "open",
    "addState",
    "setKeepActive",
    "focus",
    "activate",
    "flushEditor",
    "cancel",
    "getCellEditorValue",
    "oldValue",
    "setValue",
    "cancelEditing",
    "removeState",
    "removeListenerById",
    "destroy",
    "contentLocation",
    "regionRadius",
    "panePos",
    "floor",
    "tableY",
    "headerPos",
    "setTopRightWidget",
    "widget",
    "oldWidget",
    "remove",
    "getHeader",
    "getTablePane",
    "getNeededScrollBars",
    "forceHorizontal",
    "preventVertical",
    "verScrollBar",
    "verBarWidth",
    "horScrollBar",
    "horBarHeight",
    "getMarginTop",
    "getMarginBottom",
    "viewWidth",
    "viewHeight",
    "getHorizontalScrollBarVisible",
    "paneWidth",
    "paneHeight",
    "horNeeded",
    "verNeeded",
    "horBar",
    "verBar",
    "getPaneClipper",
    "getScrollAreaContainer",
    "_applyScrollTimeout",
    "timeout",
    "setInterval",
    "start",
    "GlobalError",
    "observeMethod",
    "_layoutPending",
    "oldFirstRow",
    "getFirstVisibleRow",
    "setFirstVisibleRow",
    "visibleRowCount",
    "ceil",
    "paneOffset",
    "firstVisibleRowComplete",
    "setVisibleRowCount",
    "scrollToY",
    "editing",
    "moveToCell",
    "destruct",
    "dispose",
    "_disposeObjects"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Jonathan Weiß (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * Shows a whole meta column. This includes a {@link Header},\n * a {@link Pane} and the needed scroll bars. This class handles the\n * virtual scrolling and does all the pointer event handling.\n *\n * @childControl header {qx.ui.table.pane.Header} header pane\n * @childControl pane {qx.ui.table.pane.Pane} table pane to show the data\n * @childControl focus-indicator {qx.ui.table.pane.FocusIndicator} shows the current focused cell\n * @childControl resize-line {qx.ui.core.Widget} resize line widget\n * @childControl scrollbar-x {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar}\n *               horizontal scrollbar widget (depends on the \"qx.nativeScrollBars\" setting which implementation is used)\n * @childControl scrollbar-y {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar}\n *               vertical scrollbar widget (depends on the \"qx.nativeScrollBars\" setting which implementation is used)\n */\nqx.Class.define(\"qx.ui.table.pane.Scroller\", {\n  extend: qx.ui.core.Widget,\n  include: [qx.ui.core.scroll.MScrollBarFactory],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param table {qx.ui.table.Table} the table the scroller belongs to.\n   */\n  construct(table) {\n    super();\n\n    this.__table = table;\n\n    // init layout\n    var grid = new qx.ui.layout.Grid();\n    grid.setColumnFlex(0, 1);\n    grid.setRowFlex(1, 1);\n    this._setLayout(grid);\n\n    // init child controls\n    this.__header = this._showChildControl(\"header\");\n    this.__tablePane = this._showChildControl(\"pane\");\n\n    // the top line containing the header clipper and the top right widget\n    this.__top = new qx.ui.container.Composite(new qx.ui.layout.HBox()).set({\n      minWidth: 0\n    });\n\n    this._add(this.__top, { row: 0, column: 0, colSpan: 2 });\n\n    // embed header into a scrollable container\n    this._headerClipper = this._createHeaderClipper();\n    this._headerClipper.add(this.__header);\n    this._headerClipper.addListener(\n      \"losecapture\",\n      this._onChangeCaptureHeader,\n      this\n    );\n\n    this._headerClipper.addListener(\n      \"pointermove\",\n      this._onPointermoveHeader,\n      this\n    );\n\n    this._headerClipper.addListener(\n      \"pointerdown\",\n      this._onPointerdownHeader,\n      this\n    );\n\n    this._headerClipper.addListener(\"pointerup\", this._onPointerupHeader, this);\n    this._headerClipper.addListener(\"tap\", this._onTapHeader, this);\n    this.__top.add(this._headerClipper, { flex: 1 });\n\n    // embed pane into a scrollable container\n    this._paneClipper = this._createPaneClipper();\n    this._paneClipper.add(this.__tablePane);\n    this._paneClipper.addListener(\"roll\", this._onRoll, this);\n    this._paneClipper.addListener(\"pointermove\", this._onPointermovePane, this);\n    this._paneClipper.addListener(\"pointerdown\", this._onPointerdownPane, this);\n    this._paneClipper.addListener(\"tap\", this._onTapPane, this);\n    this._paneClipper.addListener(\"contextmenu\", this._onTapPane, this);\n    this._paneClipper.addListener(\"contextmenu\", this._onContextMenu, this);\n    if (qx.core.Environment.get(\"device.type\") === \"desktop\") {\n      this._paneClipper.addListener(\"dblclick\", this._onDbltapPane, this);\n    } else {\n      this._paneClipper.addListener(\"dbltap\", this._onDbltapPane, this);\n    }\n    this._paneClipper.addListener(\"resize\", this._onResizePane, this);\n\n    // if we have overlayed scroll bars, we should use a separate container\n    if (qx.core.Environment.get(\"os.scrollBarOverlayed\")) {\n      this.__clipperContainer = new qx.ui.container.Composite();\n      this.__clipperContainer.setLayout(new qx.ui.layout.Canvas());\n      this.__clipperContainer.add(this._paneClipper, { edge: 0 });\n      this._add(this.__clipperContainer, { row: 1, column: 0 });\n    } else {\n      this._add(this._paneClipper, { row: 1, column: 0 });\n    }\n\n    // init scroll bars\n    this.__horScrollBar = this._showChildControl(\"scrollbar-x\");\n    this.__verScrollBar = this._showChildControl(\"scrollbar-y\");\n\n    // init focus indicator\n    this.__focusIndicator = this.getChildControl(\"focus-indicator\");\n    // need to run the apply method at least once [BUG #4057]\n    this.initShowCellFocusIndicator();\n\n    // force creation of the resize line\n    this.getChildControl(\"resize-line\").hide();\n\n    this.addListener(\"pointerout\", this._onPointerout, this);\n    this.addListener(\"appear\", this._onAppear, this);\n    this.addListener(\"disappear\", this._onDisappear, this);\n\n    this.__timer = new qx.event.Timer();\n    this.__timer.addListener(\"interval\", this._oninterval, this);\n    this.initScrollTimeout();\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** @type {int} The minimum width a column could get in pixels. */\n    MIN_COLUMN_WIDTH: 10,\n\n    /** @type {int} The radius of the resize region in pixels. */\n    RESIZE_REGION_RADIUS: 5,\n\n    /**\n     * (int) The number of pixels the pointer may move between pointer down and pointer up\n     * in order to count as a tap.\n     */\n    TAP_TOLERANCE: 5,\n\n    /**\n     * (int) The mask for the horizontal scroll bar.\n     * May be combined with {@link #VERTICAL_SCROLLBAR}.\n     *\n     * @see #getNeededScrollBars\n     */\n    HORIZONTAL_SCROLLBAR: 1,\n\n    /**\n     * (int) The mask for the vertical scroll bar.\n     * May be combined with {@link #HORIZONTAL_SCROLLBAR}.\n     *\n     * @see #getNeededScrollBars\n     */\n    VERTICAL_SCROLLBAR: 2\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Dispatched if the pane is scrolled horizontally */\n    changeScrollY: \"qx.event.type.Data\",\n\n    /** Dispatched if the pane is scrolled vertically */\n    changeScrollX: \"qx.event.type.Data\",\n\n    /**See {@link qx.ui.table.Table#cellTap}.*/\n    cellTap: \"qx.ui.table.pane.CellEvent\",\n\n    /*** See {@link qx.ui.table.Table#cellDbltap}.*/\n    cellDbltap: \"qx.ui.table.pane.CellEvent\",\n\n    /**See {@link qx.ui.table.Table#cellContextmenu}.*/\n    cellContextmenu: \"qx.ui.table.pane.CellEvent\",\n\n    /** Dispatched when a sortable header was tapped */\n    beforeSort: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * Whether to show the horizontal scroll bar. This is a tri-state\n     * value. `true` means show the scroll bar; `false` means exclude it; null\n     * means hide it so it retains its space but doesn't show a scroll bar.\n     */\n    horizontalScrollBarVisible: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyHorizontalScrollBarVisible\",\n      event: \"changeHorizontalScrollBarVisible\",\n      nullable: true\n    },\n\n    /** Whether to show the vertical scroll bar */\n    verticalScrollBarVisible: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyVerticalScrollBarVisible\",\n      event: \"changeVerticalScrollBarVisible\"\n    },\n\n    /** The table pane model. */\n    tablePaneModel: {\n      check: \"qx.ui.table.pane.Model\",\n      apply: \"_applyTablePaneModel\",\n      event: \"changeTablePaneModel\"\n    },\n\n    /**\n     * Whether column resize should be live. If false, during resize only a line is\n     * shown and the real resize happens when the user releases the pointer button.\n     */\n    liveResize: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Whether the focus should moved when the pointer is moved over a cell. If false\n     * the focus is only moved on pointer taps.\n     */\n    focusCellOnPointerMove: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Whether to handle selections via the selection manager before setting the\n     * focus.  The traditional behavior is to handle selections after setting the\n     * focus, but setting the focus means redrawing portions of the table, and\n     * some subclasses may want to modify the data to be displayed based on the\n     * selection.\n     */\n    selectBeforeFocus: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Whether the cell focus indicator should be shown\n     */\n    showCellFocusIndicator: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyShowCellFocusIndicator\"\n    },\n\n    /**\n     * By default, the \"cellContextmenu\" event is fired only when a data cell\n     * is right-clicked. It is not fired when a right-click occurs in the\n     * empty area of the table below the last data row. By turning on this\n     * property, \"cellContextMenu\" events will also be generated when a\n     * right-click occurs in that empty area. In such a case, row identifier\n     * in the event data will be null, so event handlers can check (row ===\n     * null) to handle this case.\n     */\n    contextMenuFromDataCellsOnly: {\n      check: \"Boolean\",\n      init: true\n    },\n\n    /**\n     * Whether to reset the selection when a header cell is tapped. Since\n     * most data models do not have provisions to retain a selection after\n     * sorting, the default is to reset the selection in this case. Some data\n     * models, however, do have the capability to retain the selection, so\n     * when using those, this property should be set to false.\n     */\n    resetSelectionOnHeaderTap: {\n      check: \"Boolean\",\n      init: true\n    },\n\n    /**\n     * Whether to reset the selection when the unpopulated table area is tapped.\n     * The default is false which keeps the behaviour as before\n     */\n    resetSelectionOnTapBelowRows: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Interval time (in milliseconds) for the table update timer.\n     * Setting this to 0 clears the timer.\n     */\n    scrollTimeout: {\n      check: \"Integer\",\n      init: 100,\n      apply: \"_applyScrollTimeout\"\n    },\n\n    appearance: {\n      refine: true,\n      init: \"table-scroller\"\n    },\n\n    /**\n     * If set then defines the minimum height of the focus indicator when editing\n     */\n    minCellEditHeight: {\n      check: \"Integer\",\n      init: null,\n      nullable: true\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __lastRowCount: null,\n    __table: null,\n\n    __updateInterval: null,\n    __updateContentPlanned: null,\n    __onintervalWrapper: null,\n\n    _moveColumn: null,\n    __lastMoveColPos: null,\n    _lastMoveTargetX: null,\n    _lastMoveTargetScroller: null,\n    __lastMovePointerPageX: null,\n\n    __resizeColumn: null,\n    __lastResizePointerPageX: null,\n    __lastResizeWidth: null,\n\n    __lastPointerDownCell: null,\n    __firedTapEvent: false,\n    __ignoreTap: null,\n    __lastPointerPageX: null,\n    __lastPointerPageY: null,\n\n    __focusedCol: null,\n    __focusedRow: null,\n\n    _cellEditor: null,\n    __cellEditorFactory: null,\n\n    __topRightWidget: null,\n    __horScrollBar: null,\n    __verScrollBar: null,\n    __header: null,\n    _headerClipper: null,\n    __tablePane: null,\n    _paneClipper: null,\n    __clipperContainer: null,\n    __focusIndicator: null,\n    __top: null,\n\n    __timer: null,\n\n    __focusIndicatorPointerDownListener: null,\n\n    /**\n     * The right inset of the pane. The right inset is the maximum of the\n     * top right widget width and the scrollbar width (if visible).\n     *\n     * @return {Integer} The right inset of the pane\n     */\n    getPaneInsetRight() {\n      var topRight = this.getTopRightWidget();\n      var topRightWidth =\n        topRight && topRight.isVisible() && topRight.getBounds()\n          ? topRight.getBounds().width +\n            topRight.getMarginLeft() +\n            topRight.getMarginRight()\n          : 0;\n\n      var scrollBar = this.__verScrollBar;\n      var scrollBarWidth = this.getVerticalScrollBarVisible()\n        ? this.getVerticalScrollBarWidth() +\n          scrollBar.getMarginLeft() +\n          scrollBar.getMarginRight()\n        : 0;\n\n      return Math.max(topRightWidth, scrollBarWidth);\n    },\n\n    /**\n     * Set the pane's width\n     *\n     * @param width {Integer} The pane's width\n     */\n    setPaneWidth(width) {\n      if (this.isVerticalScrollBarVisible()) {\n        width += this.getPaneInsetRight();\n      }\n      this.setWidth(width);\n    },\n\n    // overridden\n    _createChildControlImpl(id, hash) {\n      var control;\n\n      switch (id) {\n        case \"header\":\n          control = this.getTable().getNewTablePaneHeader()(this);\n          break;\n\n        case \"pane\":\n          control = this.getTable().getNewTablePane()(this);\n          break;\n\n        case \"focus-indicator\":\n          control = new qx.ui.table.pane.FocusIndicator(this);\n          control.setUserBounds(0, 0, 0, 0);\n          control.setZIndex(1000);\n          control.addListener(\n            \"pointerup\",\n            this._onPointerupFocusIndicator,\n            this\n          );\n\n          this._paneClipper.add(control);\n          control.show(); // must be active for editor to operate\n          control.setDecorator(null); // it can be initially invisible, though.\n          break;\n\n        case \"resize-line\":\n          control = new qx.ui.core.Widget();\n          control.setUserBounds(0, 0, 0, 0);\n          control.setZIndex(1000);\n          this._paneClipper.add(control);\n          break;\n\n        case \"scrollbar-x\":\n          control = this._createScrollBar(\"horizontal\").set({\n            alignY: \"bottom\"\n          });\n\n          control.addListener(\"scroll\", this._onScrollX, this);\n\n          if (this.__clipperContainer != null) {\n            control.setMinHeight(\n              qx.ui.core.scroll.AbstractScrollArea.DEFAULT_SCROLLBAR_WIDTH\n            );\n\n            this.__clipperContainer.add(control, {\n              bottom: 0,\n              right: 0,\n              left: 0\n            });\n          } else {\n            this._add(control, { row: 2, column: 0 });\n          }\n          break;\n\n        case \"scrollbar-y\":\n          control = this._createScrollBar(\"vertical\");\n          control.addListener(\"scroll\", this._onScrollY, this);\n\n          if (this.__clipperContainer != null) {\n            this.__clipperContainer.add(control, {\n              right: 0,\n              bottom: 0,\n              top: 0\n            });\n          } else {\n            this._add(control, { row: 1, column: 1 });\n          }\n          break;\n      }\n\n      return control || super._createChildControlImpl(id);\n    },\n\n    // property modifier\n    _applyHorizontalScrollBarVisible(value, old) {\n      if (value === null) {\n        this.__horScrollBar.setVisibility(\"hidden\");\n      } else {\n        this.__horScrollBar.setVisibility(value ? \"visible\" : \"excluded\");\n      }\n    },\n\n    // property modifier\n    _applyVerticalScrollBarVisible(value, old) {\n      this.__verScrollBar.setVisibility(value ? \"visible\" : \"excluded\");\n    },\n\n    // property modifier\n    _applyTablePaneModel(value, old) {\n      if (old != null) {\n        old.removeListener(\"modelChanged\", this._onPaneModelChanged, this);\n      }\n\n      value.addListener(\"modelChanged\", this._onPaneModelChanged, this);\n    },\n\n    // property modifier\n    _applyShowCellFocusIndicator(value, old) {\n      if (value) {\n        this.__focusIndicator.setDecorator(\"table-scroller-focus-indicator\");\n        this._updateFocusIndicator();\n      } else {\n        if (this.__focusIndicator) {\n          this.__focusIndicator.setDecorator(null);\n        }\n      }\n    },\n\n    /**\n     * Get the current position of the vertical scroll bar.\n     *\n     * @return {Integer} The current scroll position.\n     */\n    getScrollY() {\n      return this.__verScrollBar.getPosition();\n    },\n\n    /**\n     * Set the current position of the vertical scroll bar.\n     *\n     * @param scrollY {Integer} The new scroll position.\n     * @param renderSync {Boolean?false} Whether the table update should be\n     *     performed synchronously.\n     */\n    setScrollY(scrollY, renderSync) {\n      this.__verScrollBar.scrollTo(scrollY);\n      if (renderSync) {\n        this._updateContent();\n      }\n    },\n\n    /**\n     * Get the current position of the vertical scroll bar.\n     *\n     * @return {Integer} The current scroll position.\n     */\n    getScrollX() {\n      return this.__horScrollBar.getPosition();\n    },\n\n    /**\n     * Set the current position of the vertical scroll bar.\n     *\n     * @param scrollX {Integer} The new scroll position.\n     */\n    setScrollX(scrollX) {\n      this.__horScrollBar.scrollTo(scrollX);\n    },\n\n    /**\n     * Returns the table this scroller belongs to.\n     *\n     * @return {qx.ui.table.Table} the table.\n     */\n    getTable() {\n      return this.__table;\n    },\n\n    /**\n     * Creates and returns an instance of pane clipper.\n     *\n     * @return {qx.ui.table.pane.Clipper} pane clipper.\n     */\n    _createPaneClipper() {\n      return new qx.ui.table.pane.Clipper();\n    },\n\n    /**\n     * Creates and returns an instance of header clipper.\n     *\n     * @return {qx.ui.table.pane.Clipper} pane clipper.\n     */\n    _createHeaderClipper() {\n      return new qx.ui.table.pane.Clipper();\n    },\n\n    /**\n     * Event handler. Called when the visibility of a column has changed.\n     */\n    onColVisibilityChanged() {\n      this.updateHorScrollBarMaximum();\n      this._updateFocusIndicator();\n    },\n\n    /**\n     * Sets the column width.\n     *\n     * @param col {Integer} the column to change the width for.\n     * @param width {Integer} the new width.\n     */\n    setColumnWidth(col, width) {\n      this.__header.setColumnWidth(col, width);\n      this.__tablePane.setColumnWidth(col, width);\n\n      var paneModel = this.getTablePaneModel();\n      var x = paneModel.getX(col);\n\n      if (x != -1) {\n        // The change was in this scroller\n        this.updateHorScrollBarMaximum();\n        this._updateFocusIndicator();\n      }\n    },\n\n    /**\n     * Event handler. Called when the column order has changed.\n     *\n     */\n    onColOrderChanged() {\n      this.__header.onColOrderChanged();\n      this.__tablePane.onColOrderChanged();\n\n      this.updateHorScrollBarMaximum();\n    },\n\n    /**\n     * Event handler. Called when the table model has changed.\n     *\n     * @param firstRow {Integer} The index of the first row that has changed.\n     * @param lastRow {Integer} The index of the last row that has changed.\n     * @param firstColumn {Integer} The model index of the first column that has changed.\n     * @param lastColumn {Integer} The model index of the last column that has changed.\n     */\n    onTableModelDataChanged(firstRow, lastRow, firstColumn, lastColumn) {\n      this.__tablePane.onTableModelDataChanged(\n        firstRow,\n        lastRow,\n        firstColumn,\n        lastColumn\n      );\n\n      var rowCount = this.getTable().getTableModel().getRowCount();\n\n      if (rowCount != this.__lastRowCount) {\n        this.updateVerScrollBarMaximum();\n\n        const focusedRow = this.getFocusedRow();\n        if (focusedRow !== null && focusedRow >= rowCount) {\n          if (rowCount == 0) {\n            this.setFocusedCell(null, null);\n          } else {\n            this.setFocusedCell(this.getFocusedColumn(), rowCount - 1);\n          }\n        }\n        this.__lastRowCount = rowCount;\n      }\n    },\n\n    /**\n     * Event handler. Called when the selection has changed.\n     */\n    onSelectionChanged() {\n      this.__tablePane.onSelectionChanged();\n    },\n\n    /**\n     * Event handler. Called when the table gets or looses the focus.\n     */\n    onFocusChanged() {\n      this.__tablePane.onFocusChanged();\n    },\n\n    /**\n     * Event handler. Called when the table model meta data has changed.\n     *\n     */\n    onTableModelMetaDataChanged() {\n      this.__header.onTableModelMetaDataChanged();\n      this.__tablePane.onTableModelMetaDataChanged();\n    },\n\n    /**\n     * Event handler. Called when the pane model has changed.\n     */\n    _onPaneModelChanged() {\n      this.__header.onPaneModelChanged();\n      this.__tablePane.onPaneModelChanged();\n    },\n\n    /**\n     * Event listener for the pane clipper's resize event\n     */\n    _onResizePane() {\n      this.updateHorScrollBarMaximum();\n      this.updateVerScrollBarMaximum();\n\n      // The height has changed -> Update content\n      this._updateContent();\n      this.__header._updateContent();\n      this.__table._updateScrollBarVisibility();\n    },\n\n    /**\n     * Updates the maximum of the horizontal scroll bar, so it corresponds to the\n     * total width of the columns in the table pane.\n     */\n    updateHorScrollBarMaximum() {\n      var paneSize = this._paneClipper.getInnerSize();\n      if (!paneSize) {\n        // will be called on the next resize event again\n        return;\n      }\n      var scrollSize = this.getTablePaneModel().getTotalWidth();\n\n      var scrollBar = this.__horScrollBar;\n\n      if (paneSize.width < scrollSize) {\n        var max = Math.max(0, scrollSize - paneSize.width);\n\n        scrollBar.setMaximum(max);\n        scrollBar.setKnobFactor(paneSize.width / scrollSize);\n\n        var pos = scrollBar.getPosition();\n        scrollBar.setPosition(Math.min(pos, max));\n      } else {\n        scrollBar.setMaximum(0);\n        scrollBar.setKnobFactor(1);\n        scrollBar.setPosition(0);\n      }\n    },\n\n    /**\n     * Updates the maximum of the vertical scroll bar, so it corresponds to the\n     * number of rows in the table.\n     */\n    updateVerScrollBarMaximum() {\n      var paneSize = this._paneClipper.getInnerSize();\n      if (!paneSize) {\n        // will be called on the next resize event again\n        return;\n      }\n\n      var tableModel = this.getTable().getTableModel();\n      var rowCount = tableModel.getRowCount();\n\n      if (this.getTable().getKeepFirstVisibleRowComplete()) {\n        rowCount += 1;\n      }\n\n      var rowHeight = this.getTable().getRowHeight();\n      var scrollSize = rowCount * rowHeight;\n      var scrollBar = this.__verScrollBar;\n\n      if (paneSize.height < scrollSize) {\n        var max = Math.max(0, scrollSize - paneSize.height);\n\n        scrollBar.setMaximum(max);\n        scrollBar.setKnobFactor(paneSize.height / scrollSize);\n\n        var pos = scrollBar.getPosition();\n        scrollBar.setPosition(Math.min(pos, max));\n      } else {\n        scrollBar.setMaximum(0);\n        scrollBar.setKnobFactor(1);\n        scrollBar.setPosition(0);\n      }\n    },\n\n    /**\n     * Event handler. Called when the table property \"keepFirstVisibleRowComplete\"\n     * changed.\n     */\n    onKeepFirstVisibleRowCompleteChanged() {\n      this.updateVerScrollBarMaximum();\n      this._updateContent();\n    },\n\n    /**\n     * Event handler for the scroller's appear event\n     */\n    _onAppear() {\n      // after the Scroller appears we start the interval again\n      this._startInterval(this.getScrollTimeout());\n    },\n\n    /**\n     * Event handler for the disappear event\n     */\n    _onDisappear() {\n      // before the scroller disappears we need to stop it\n      this._stopInterval();\n    },\n\n    /**\n     * Event handler. Called when the horizontal scroll bar moved.\n     *\n     * @param e {Map} the event.\n     */\n    _onScrollX(e) {\n      var scrollLeft = e.getData();\n\n      this.fireDataEvent(\"changeScrollX\", scrollLeft, e.getOldData());\n      this._headerClipper.scrollToX(scrollLeft);\n      this._paneClipper.scrollToX(scrollLeft);\n    },\n\n    /**\n     * Event handler. Called when the vertical scroll bar moved.\n     *\n     * @param e {Map} the event.\n     */\n    __inOnScrollY: false,\n    _onScrollY(e) {\n      if (this.__inOnScrollY) {\n        return;\n      }\n      var scrollbar = this.__verScrollBar;\n      this.__inOnScrollY = true;\n      // calculate delta so that one row is scrolled at an minimum\n      var rowHeight = this.getTable().getRowHeight();\n      var delta = e.getData() - e.getOldData();\n      if (Math.abs(delta) > 1 && Math.abs(delta) < rowHeight) {\n        delta =\n          delta < 0 ? e.getOldData() - rowHeight : e.getOldData() + rowHeight;\n        if (delta >= 0 && delta <= scrollbar.getMaximum()) {\n          scrollbar.setPosition(delta);\n        }\n      }\n      this.__inOnScrollY = false;\n      this.fireDataEvent(\n        \"changeScrollY\",\n        scrollbar.getPosition(),\n        e.getOldData()\n      );\n\n      this._postponedUpdateContent();\n    },\n\n    /**\n     * Event handler. Called when the user moved the mouse wheel.\n     *\n     * @param e {qx.event.type.Roll} the event.\n     */\n    _onRoll(e) {\n      var table = this.getTable();\n\n      if (e.getPointerType() == \"mouse\" || !table.getEnabled()) {\n        return;\n      }\n\n      // vertical scrolling\n      var delta = e.getDelta();\n      // normalize that at least one step is scrolled at a time\n      if (delta.y > 0 && delta.y < 1) {\n        delta.y = 1;\n      } else if (delta.y < 0 && delta.y > -1) {\n        delta.y = -1;\n      }\n      this.__verScrollBar.scrollBy(parseInt(delta.y, 10));\n\n      var scrolled =\n        delta.y != 0 && !this.__isAtEdge(this.__verScrollBar, delta.y);\n\n      // horizontal scrolling\n      // normalize that at least one step is scrolled at a time\n      if (delta.x > 0 && delta.x < 1) {\n        delta.x = 1;\n      } else if (delta.x < 0 && delta.x > -1) {\n        delta.x = -1;\n      }\n      this.__horScrollBar.scrollBy(parseInt(delta.x, 10));\n\n      // Update the focus\n      if (this.__lastPointerPageX && this.getFocusCellOnPointerMove()) {\n        this._focusCellAtPagePos(\n          this.__lastPointerPageX,\n          this.__lastPointerPageY\n        );\n      }\n\n      scrolled =\n        scrolled ||\n        (delta.x != 0 && !this.__isAtEdge(this.__horScrollBar, delta.x));\n\n      // pass the event to the parent if the scrollbar is at an edge\n      if (scrolled) {\n        e.stop();\n      } else {\n        e.stopMomentum();\n      }\n    },\n\n    /**\n     * Checks if the table has been scrolled.\n     * @param scrollBar {qx.ui.core.scroll.IScrollBar} The scrollbar to check\n     * @param delta {Number} The scroll delta.\n     * @return {Boolean} <code>true</code>, if the scrolling is a the edge\n     */\n    __isAtEdge(scrollBar, delta) {\n      var position = scrollBar.getPosition();\n      return (\n        (delta < 0 && position <= 0) ||\n        (delta > 0 && position >= scrollBar.getMaximum())\n      );\n    },\n\n    /**\n     * Common column resize logic.\n     *\n     * @param pageX {Integer} the current pointer x position.\n     */\n    __handleResizeColumn(pageX) {\n      var table = this.getTable();\n      // We are currently resizing -> Update the position\n      var headerCell = this.__header.getHeaderWidgetAtColumn(\n        this.__resizeColumn\n      );\n\n      var minColumnWidth = headerCell.getSizeHint().minWidth;\n\n      var newWidth = Math.max(\n        minColumnWidth,\n        this.__lastResizeWidth + pageX - this.__lastResizePointerPageX\n      );\n\n      if (this.getLiveResize()) {\n        var columnModel = table.getTableColumnModel();\n        columnModel.setColumnWidth(this.__resizeColumn, newWidth, true);\n      } else {\n        var paneModel = this.getTablePaneModel();\n        this._showResizeLine(\n          paneModel.getColumnLeft(this.__resizeColumn) + newWidth\n        );\n      }\n\n      this.__lastResizePointerPageX += newWidth - this.__lastResizeWidth;\n      this.__lastResizeWidth = newWidth;\n    },\n\n    /**\n     * Common column move logic.\n     *\n     * @param pageX {Integer} the current pointer x position.\n     *\n     */\n    __handleMoveColumn(pageX) {\n      // We are moving a column\n\n      // Check whether we moved outside the tap tolerance so we can start\n      // showing the column move feedback\n      // (showing the column move feedback prevents the ontap event)\n      var tapTolerance = qx.ui.table.pane.Scroller.TAP_TOLERANCE;\n      if (\n        this.__header.isShowingColumnMoveFeedback() ||\n        pageX > this.__lastMovePointerPageX + tapTolerance ||\n        pageX < this.__lastMovePointerPageX - tapTolerance\n      ) {\n        this.__lastMoveColPos += pageX - this.__lastMovePointerPageX;\n\n        this.__header.showColumnMoveFeedback(\n          this._moveColumn,\n          this.__lastMoveColPos\n        );\n\n        // Get the responsible scroller\n        var targetScroller = this.__table.getTablePaneScrollerAtPageX(pageX);\n        if (\n          this._lastMoveTargetScroller &&\n          this._lastMoveTargetScroller != targetScroller\n        ) {\n          this._lastMoveTargetScroller.hideColumnMoveFeedback();\n        }\n        if (targetScroller != null) {\n          this._lastMoveTargetX = targetScroller.showColumnMoveFeedback(pageX);\n        } else {\n          this._lastMoveTargetX = null;\n        }\n\n        this._lastMoveTargetScroller = targetScroller;\n        this.__lastMovePointerPageX = pageX;\n      }\n    },\n\n    /**\n     * Event handler. Called when the user moved the pointer over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointermoveHeader(e) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      var useResizeCursor = false;\n      var pointerOverColumn = null;\n\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n\n      // Workaround: In onmousewheel the event has wrong coordinates for pageX\n      //       and pageY. So we remember the last move event.\n      this.__lastPointerPageX = pageX;\n      this.__lastPointerPageY = pageY;\n\n      if (this.__resizeColumn != null) {\n        // We are currently resizing -> Update the position\n        this.__handleResizeColumn(pageX);\n        useResizeCursor = true;\n        e.stopPropagation();\n      } else if (this._moveColumn != null) {\n        // We are moving a column\n        this.__handleMoveColumn(pageX);\n        e.stopPropagation();\n      } else {\n        var resizeCol = this._getResizeColumnForPageX(pageX);\n        if (resizeCol != -1) {\n          // The pointer is over a resize region -> Show the right cursor\n          useResizeCursor = true;\n        } else {\n          var tableModel = table.getTableModel();\n          var col = this._getColumnForPageX(pageX);\n          if (col != null && tableModel.isColumnSortable(col)) {\n            pointerOverColumn = col;\n          }\n        }\n      }\n\n      var cursor = useResizeCursor ? \"col-resize\" : null;\n      this.getApplicationRoot().setGlobalCursor(cursor);\n      this.setCursor(cursor);\n      this.__header.setPointerOverColumn(pointerOverColumn);\n    },\n\n    /**\n     * Event handler. Called when the user moved the pointer over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointermovePane(e) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      //var useResizeCursor = false;\n\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n\n      // Workaround: In onpointerwheel the event has wrong coordinates for pageX\n      //       and pageY. So we remember the last move event.\n      this.__lastPointerPageX = pageX;\n      this.__lastPointerPageY = pageY;\n\n      var useResizeCursor = false;\n      var resizeCol = this._getResizeColumnForPageX(pageX);\n      if (resizeCol != -1) {\n        // The pointer is over a resize region -> Show the right cursor\n        useResizeCursor = true;\n      }\n      var cursor = useResizeCursor ? \"col-resize\" : null;\n      this.getApplicationRoot().setGlobalCursor(cursor);\n      this.setCursor(cursor);\n\n      var row = this._getRowForPagePos(pageX, pageY);\n      if (row != null && this._getColumnForPageX(pageX) != null) {\n        // The pointer is over the data -> update the focus\n        if (this.getFocusCellOnPointerMove()) {\n          this._focusCellAtPagePos(pageX, pageY);\n        }\n      }\n      this.__header.setPointerOverColumn(null);\n    },\n\n    /**\n     * Event handler. Called when the user pressed a pointer button over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerdownHeader(e) {\n      if (!this.getTable().getEnabled()) {\n        return;\n      }\n\n      var pageX = e.getDocumentLeft();\n\n      // pointer is in header\n      var resizeCol = this._getResizeColumnForPageX(pageX);\n      if (resizeCol != -1) {\n        // The pointer is over a resize region -> Start resizing\n        this._startResizeHeader(resizeCol, pageX);\n        e.stop();\n      } else {\n        // The pointer is not in a resize region\n        var moveCol = this._getColumnForPageX(pageX);\n        if (moveCol != null) {\n          this._startMoveHeader(moveCol, pageX);\n          e.stop();\n        }\n      }\n    },\n\n    /**\n     * Start a resize session of the header.\n     *\n     * @param resizeCol {Integer} the column index\n     * @param pageX {Integer} x coordinate of the pointer event\n     */\n    _startResizeHeader(resizeCol, pageX) {\n      var columnModel = this.getTable().getTableColumnModel();\n\n      // The pointer is over a resize region -> Start resizing\n      this.__resizeColumn = resizeCol;\n      this.__lastResizePointerPageX = pageX;\n      this.__lastResizeWidth = columnModel.getColumnWidth(this.__resizeColumn);\n      this._headerClipper.capture();\n    },\n\n    /**\n     * Start a move session of the header.\n     *\n     * @param moveCol {Integer} the column index\n     * @param pageX {Integer} x coordinate of the pointer event\n     */\n    _startMoveHeader(moveCol, pageX) {\n      // Prepare column moving\n      this._moveColumn = moveCol;\n      this.__lastMovePointerPageX = pageX;\n      this.__lastMoveColPos = this.getTablePaneModel().getColumnLeft(moveCol);\n      this._headerClipper.capture();\n    },\n\n    /**\n     * Event handler. Called when the user pressed a pointer button over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerdownPane(e) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      if (table.isEditing()) {\n        table.stopEditing();\n      }\n\n      var pageX = e.getDocumentLeft();\n\n      // pointer is in header\n      var resizeCol = this._getResizeColumnForPageX(pageX);\n      if (resizeCol != -1) {\n        // The pointer is over a resize region -> Start resizing\n        this._startResizeHeader(resizeCol, pageX);\n        e.stop();\n        return;\n      }\n\n      var pageY = e.getDocumentTop();\n      var row = this._getRowForPagePos(pageX, pageY);\n      var col = this._getColumnForPageX(pageX);\n\n      if (row !== null) {\n        // The focus indicator blocks the tap event on the scroller so we\n        // store the current cell and listen for the pointerup event on the\n        // focus indicator\n        //\n        // INVARIANT:\n        //  The members of this object always contain the last position of\n        //  the cell on which the pointerdown event occurred.\n        //  *** These values are never cleared! ***.\n        //  Different browsers/OS combinations issue events in different\n        //  orders, and the context menu event, in particular, can be issued\n        //  early or late (Firefox on Linux issues it early; Firefox on\n        //  Windows issues it late) so no one may clear these values.\n        //\n        this.__lastPointerDownCell = {\n          row: row,\n          col: col\n        };\n\n        // On the other hand, we need to know if we've issued the tap event\n        // so we don't issue it twice, both from pointer-up on the focus\n        // indicator, and from the tap even on the pane. Both possibilities\n        // are necessary, however, to maintain the qooxdoo order of events.\n        this.__firedTapEvent = false;\n      }\n    },\n\n    /**\n     * Event handler for the focus indicator's pointerup event\n     *\n     * @param e {qx.event.type.Pointer} The pointer event\n     */\n    _onPointerupFocusIndicator(e) {\n      if (\n        this.__lastPointerDownCell &&\n        !this.__firedTapEvent &&\n        !this.isEditing() &&\n        this.__focusIndicator.getRow() == this.__lastPointerDownCell.row &&\n        this.__focusIndicator.getColumn() == this.__lastPointerDownCell.col\n      ) {\n        this.fireEvent(\n          \"cellTap\",\n          qx.ui.table.pane.CellEvent,\n          [\n            this,\n            e,\n            this.__lastPointerDownCell.row,\n            this.__lastPointerDownCell.col\n          ],\n\n          true\n        );\n\n        this.__firedTapEvent = true;\n      } else if (!this.isEditing()) {\n        // if no cellTap event should be fired, act like a pointerdown which\n        // invokes the change of the selection e.g. [BUG #1632]\n        this._onPointerdownPane(e);\n      }\n    },\n\n    /**\n     * Event handler. Called when the event capturing of the header changed.\n     * Stops/finishes an active header resize/move session if it lost capturing\n     * during the session to stay in a stable state.\n     *\n     * @param e {qx.event.type.Data} The data event\n     */\n    _onChangeCaptureHeader(e) {\n      if (this.__resizeColumn != null) {\n        this._stopResizeHeader();\n      }\n\n      if (this._moveColumn != null) {\n        this._stopMoveHeader();\n      }\n    },\n\n    /**\n     * Stop a resize session of the header.\n     *\n     */\n    _stopResizeHeader() {\n      var columnModel = this.getTable().getTableColumnModel();\n\n      // We are currently resizing -> Finish resizing\n      if (!this.getLiveResize()) {\n        this._hideResizeLine();\n        columnModel.setColumnWidth(\n          this.__resizeColumn,\n          this.__lastResizeWidth,\n          true\n        );\n      }\n\n      this.__resizeColumn = null;\n      this._headerClipper.releaseCapture();\n\n      this.getApplicationRoot().setGlobalCursor(null);\n      this.setCursor(null);\n    },\n\n    /**\n     * Stop a move session of the header.\n     *\n     */\n    _stopMoveHeader() {\n      var columnModel = this.getTable().getTableColumnModel();\n      var paneModel = this.getTablePaneModel();\n\n      // We are moving a column -> Drop the column\n      this.__header.hideColumnMoveFeedback();\n      if (this._lastMoveTargetScroller) {\n        this._lastMoveTargetScroller.hideColumnMoveFeedback();\n      }\n\n      if (this._lastMoveTargetX != null) {\n        var fromVisXPos =\n          paneModel.getFirstColumnX() + paneModel.getX(this._moveColumn);\n        var toVisXPos = this._lastMoveTargetX;\n        if (toVisXPos != fromVisXPos && toVisXPos != fromVisXPos + 1) {\n          // The column was really moved to another position\n          // (and not moved before or after itself, which is a noop)\n\n          // Translate visible positions to overall positions\n          var fromCol = columnModel.getVisibleColumnAtX(fromVisXPos);\n          var toCol = columnModel.getVisibleColumnAtX(toVisXPos);\n          var fromOverXPos = columnModel.getOverallX(fromCol);\n          var toOverXPos =\n            toCol != null\n              ? columnModel.getOverallX(toCol)\n              : columnModel.getOverallColumnCount();\n\n          if (toOverXPos > fromOverXPos) {\n            // Don't count the column itself\n            toOverXPos--;\n          }\n\n          // Move the column\n          columnModel.moveColumn(fromOverXPos, toOverXPos);\n\n          // update the focus indicator including the editor\n          this._updateFocusIndicator();\n        }\n      }\n\n      this._moveColumn = null;\n      this._lastMoveTargetX = null;\n      this._headerClipper.releaseCapture();\n    },\n\n    /**\n     * Event handler. Called when the user released a pointer button over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerupHeader(e) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      if (this.__resizeColumn != null) {\n        this._stopResizeHeader();\n        this.__ignoreTap = true;\n        e.stop();\n      } else if (this._moveColumn != null) {\n        this._stopMoveHeader();\n        e.stop();\n      }\n    },\n\n    /**\n     * Event handler. Called when the user tapped a pointer button over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onTapHeader(e) {\n      if (this.__ignoreTap) {\n        this.__ignoreTap = false;\n        return;\n      }\n\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      var tableModel = table.getTableModel();\n\n      var pageX = e.getDocumentLeft();\n\n      var resizeCol = this._getResizeColumnForPageX(pageX);\n\n      if (resizeCol == -1) {\n        // pointer is not in a resize region\n        var col = this._getColumnForPageX(pageX);\n\n        if (col != null && tableModel.isColumnSortable(col)) {\n          // Sort that column\n          var sortCol = tableModel.getSortColumnIndex();\n          var ascending = col != sortCol ? true : !tableModel.isSortAscending();\n\n          var data = {\n            column: col,\n            ascending: ascending,\n            tapEvent: e\n          };\n\n          if (this.fireDataEvent(\"beforeSort\", data, null, true)) {\n            // Stop cell editing\n            if (table.isEditing()) {\n              table.stopEditing();\n            }\n\n            tableModel.sortByColumn(col, ascending);\n            if (this.getResetSelectionOnHeaderTap()) {\n              table.getSelectionModel().resetSelection();\n            }\n          }\n        }\n      }\n\n      e.stop();\n    },\n\n    /**\n     * Event handler. Called when the user tapped a pointer button over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onTapPane(e) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n      var row = this._getRowForPagePos(pageX, pageY);\n      var col = this._getColumnForPageX(pageX);\n\n      if (row != null && col != null) {\n        var selectBeforeFocus = this.getSelectBeforeFocus();\n\n        if (selectBeforeFocus) {\n          table.getSelectionManager().handleTap(row, e);\n        }\n\n        // The pointer is over the data -> update the focus\n        if (!this.getFocusCellOnPointerMove()) {\n          this._focusCellAtPagePos(pageX, pageY);\n        }\n\n        if (!selectBeforeFocus) {\n          table.getSelectionManager().handleTap(row, e);\n        }\n\n        if (\n          this.__focusIndicator.isHidden() ||\n          (this.__lastPointerDownCell &&\n            !this.__firedTapEvent &&\n            !this.isEditing() &&\n            row == this.__lastPointerDownCell.row &&\n            col == this.__lastPointerDownCell.col)\n        ) {\n          this.fireEvent(\n            \"cellTap\",\n            qx.ui.table.pane.CellEvent,\n            [this, e, row, col],\n            true\n          );\n\n          this.__firedTapEvent = true;\n        }\n      } else {\n        if (row == null && this.getResetSelectionOnTapBelowRows()) {\n          table.getSelectionModel().resetSelection();\n        }\n      }\n    },\n\n    /**\n     * Event handler. Called when a context menu is invoked in a cell.\n     *\n     * @param e {qx.event.type.Pointer} the event.\n     */\n    _onContextMenu(e) {\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n      var row = this._getRowForPagePos(pageX, pageY);\n      var col = this._getColumnForPageX(pageX);\n\n      /*\n       * The 'row' value will be null if the right-click was in the blank\n       * area below the last data row. Some applications desire to receive\n       * the context menu event anyway, and can set the property value of\n       * contextMenuFromDataCellsOnly to false to achieve that.\n       */\n      if (row === null && this.getContextMenuFromDataCellsOnly()) {\n        return;\n      }\n\n      if (\n        !this.getShowCellFocusIndicator() ||\n        row === null ||\n        (this.__lastPointerDownCell &&\n          row == this.__lastPointerDownCell.row &&\n          col == this.__lastPointerDownCell.col)\n      ) {\n        this.fireEvent(\n          \"cellContextmenu\",\n          qx.ui.table.pane.CellEvent,\n          [this, e, row, col],\n          true\n        );\n\n        // Now that the cellContextmenu handler has had a chance to build\n        // the menu for this cell, display it (if there is one).\n        var menu = this.getTable().getContextMenu();\n        if (menu) {\n          // A menu with no children means don't display any context menu\n          // including the default context menu even if the default context\n          // menu is allowed to be displayed normally. There's no need to\n          // actually show an empty menu, though.\n          if (menu.getChildren().length > 0) {\n            menu.openAtPointer(e);\n          } else {\n            menu.exclude();\n          }\n\n          // Do not show native menu\n          e.preventDefault();\n        }\n      }\n    },\n\n    // overridden\n    _onContextMenuOpen(e) {\n      // This is Widget's context menu handler which typically retrieves\n      // and displays the menu as soon as it receives a \"contextmenu\" event.\n      // We want to allow the cellContextmenu handler to create the menu,\n      // so we'll override this method with a null one, and do the menu\n      // placement and display handling in our _onContextMenu method.\n    },\n\n    /**\n     * Event handler. Called when the user double tapped a pointer button over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onDbltapPane(e) {\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n      var col = this._getColumnForPageX(pageX);\n\n      if (col !== null) {\n        this._focusCellAtPagePos(pageX, pageY);\n        this.startEditing();\n\n        var row = this._getRowForPagePos(pageX, pageY);\n        if (row != -1 && row != null) {\n          this.fireEvent(\n            \"cellDbltap\",\n            qx.ui.table.pane.CellEvent,\n            [this, e, row],\n            true\n          );\n        }\n      }\n    },\n\n    /**\n     * Event handler. Called when the pointer moved out.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerout(e) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      // Reset the resize cursor when the pointer leaves the header\n      // If currently a column is resized then do nothing\n      // (the cursor will be reset on pointerup)\n      if (this.__resizeColumn == null) {\n        this.setCursor(null);\n        this.getApplicationRoot().setGlobalCursor(null);\n      }\n\n      this.__header.setPointerOverColumn(null);\n\n      // in case the focus follows the pointer, it should be remove on pointerout\n      if (this.getFocusCellOnPointerMove()) {\n        this.__table.setFocusedCell();\n      }\n    },\n\n    /**\n     * Shows the resize line.\n     *\n     * @param x {Integer} the position where to show the line (in pixels, relative to\n     *      the left side of the pane).\n     */\n    _showResizeLine(x) {\n      var resizeLine = this._showChildControl(\"resize-line\");\n\n      var width = resizeLine.getWidth();\n      var paneBounds = this._paneClipper.getBounds();\n      resizeLine.setUserBounds(\n        x - Math.round(width / 2),\n        0,\n        width,\n        paneBounds.height\n      );\n    },\n\n    /**\n     * Hides the resize line.\n     */\n    _hideResizeLine() {\n      this._excludeChildControl(\"resize-line\");\n    },\n\n    /**\n     * Shows the feedback shown while a column is moved by the user.\n     *\n     * @param pageX {Integer} the x position of the pointer in the page (in pixels).\n     * @return {Integer} the visible x position of the column in the whole table.\n     */\n    showColumnMoveFeedback(pageX) {\n      var paneModel = this.getTablePaneModel();\n      var columnModel = this.getTable().getTableColumnModel();\n      var paneLeft = this.__tablePane.getContentLocation().left;\n      var colCount = paneModel.getColumnCount();\n\n      var targetXPos = 0;\n      var targetX = 0;\n      var currX = paneLeft;\n\n      for (var xPos = 0; xPos < colCount; xPos++) {\n        var col = paneModel.getColumnAtX(xPos);\n        var colWidth = columnModel.getColumnWidth(col);\n\n        if (pageX < currX + colWidth / 2) {\n          break;\n        }\n\n        currX += colWidth;\n        targetXPos = xPos + 1;\n        targetX = currX - paneLeft;\n      }\n\n      // Ensure targetX is visible\n      var scrollerLeft = this._paneClipper.getContentLocation().left;\n      var scrollerWidth = this._paneClipper.getBounds().width;\n      var scrollX = scrollerLeft - paneLeft;\n\n      // NOTE: +2/-1 because of feedback width\n      targetX = qx.lang.Number.limit(\n        targetX,\n        scrollX + 2,\n        scrollX + scrollerWidth - 1\n      );\n\n      this._showResizeLine(targetX);\n\n      // Return the overall target x position\n      return paneModel.getFirstColumnX() + targetXPos;\n    },\n\n    /**\n     * Hides the feedback shown while a column is moved by the user.\n     */\n    hideColumnMoveFeedback() {\n      this._hideResizeLine();\n    },\n\n    /**\n     * Sets the focus to the cell that's located at the page position\n     * <code>pageX</code>/<code>pageY</code>. If there is no cell at that position,\n     * nothing happens.\n     *\n     * @param pageX {Integer} the x position in the page (in pixels).\n     * @param pageY {Integer} the y position in the page (in pixels).\n     */\n    _focusCellAtPagePos(pageX, pageY) {\n      var row = this._getRowForPagePos(pageX, pageY);\n\n      if (row != -1 && row != null) {\n        // The pointer is over the data -> update the focus\n        var col = this._getColumnForPageX(pageX);\n        this.__table.setFocusedCell(col, row);\n      }\n    },\n\n    /**\n     * Sets the currently focused cell.\n     *\n     * @param col {Integer} the model index of the focused cell's column.\n     * @param row {Integer} the model index of the focused cell's row.\n     */\n    setFocusedCell(col, row) {\n      if (!this.isEditing()) {\n        this.__tablePane.setFocusedCell(col, row, this.__updateContentPlanned);\n\n        this.__focusedCol = col;\n        this.__focusedRow = row;\n\n        this._updateFocusIndicator();\n      }\n    },\n\n    /**\n     * Returns the column of currently focused cell.\n     *\n     * @return {Integer} the model index of the focused cell's column.\n     */\n    getFocusedColumn() {\n      return this.__focusedCol;\n    },\n\n    /**\n     * Returns the row of currently focused cell.\n     *\n     * @return {Integer} the model index of the focused cell's column.\n     */\n    getFocusedRow() {\n      return this.__focusedRow;\n    },\n\n    /**\n     * Scrolls a cell visible.\n     *\n     * @param col {Integer} the model index of the column the cell belongs to.\n     * @param row {Integer} the model index of the row the cell belongs to.\n     */\n    scrollCellVisible(col, row) {\n      var paneModel = this.getTablePaneModel();\n      var xPos = paneModel.getX(col);\n\n      if (xPos != -1) {\n        var clipperSize = this._paneClipper.getInnerSize();\n        if (!clipperSize) {\n          return;\n        }\n\n        var columnModel = this.getTable().getTableColumnModel();\n\n        var colLeft = paneModel.getColumnLeft(col);\n        var colWidth = columnModel.getColumnWidth(col);\n        var rowHeight = this.getTable().getRowHeight();\n        var rowTop = row * rowHeight;\n\n        var scrollX = this.getScrollX();\n        var scrollY = this.getScrollY();\n\n        // NOTE: We don't use qx.lang.Number.limit, because min should win if max < min\n        var minScrollX = Math.min(\n          colLeft,\n          colLeft + colWidth - clipperSize.width\n        );\n\n        var maxScrollX = colLeft;\n        this.setScrollX(Math.max(minScrollX, Math.min(maxScrollX, scrollX)));\n\n        var minScrollY = rowTop + rowHeight - clipperSize.height;\n\n        if (this.getTable().getKeepFirstVisibleRowComplete()) {\n          minScrollY += rowHeight;\n        }\n\n        var maxScrollY = rowTop;\n        this.setScrollY(\n          Math.max(minScrollY, Math.min(maxScrollY, scrollY)),\n          true\n        );\n      }\n    },\n\n    /**\n     * Returns whether currently a cell is editing.\n     *\n     * @return {var} whether currently a cell is editing.\n     */\n    isEditing() {\n      return this._cellEditor != null;\n    },\n\n    /**\n     * Starts editing the currently focused cell. Does nothing if already\n     * editing, if the column is not editable, or if the cell editor for the\n     * column ascertains that the particular cell is not editable.\n     *\n     * @return {Boolean} whether editing was started\n     */\n    startEditing() {\n      var table = this.getTable();\n      var tableModel = table.getTableModel();\n      var col = this.__focusedCol;\n\n      if (\n        !this.isEditing() &&\n        col != null &&\n        tableModel.isColumnEditable(col)\n      ) {\n        var row = this.__focusedRow;\n        var xPos = this.getTablePaneModel().getX(col);\n        var value = tableModel.getValue(col, row);\n\n        // scroll cell into view\n        this.scrollCellVisible(col, row);\n\n        this.__cellEditorFactory = table\n          .getTableColumnModel()\n          .getCellEditorFactory(col);\n\n        var cellInfo = {\n          col: col,\n          row: row,\n          xPos: xPos,\n          value: value,\n          table: table\n        };\n\n        // Get a cell editor\n        this._cellEditor = this.__cellEditorFactory.createCellEditor(cellInfo);\n\n        // We handle two types of cell editors: the traditional in-place\n        // editor, where the cell editor returned by the factory must fit in\n        // the space of the table cell; and a modal window in which the\n        // editing takes place.  Additionally, if the cell editor determines\n        // that it does not want to edit the particular cell being requested,\n        // it may return null to indicate that that cell is not editable.\n        if (this._cellEditor === null) {\n          // This cell is not editable even though its column is.\n          return false;\n        } else if (this._cellEditor instanceof qx.ui.window.Window) {\n          // It's a window.  Ensure that it's modal.\n          this._cellEditor.setModal(true);\n\n          // At least for the time being, we disallow the close button.  It\n          // acts differently than a cellEditor.close(), and invokes a bug\n          // someplace.  Modal window cell editors should provide their own\n          // buttons or means to activate a cellEditor.close() or equivalently\n          // cellEditor.hide().\n          this._cellEditor.setShowClose(false);\n\n          // Arrange to be notified when it is closed.\n          this._cellEditor.addListener(\n            \"close\",\n            this._onCellEditorModalWindowClose,\n            this\n          );\n\n          // If there's a pre-open function defined for the table...\n          var f = table.getModalCellEditorPreOpenFunction();\n          if (f != null) {\n            f(this._cellEditor, cellInfo);\n          }\n\n          // Open it now.\n          this._cellEditor.open();\n        } else {\n          // prevent tap event from bubbling up to the table\n          this.__focusIndicatorPointerDownListener =\n            this.__focusIndicator.addListener(\n              \"pointerdown\",\n              function (e) {\n                this.__lastPointerDownCell = {\n                  row: this.__focusedRow,\n                  col: this.__focusedCol\n                };\n\n                e.stopPropagation();\n              },\n              this\n            );\n\n          this._updateFocusIndicator(true);\n          this.__focusIndicator.add(this._cellEditor);\n          this.__focusIndicator.addState(\"editing\");\n          this.__focusIndicator.setKeepActive(false);\n\n          // Make the focus indicator visible during editing\n          this.__focusIndicator.setDecorator(\"table-scroller-focus-indicator\");\n\n          this._cellEditor.focus();\n          this._cellEditor.activate();\n        }\n\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Stops editing and writes the editor's value to the model.\n     */\n    stopEditing() {\n      // If the focus indicator is not being shown normally...\n      if (!this.getShowCellFocusIndicator()) {\n        // ... then hide it again\n        this.__focusIndicator.setDecorator(null);\n      }\n\n      this.flushEditor(true);\n    },\n\n    /**\n     * Writes the editor's value to the model\n     *\n     * @param cancel {Boolean ? false} Whether to also cancel\n     *      editing before firing the 'dateEdited' event.\n     */\n    flushEditor(cancel) {\n      if (this.isEditing()) {\n        var value = this.__cellEditorFactory.getCellEditorValue(\n          this._cellEditor\n        );\n\n        var oldValue = this.getTable()\n          .getTableModel()\n          .getValue(this.__focusedCol, this.__focusedRow);\n        this.getTable()\n          .getTableModel()\n          .setValue(this.__focusedCol, this.__focusedRow, value);\n\n        this.__table.focus();\n\n        if (cancel) {\n          this.cancelEditing();\n        }\n\n        // Fire an event containing the value change.\n        this.__table.fireDataEvent(\"dataEdited\", {\n          row: this.__focusedRow,\n          col: this.__focusedCol,\n          oldValue: oldValue,\n          value: value\n        });\n      }\n    },\n\n    /**\n     * Stops editing without writing the editor's value to the model.\n     */\n    cancelEditing() {\n      if (this.isEditing()) {\n        if (!(this._cellEditor instanceof qx.ui.window.Window)) {\n          this.__focusIndicator.removeState(\"editing\");\n          this.__focusIndicator.setKeepActive(true);\n\n          if (this.__focusIndicatorPointerDownListener !== null) {\n            this.__focusIndicator.removeListenerById(\n              this.__focusIndicatorPointerDownListener\n            );\n\n            this.__focusIndicatorPointerDownListener = null;\n          }\n          this._updateFocusIndicator();\n        }\n        this._cellEditor.destroy();\n        this._cellEditor = null;\n        this.__cellEditorFactory = null;\n      }\n    },\n\n    /**\n     * Event handler. Called when the modal window of the cell editor closes.\n     *\n     * @param e {Map} the event.\n     */\n    _onCellEditorModalWindowClose(e) {\n      this.stopEditing();\n    },\n\n    /**\n     * Returns the model index of the column the pointer is over or null if the pointer\n     * is not over a column.\n     *\n     * @param pageX {Integer} the x position of the pointer in the page (in pixels).\n     * @return {Integer} the model index of the column the pointer is over.\n     */\n    _getColumnForPageX(pageX) {\n      var columnModel = this.getTable().getTableColumnModel();\n      var paneModel = this.getTablePaneModel();\n      var colCount = paneModel.getColumnCount();\n      var currX = this.__tablePane.getContentLocation().left;\n\n      for (var x = 0; x < colCount; x++) {\n        var col = paneModel.getColumnAtX(x);\n        var colWidth = columnModel.getColumnWidth(col);\n        currX += colWidth;\n\n        if (pageX < currX) {\n          return col;\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Returns the model index of the column that should be resized when dragging\n     * starts here. Returns -1 if the pointer is in no resize region of any column.\n     *\n     * @param pageX {Integer} the x position of the pointer in the page (in pixels).\n     * @return {Integer} the column index.\n     */\n    _getResizeColumnForPageX(pageX) {\n      var contentLocation =\n        this.__header.getContentLocation() ||\n        this.__tablePane.getContentLocation();\n      if (contentLocation) {\n        var currX = contentLocation.left;\n        var columnModel = this.getTable().getTableColumnModel();\n        var paneModel = this.getTablePaneModel();\n        var colCount = paneModel.getColumnCount();\n        var regionRadius = qx.ui.table.pane.Scroller.RESIZE_REGION_RADIUS;\n\n        for (var x = 0; x < colCount; x++) {\n          var col = paneModel.getColumnAtX(x);\n          var colWidth = columnModel.getColumnWidth(col);\n          currX += colWidth;\n\n          if (pageX >= currX - regionRadius && pageX <= currX + regionRadius) {\n            return col;\n          }\n        }\n      }\n\n      return -1;\n    },\n\n    /**\n     * Returns the model index of the row the pointer is currently over. Returns -1 if\n     * the pointer is over the header. Returns null if the pointer is not over any\n     * column.\n     *\n     * @param pageX {Integer} the pointer x position in the page.\n     * @param pageY {Integer} the pointer y position in the page.\n     * @return {Integer} the model index of the row the pointer is currently over.\n     */\n    _getRowForPagePos(pageX, pageY) {\n      var panePos = this.__tablePane.getContentLocation();\n\n      if (panePos === null || pageX < panePos.left || pageX > panePos.right) {\n        // There was no cell or header cell hit\n        return null;\n      }\n\n      if (pageY >= panePos.top && pageY <= panePos.bottom) {\n        // This event is in the pane -> Get the row\n        var rowHeight = this.getTable().getRowHeight();\n\n        var scrollY = this.__verScrollBar.getPosition();\n\n        if (this.getTable().getKeepFirstVisibleRowComplete()) {\n          scrollY = Math.floor(scrollY / rowHeight) * rowHeight;\n        }\n\n        var tableY = scrollY + pageY - panePos.top;\n        var row = Math.floor(tableY / rowHeight);\n\n        var tableModel = this.getTable().getTableModel();\n        var rowCount = tableModel.getRowCount();\n\n        return row < rowCount ? row : null;\n      }\n\n      var headerPos = this.__header.getContentLocation();\n\n      if (\n        headerPos !== null &&\n        pageY >= headerPos.top &&\n        pageY <= headerPos.bottom &&\n        pageX <= headerPos.right\n      ) {\n        // This event is in the pane -> Return -1 for the header\n        return -1;\n      }\n\n      return null;\n    },\n\n    /**\n     * Sets the widget that should be shown in the top right corner.\n     *\n     * The widget will not be disposed, when this table scroller is disposed. So the\n     * caller has to dispose it.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to set. May be null.\n     */\n    setTopRightWidget(widget) {\n      var oldWidget = this.__topRightWidget;\n\n      if (oldWidget != null) {\n        this.__top.remove(oldWidget);\n      }\n\n      if (widget != null) {\n        this.__top.add(widget);\n      }\n\n      this.__topRightWidget = widget;\n    },\n\n    /**\n     * Get the top right widget\n     *\n     * @return {qx.ui.core.Widget} The top right widget.\n     */\n    getTopRightWidget() {\n      return this.__topRightWidget;\n    },\n\n    /**\n     * Returns the header.\n     *\n     * @return {qx.ui.table.pane.Header} the header.\n     */\n    getHeader() {\n      return this.__header;\n    },\n\n    /**\n     * Returns the table pane.\n     *\n     * @return {qx.ui.table.pane.Pane} the table pane.\n     */\n    getTablePane() {\n      return this.__tablePane;\n    },\n\n    /**\n     * Get the rendered width of the vertical scroll bar. The return value is\n     * <code>0</code> if the scroll bar is invisible or not yet rendered.\n     *\n     * @internal\n     * @return {Integer} The width of the vertical scroll bar\n     */\n    getVerticalScrollBarWidth() {\n      var scrollBar = this.__verScrollBar;\n      return scrollBar.isVisible() ? scrollBar.getSizeHint().width || 0 : 0;\n    },\n\n    /**\n     * Returns which scrollbars are needed.\n     *\n     * @param forceHorizontal {Boolean ? false} Whether to show the horizontal\n     *      scrollbar always.\n     * @param preventVertical {Boolean ? false} Whether to show the vertical scrollbar\n     *      never.\n     * @return {Integer} which scrollbars are needed. This may be any combination of\n     *      {@link #HORIZONTAL_SCROLLBAR} or {@link #VERTICAL_SCROLLBAR}\n     *      (combined by OR).\n     */\n    getNeededScrollBars(forceHorizontal, preventVertical) {\n      var verScrollBar = this.__verScrollBar;\n      var verBarWidth =\n        verScrollBar.getSizeHint().width +\n        verScrollBar.getMarginLeft() +\n        verScrollBar.getMarginRight();\n\n      var horScrollBar = this.__horScrollBar;\n      var horBarHeight =\n        horScrollBar.getSizeHint().height +\n        horScrollBar.getMarginTop() +\n        horScrollBar.getMarginBottom();\n\n      // Get the width and height of the view (without scroll bars)\n      var clipperSize = this._paneClipper.getInnerSize();\n      var viewWidth = clipperSize ? clipperSize.width : 0;\n\n      if (this.getVerticalScrollBarVisible()) {\n        viewWidth += verBarWidth;\n      }\n\n      var viewHeight = clipperSize ? clipperSize.height : 0;\n\n      if (this.getHorizontalScrollBarVisible()) {\n        viewHeight += horBarHeight;\n      }\n\n      var tableModel = this.getTable().getTableModel();\n      var rowCount = tableModel.getRowCount();\n\n      // Get the (virtual) width and height of the pane\n      var paneWidth = this.getTablePaneModel().getTotalWidth();\n      var paneHeight = this.getTable().getRowHeight() * rowCount;\n\n      // Check which scrollbars are needed\n      var horNeeded = false;\n      var verNeeded = false;\n\n      if (paneWidth > viewWidth) {\n        horNeeded = true;\n\n        if (paneHeight > viewHeight - horBarHeight) {\n          verNeeded = true;\n        }\n      } else if (paneHeight > viewHeight) {\n        verNeeded = true;\n\n        if (!preventVertical && paneWidth > viewWidth - verBarWidth) {\n          horNeeded = true;\n        }\n      }\n\n      // Create the mask\n      var horBar = qx.ui.table.pane.Scroller.HORIZONTAL_SCROLLBAR;\n      var verBar = qx.ui.table.pane.Scroller.VERTICAL_SCROLLBAR;\n      return (\n        (forceHorizontal || horNeeded ? horBar : 0) |\n        (preventVertical || !verNeeded ? 0 : verBar)\n      );\n    },\n\n    /**\n     * Return the pane clipper. It is sometimes required for special activities\n     * such as tracking events for drag&drop.\n     *\n     * @return {qx.ui.table.pane.Clipper}\n     *   The pane clipper for this scroller.\n     */\n    getPaneClipper() {\n      return this._paneClipper;\n    },\n\n    /**\n     * Returns the scroll area container widget (which enables more precise\n     * operations e.g. bounds retrieval for drag session scrolling).\n     *\n     * @see qx.ui.core.MDragDropScrolling#_getBounds\n     * @return {qx.ui.table.pane.Clipper}\n     *   The pane clipper for this scroller.\n     */\n    getScrollAreaContainer() {\n      return this.getPaneClipper();\n    },\n\n    // property apply method\n    _applyScrollTimeout(value, old) {\n      this._startInterval(value);\n    },\n\n    /**\n     * Starts the current running interval\n     *\n     * @param timeout {Integer} The timeout between two table updates\n     */\n    _startInterval(timeout) {\n      this.__timer.setInterval(timeout);\n      this.__timer.start();\n    },\n\n    /**\n     * stops the current running interval\n     */\n    _stopInterval() {\n      this.__timer.stop();\n    },\n\n    /**\n     * Does a postponed update of the content.\n     *\n     * @see #_updateContent\n     */\n    _postponedUpdateContent() {\n      //this.__updateContentPlanned = true;\n      this._updateContent();\n    },\n\n    /**\n     * Timer event handler. Periodically checks whether a table update is\n     * required. The update interval is controlled by the {@link #scrollTimeout}\n     * property.\n     *\n     * @signature function()\n     */\n    _oninterval: qx.event.GlobalError.observeMethod(function () {\n      if (this.__updateContentPlanned && !this.__tablePane._layoutPending) {\n        this.__updateContentPlanned = false;\n        this._updateContent();\n      }\n    }),\n\n    /**\n     * Updates the content. Sets the right section the table pane should show and\n     * does the scrolling.\n     */\n    _updateContent() {\n      var paneSize = this._paneClipper.getInnerSize();\n      if (!paneSize) {\n        return;\n      }\n      var paneHeight = paneSize.height;\n\n      var scrollX = this.__horScrollBar.getPosition();\n      var scrollY = this.__verScrollBar.getPosition();\n      var rowHeight = this.getTable().getRowHeight();\n\n      var firstRow = Math.floor(scrollY / rowHeight);\n      var oldFirstRow = this.__tablePane.getFirstVisibleRow();\n      this.__tablePane.setFirstVisibleRow(firstRow);\n\n      var visibleRowCount = Math.ceil(paneHeight / rowHeight);\n      var paneOffset = 0;\n      var firstVisibleRowComplete =\n        this.getTable().getKeepFirstVisibleRowComplete();\n\n      if (!firstVisibleRowComplete) {\n        // NOTE: We don't consider paneOffset, because this may cause alternating\n        //       adding and deleting of one row when scrolling. Instead we add one row\n        //       in every case.\n        visibleRowCount++;\n\n        paneOffset = scrollY % rowHeight;\n      }\n\n      this.__tablePane.setVisibleRowCount(visibleRowCount);\n\n      if (firstRow != oldFirstRow) {\n        this._updateFocusIndicator();\n      }\n\n      this._paneClipper.scrollToX(scrollX);\n\n      // Avoid expensive calls to setScrollTop if\n      // scrolling is not needed\n      if (!firstVisibleRowComplete) {\n        this._paneClipper.scrollToY(paneOffset);\n      }\n    },\n\n    /**\n     * Updates the location and the visibility of the focus indicator.\n     *\n     * @param editing {Boolean ? false} True if editing the cell\n     */\n    _updateFocusIndicator(editing) {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      this.__focusIndicator.moveToCell(\n        this.__focusedCol,\n        this.__focusedRow,\n        editing\n      );\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._stopInterval();\n\n    // this object was created by the table on init so we have to clean it up.\n    var tablePaneModel = this.getTablePaneModel();\n    if (tablePaneModel) {\n      tablePaneModel.dispose();\n    }\n\n    this.__lastPointerDownCell = this.__topRightWidget = this.__table = null;\n    this._disposeObjects(\n      \"__horScrollBar\",\n      \"__verScrollBar\",\n      \"_headerClipper\",\n      \"_paneClipper\",\n      \"__focusIndicator\",\n      \"__header\",\n      \"__tablePane\",\n      \"__top\",\n      \"__timer\",\n      \"__clipperContainer\"\n    );\n  }\n});\n"
  ]
}