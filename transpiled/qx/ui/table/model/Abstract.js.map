{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/table/model/Abstract.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "implement",
    "ui",
    "table",
    "ITableModel",
    "events",
    "dataChanged",
    "metaDataChanged",
    "sorted",
    "construct",
    "__columnIdArr",
    "__columnNameArr",
    "__columnIndexMap",
    "members",
    "__internalChange",
    "init",
    "getRowCount",
    "Error",
    "getRowData",
    "rowIndex",
    "isColumnEditable",
    "columnIndex",
    "isColumnSortable",
    "sortByColumn",
    "ascending",
    "getSortColumnIndex",
    "isSortAscending",
    "prefetchRows",
    "firstRowIndex",
    "lastRowIndex",
    "getValue",
    "getValueById",
    "columnId",
    "getColumnIndexById",
    "setValue",
    "value",
    "setValueById",
    "getColumnCount",
    "length",
    "getColumnId",
    "getColumnName",
    "setColumnIds",
    "columnIdArr",
    "i",
    "Array",
    "fireEvent",
    "setColumnNamesByIndex",
    "columnNameArr",
    "setColumnNamesById",
    "columnNameMap",
    "setColumns",
    "bSetIds",
    "destruct",
    "model",
    "Abstract"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * An abstract table model that performs the column handling, so subclasses only\n * need to care for row handling.\n */\nqx.Class.define(\"qx.ui.table.model.Abstract\", {\n  type: \"abstract\",\n  extend: qx.core.Object,\n  implement: qx.ui.table.ITableModel,\n\n  events: {\n    /**\n     * Fired when the table data changed (the stuff shown in the table body).\n     * The data property of the event will be a map having the following\n     * attributes:\n     * <ul>\n     *   <li>firstRow: The index of the first row that has changed.</li>\n     *   <li>lastRow: The index of the last row that has changed.</li>\n     *   <li>firstColumn: The model index of the first column that has changed.</li>\n     *   <li>lastColumn: The model index of the last column that has changed.</li>\n     * </ul>\n     *\n     * Additionally, if the data changed as a result of rows being removed\n     * from the data model, then these additional attributes will be in the\n     * data:\n     * <ul>\n     *   <li>removeStart: The model index of the first row that was removed.</li>\n     *   <li>removeCount: The number of rows that were removed.</li>\n     * </ul>\n     */\n    dataChanged: \"qx.event.type.Data\",\n\n    /**\n     * Fired when the meta data changed (the stuff shown in the table header).\n     */\n    metaDataChanged: \"qx.event.type.Event\",\n\n    /**\n     * Fired after the table is sorted (but before the metaDataChanged event)\n     */\n    sorted: \"qx.event.type.Data\"\n  },\n\n  construct() {\n    super();\n\n    this.__columnIdArr = [];\n    this.__columnNameArr = [];\n    this.__columnIndexMap = {};\n  },\n\n  members: {\n    __columnIdArr: null,\n    __columnNameArr: null,\n    __columnIndexMap: null,\n    __internalChange: null,\n\n    /**\n     * Initialize the table model <--> table interaction. The table model is\n     * passed to the table constructor, but the table model doesn't otherwise\n     * know anything about the table nor can it operate on table\n     * properties. This function provides the capability for the table model\n     * to specify characteristics of the table. It is called when the table\n     * model is applied to the table.\n     *\n     * @param table {qx.ui.table.Table}\n     *   The table to which this model is attached\n     */\n    init(table) {\n      // default implementation has nothing to do\n    },\n\n    /**\n     * Abstract method\n     * @throws {Error} An error if this method is called.\n     */\n    getRowCount() {\n      throw new Error(\"getRowCount is abstract\");\n    },\n\n    getRowData(rowIndex) {\n      return null;\n    },\n\n    isColumnEditable(columnIndex) {\n      return false;\n    },\n\n    isColumnSortable(columnIndex) {\n      return false;\n    },\n\n    sortByColumn(columnIndex, ascending) {},\n\n    getSortColumnIndex() {\n      return -1;\n    },\n\n    isSortAscending() {\n      return true;\n    },\n\n    prefetchRows(firstRowIndex, lastRowIndex) {},\n\n    /**\n     * Abstract method\n     *\n     * @param columnIndex {Integer} the index of the column\n     * @param rowIndex {Integer} the index of the row\n     *\n     * @throws {Error} An error if this method is called.\n     */\n    getValue(columnIndex, rowIndex) {\n      throw new Error(\"getValue is abstract\");\n    },\n\n    getValueById(columnId, rowIndex) {\n      return this.getValue(this.getColumnIndexById(columnId), rowIndex);\n    },\n\n    /**\n     * Abstract method\n     *\n     * @param columnIndex {Integer} index of the column\n     * @param rowIndex {Integer} index of the row\n     * @param value {var} Value to be set\n     *\n     * @throws {Error} An error if this method is called.\n     */\n    setValue(columnIndex, rowIndex, value) {\n      throw new Error(\"setValue is abstract\");\n    },\n\n    setValueById(columnId, rowIndex, value) {\n      this.setValue(this.getColumnIndexById(columnId), rowIndex, value);\n    },\n\n    // overridden\n    getColumnCount() {\n      return this.__columnIdArr.length;\n    },\n\n    // overridden\n    getColumnIndexById(columnId) {\n      return this.__columnIndexMap[columnId];\n    },\n\n    // overridden\n    getColumnId(columnIndex) {\n      return this.__columnIdArr[columnIndex];\n    },\n\n    // overridden\n    getColumnName(columnIndex) {\n      return this.__columnNameArr[columnIndex];\n    },\n\n    /**\n     * Sets the column IDs. These IDs may be used internally to identify a\n     * column.\n     *\n     * Note: This will clear previously set column names.\n     *\n     *\n     * @param columnIdArr {String[]} the IDs of the columns.\n     * @see #setColumns\n     */\n    setColumnIds(columnIdArr) {\n      this.__columnIdArr = columnIdArr;\n\n      // Create the reverse map\n      this.__columnIndexMap = {};\n\n      for (var i = 0; i < columnIdArr.length; i++) {\n        this.__columnIndexMap[columnIdArr[i]] = i;\n      }\n\n      this.__columnNameArr = new Array(columnIdArr.length);\n\n      // Inform the listeners\n      if (!this.__internalChange) {\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    /**\n     * Sets the column names. These names will be shown to the user.\n     *\n     * Note: The column IDs have to be defined before.\n     *\n     *\n     * @param columnNameArr {String[]} the names of the columns.\n     * @throws {Error} If the amount of given columns is different from the table.\n     * @see #setColumnIds\n     */\n    setColumnNamesByIndex(columnNameArr) {\n      if (this.__columnIdArr.length != columnNameArr.length) {\n        throw new Error(\n          \"this.__columnIdArr and columnNameArr have different length: \" +\n            this.__columnIdArr.length +\n            \" != \" +\n            columnNameArr.length\n        );\n      }\n\n      this.__columnNameArr = columnNameArr;\n\n      // Inform the listeners\n      this.fireEvent(\"metaDataChanged\");\n    },\n\n    /**\n     * Sets the column names. These names will be shown to the user.\n     *\n     * Note: The column IDs have to be defined before.\n     *\n     *\n     * @param columnNameMap {Map} a map containing the column IDs as keys and the\n     *          column name as values.\n     * @see #setColumnIds\n     */\n    setColumnNamesById(columnNameMap) {\n      this.__columnNameArr = new Array(this.__columnIdArr.length);\n\n      for (var i = 0; i < this.__columnIdArr.length; ++i) {\n        this.__columnNameArr[i] = columnNameMap[this.__columnIdArr[i]];\n      }\n    },\n\n    /**\n     * Sets the column names (and optionally IDs)\n     *\n     * Note: You can not change the _number_ of columns this way.  The number\n     *       of columns is highly intertwined in the entire table operation,\n     *       and dynamically changing it would require as much work as just\n     *       recreating your table.  If you must change the number of columns\n     *       in a table then you should remove the table and add a new one.\n     *\n     * @param columnNameArr {String[]}\n     *   The column names. These names will be shown to the user.\n     *\n     * @param columnIdArr {String[] ? null}\n     *   The column IDs. These IDs may be used internally to identify a\n     *   column. If null, the column names are used as IDs unless ID values\n     *   have already been set. If ID values have already been set, they will\n     *   continue to be used if no ID values are explicitly provided here.\n     *\n     * @throws {Error} If the amount of given columns is different from the table.\n     *\n     */\n    setColumns(columnNameArr, columnIdArr) {\n      var bSetIds = this.__columnIdArr.length == 0 || columnIdArr;\n\n      if (columnIdArr == null) {\n        if (this.__columnIdArr.length == 0) {\n          columnIdArr = columnNameArr;\n        } else {\n          columnIdArr = this.__columnIdArr;\n        }\n      }\n\n      if (columnIdArr.length != columnNameArr.length) {\n        throw new Error(\n          \"columnIdArr and columnNameArr have different length: \" +\n            columnIdArr.length +\n            \" != \" +\n            columnNameArr.length\n        );\n      }\n\n      if (bSetIds) {\n        this.__internalChange = true;\n        this.setColumnIds(columnIdArr);\n        this.__internalChange = false;\n      }\n\n      this.setColumnNamesByIndex(columnNameArr);\n    }\n  },\n\n  destruct() {\n    this.__columnIdArr = this.__columnNameArr = this.__columnIndexMap = null;\n  }\n});\n"
  ]
}