{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/table/model/Simple.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "model",
    "Abstract",
    "construct",
    "_rowArr",
    "__sortColumnIndex",
    "__sortMethods",
    "__editableColArr",
    "properties",
    "caseSensitiveSorting",
    "check",
    "init",
    "statics",
    "_defaultSortComparatorAscending",
    "row1",
    "row2",
    "columnIndex",
    "obj1",
    "obj2",
    "lang",
    "Type",
    "isNumber",
    "result",
    "isNaN",
    "_defaultSortComparatorInsensitiveAscending",
    "toLowerCase",
    "_defaultSortComparatorDescending",
    "_defaultSortComparatorInsensitiveDescending",
    "members",
    "__sortableColArr",
    "__sortAscending",
    "getRowData",
    "rowIndex",
    "rowData",
    "originalData",
    "getRowDataAsMap",
    "map",
    "col",
    "getColumnCount",
    "getColumnId",
    "key",
    "undefined",
    "getDataAsMapArray",
    "len",
    "getRowCount",
    "data",
    "i",
    "push",
    "setEditable",
    "editable",
    "fireEvent",
    "setColumnEditable",
    "isColumnEditable",
    "setColumnSortable",
    "sortable",
    "isColumnSortable",
    "sortByColumn",
    "ascending",
    "comparator",
    "sortMethods",
    "descending",
    "getCaseSensitiveSorting",
    "Simple",
    "sort",
    "fireDataEvent",
    "setSortMethods",
    "compare",
    "methods",
    "isFunction",
    "getSortMethods",
    "clearSorting",
    "getSortColumnIndex",
    "_setSortColumnIndex",
    "isSortAscending",
    "_setSortAscending",
    "length",
    "getValue",
    "Error",
    "setValue",
    "value",
    "hasListener",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "setData",
    "rowArr",
    "getData",
    "setDataAsMapArray",
    "mapArr",
    "rememberMaps",
    "_mapArray2RowArr",
    "addRows",
    "startIndex",
    "splice",
    "Array",
    "prototype",
    "apply",
    "addRowsAsMapArray",
    "setRows",
    "rowArrLength",
    "setRowsAsMapArray",
    "removeRows",
    "howMany",
    "removeStart",
    "removeCount",
    "rowCount",
    "columnCount",
    "dataArr",
    "columnArr",
    "j",
    "destruct"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * A simple table model that provides an API for changing the model data.\n */\nqx.Class.define(\"qx.ui.table.model.Simple\", {\n  extend: qx.ui.table.model.Abstract,\n\n  construct() {\n    super();\n\n    this._rowArr = [];\n    this.__sortColumnIndex = -1;\n\n    // Array of objects, each with property \"ascending\" and \"descending\"\n    this.__sortMethods = [];\n\n    this.__editableColArr = null;\n  },\n\n  properties: {\n    /**\n     * Whether sorting should be case sensitive\n     */\n    caseSensitiveSorting: {\n      check: \"Boolean\",\n      init: true\n    }\n  },\n\n  statics: {\n    /**\n     * Default ascending sort method to use if no custom method has been\n     * provided.\n     *\n     * @param row1 {var} first row\n     * @param row2 {var} second row\n     * @param columnIndex {Integer} the column to be sorted\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\n     */\n    _defaultSortComparatorAscending(row1, row2, columnIndex) {\n      var obj1 = row1[columnIndex];\n      var obj2 = row2[columnIndex];\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\n        var result = isNaN(obj1)\n          ? isNaN(obj2)\n            ? 0\n            : 1\n          : isNaN(obj2)\n          ? -1\n          : null;\n        if (result != null) {\n          return result;\n        }\n      }\n      if (obj1 == null && obj2 !== null) {\n        return -1;\n      } else if (obj2 == null && obj1 !== null) {\n        return 1;\n      }\n      return obj1 > obj2 ? 1 : obj1 == obj2 ? 0 : -1;\n    },\n\n    /**\n     * Same as the Default ascending sort method but using case insensitivity\n     *\n     * @param row1 {var} first row\n     * @param row2 {var} second row\n     * @param columnIndex {Integer} the column to be sorted\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\n     */\n    _defaultSortComparatorInsensitiveAscending(row1, row2, columnIndex) {\n      var obj1 = row1[columnIndex].toLowerCase\n        ? row1[columnIndex].toLowerCase()\n        : row1[columnIndex];\n      var obj2 = row2[columnIndex].toLowerCase\n        ? row2[columnIndex].toLowerCase()\n        : row2[columnIndex];\n\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\n        var result = isNaN(obj1)\n          ? isNaN(obj2)\n            ? 0\n            : 1\n          : isNaN(obj2)\n          ? -1\n          : null;\n        if (result != null) {\n          return result;\n        }\n      }\n      if (obj1 == null && obj2 !== null) {\n        return -1;\n      } else if (obj2 == null && obj1 !== null) {\n        return 1;\n      }\n      return obj1 > obj2 ? 1 : obj1 == obj2 ? 0 : -1;\n    },\n\n    /**\n     * Default descending sort method to use if no custom method has been\n     * provided.\n     *\n     * @param row1 {var} first row\n     * @param row2 {var} second row\n     * @param columnIndex {Integer} the column to be sorted\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\n     */\n    _defaultSortComparatorDescending(row1, row2, columnIndex) {\n      var obj1 = row1[columnIndex];\n      var obj2 = row2[columnIndex];\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\n        var result = isNaN(obj1)\n          ? isNaN(obj2)\n            ? 0\n            : 1\n          : isNaN(obj2)\n          ? -1\n          : null;\n        if (result != null) {\n          return result;\n        }\n      }\n      if (obj1 == null && obj2 !== null) {\n        return 1;\n      } else if (obj2 == null && obj1 !== null) {\n        return -1;\n      }\n      return obj1 < obj2 ? 1 : obj1 == obj2 ? 0 : -1;\n    },\n\n    /**\n     * Same as the Default descending sort method but using case insensitivity\n     *\n     * @param row1 {var} first row\n     * @param row2 {var} second row\n     * @param columnIndex {Integer} the column to be sorted\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\n     */\n    _defaultSortComparatorInsensitiveDescending(row1, row2, columnIndex) {\n      var obj1 = row1[columnIndex].toLowerCase\n        ? row1[columnIndex].toLowerCase()\n        : row1[columnIndex];\n      var obj2 = row2[columnIndex].toLowerCase\n        ? row2[columnIndex].toLowerCase()\n        : row2[columnIndex];\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\n        var result = isNaN(obj1)\n          ? isNaN(obj2)\n            ? 0\n            : 1\n          : isNaN(obj2)\n          ? -1\n          : null;\n        if (result != null) {\n          return result;\n        }\n      }\n      if (obj1 == null && obj2 !== null) {\n        return 1;\n      } else if (obj2 == null && obj1 !== null) {\n        return -1;\n      }\n      return obj1 < obj2 ? 1 : obj1 == obj2 ? 0 : -1;\n    }\n  },\n\n  members: {\n    _rowArr: null,\n    __editableColArr: null,\n    __sortableColArr: null,\n    __sortMethods: null,\n    __sortColumnIndex: null,\n    __sortAscending: null,\n\n    // overridden\n    getRowData(rowIndex) {\n      var rowData = this._rowArr[rowIndex];\n      if (rowData == null || rowData.originalData == null) {\n        return rowData;\n      } else {\n        return rowData.originalData;\n      }\n    },\n\n    /**\n     * Returns the data of one row as map containing the column IDs as key and\n     * the cell values as value. Also the meta data is included.\n     *\n     * @param rowIndex {Integer} the model index of the row.\n     * @return {Map} a Map containing the column values.\n     */\n    getRowDataAsMap(rowIndex) {\n      var rowData = this._rowArr[rowIndex];\n\n      if (rowData != null) {\n        var map = {};\n        // get the current set data\n        for (var col = 0; col < this.getColumnCount(); col++) {\n          map[this.getColumnId(col)] = rowData[col];\n        }\n\n        if (rowData.originalData != null) {\n          // merge in the meta data\n          for (var key in rowData.originalData) {\n            if (map[key] == undefined) {\n              map[key] = rowData.originalData[key];\n            }\n          }\n        }\n\n        return map;\n      }\n      // may be null, which is ok\n      return rowData && rowData.originalData ? rowData.originalData : null;\n    },\n\n    /**\n     * Gets the whole data as an array of maps.\n     *\n     * Note: Individual items are retrieved by {@link #getRowDataAsMap}.\n     * @return {Map[]} Array of row data maps\n     */\n    getDataAsMapArray() {\n      var len = this.getRowCount();\n      var data = [];\n\n      for (var i = 0; i < len; i++) {\n        data.push(this.getRowDataAsMap(i));\n      }\n\n      return data;\n    },\n\n    /**\n     * Sets all columns editable or not editable.\n     *\n     * @param editable {Boolean} whether all columns are editable.\n     */\n    setEditable(editable) {\n      this.__editableColArr = [];\n\n      for (var col = 0; col < this.getColumnCount(); col++) {\n        this.__editableColArr[col] = editable;\n      }\n\n      this.fireEvent(\"metaDataChanged\");\n    },\n\n    /**\n     * Sets whether a column is editable.\n     *\n     * @param columnIndex {Integer} the column of which to set the editable state.\n     * @param editable {Boolean} whether the column should be editable.\n     */\n    setColumnEditable(columnIndex, editable) {\n      if (editable != this.isColumnEditable(columnIndex)) {\n        if (this.__editableColArr == null) {\n          this.__editableColArr = [];\n        }\n\n        this.__editableColArr[columnIndex] = editable;\n\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    // overridden\n    isColumnEditable(columnIndex) {\n      return this.__editableColArr\n        ? this.__editableColArr[columnIndex] == true\n        : false;\n    },\n\n    /**\n     * Sets whether a column is sortable.\n     *\n     * @param columnIndex {Integer} the column of which to set the sortable state.\n     * @param sortable {Boolean} whether the column should be sortable.\n     */\n    setColumnSortable(columnIndex, sortable) {\n      if (sortable != this.isColumnSortable(columnIndex)) {\n        if (this.__sortableColArr == null) {\n          this.__sortableColArr = [];\n        }\n\n        this.__sortableColArr[columnIndex] = sortable;\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    // overridden\n    isColumnSortable(columnIndex) {\n      return this.__sortableColArr\n        ? this.__sortableColArr[columnIndex] !== false\n        : true;\n    },\n\n    // overridden\n    sortByColumn(columnIndex, ascending) {\n      // NOTE: We use different comparators for ascending and descending,\n      //     because comparators should be really fast.\n      var comparator;\n\n      var sortMethods = this.__sortMethods[columnIndex];\n      if (sortMethods) {\n        comparator = ascending ? sortMethods.ascending : sortMethods.descending;\n      } else {\n        if (this.getCaseSensitiveSorting()) {\n          comparator = ascending\n            ? qx.ui.table.model.Simple._defaultSortComparatorAscending\n            : qx.ui.table.model.Simple._defaultSortComparatorDescending;\n        } else {\n          comparator = ascending\n            ? qx.ui.table.model.Simple\n                ._defaultSortComparatorInsensitiveAscending\n            : qx.ui.table.model.Simple\n                ._defaultSortComparatorInsensitiveDescending;\n        }\n      }\n\n      comparator.columnIndex = columnIndex;\n      this._rowArr.sort(function (row1, row2) {\n        return comparator(row1, row2, columnIndex);\n      });\n\n      this.__sortColumnIndex = columnIndex;\n      this.__sortAscending = ascending;\n\n      var data = {\n        columnIndex: columnIndex,\n        ascending: ascending\n      };\n\n      this.fireDataEvent(\"sorted\", data);\n\n      this.fireEvent(\"metaDataChanged\");\n    },\n\n    /**\n     * Specify the methods to use for ascending and descending sorts of a\n     * particular column.\n     *\n     * @param columnIndex {Integer}\n     *   The index of the column for which the sort methods are being\n     *   provided.\n     *\n     * @param compare {Function|Map}\n     *   If provided as a Function, this is the comparator function to sort in\n     *   ascending order. It takes three parameters: the two arrays of row data,\n     *   row1 and row2, being compared and the column index sorting was requested\n     *   for.\n     *\n     *   For backwards compatability, user-supplied compare functions may still\n     *   take only two parameters, the two arrays of row data, row1 and row2,\n     *   being compared and obtain the column index as arguments.callee.columnIndex.\n     *   This is deprecated, however, as arguments.callee is disallowed in ES5 strict\n     *   mode and ES6.\n     *\n     *   The comparator function must return 1, 0 or -1, when the column in row1\n     *   is greater than, equal to, or less than, respectively, the column in\n     *   row2.\n     *\n     *   If this parameter is a Map, it shall have two properties: \"ascending\"\n     *   and \"descending\". The property value of each is a comparator\n     *   function, as described above.\n     *\n     *   If only the \"ascending\" function is provided (i.e. this parameter is\n     *   a Function, not a Map), then the \"descending\" function is built\n     *   dynamically by passing the two parameters to the \"ascending\" function\n     *   in reversed order. <i>Use of a dynamically-built \"descending\" function\n     *   generates at least one extra function call for each row in the table,\n     *   and possibly many more. If the table is expected to have more than\n     *   about 1000 rows, you will likely want to provide a map with a custom\n     *   \"descending\" sort function as well as the \"ascending\" one.</i>\n     *\n     */\n    setSortMethods(columnIndex, compare) {\n      var methods;\n      if (qx.lang.Type.isFunction(compare)) {\n        methods = {\n          ascending: compare,\n          descending(row1, row2, columnIndex) {\n            /* assure backwards compatibility for sort functions using\n             * arguments.callee.columnIndex and fix a bug where retreiveing\n             * column index via this way did not work for the case where a\n             * single comparator function was used.\n             * Note that arguments.callee is not available in ES5 strict mode and ES6.\n             * See discussion in\n             * https://github.com/qooxdoo/qooxdoo/pull/9499#pullrequestreview-99655182\n             */\n            compare.columnIndex = columnIndex;\n\n            return compare(row2, row1, columnIndex);\n          }\n        };\n      } else {\n        methods = compare;\n      }\n      this.__sortMethods[columnIndex] = methods;\n    },\n\n    /**\n     * Returns the sortMethod(s) for a table column.\n     *\n     * @param columnIndex {Integer} The index of the column for which the sort\n     *   methods are being  provided.\n     *\n     * @return {Map} a map with the two properties \"ascending\"\n     *   and \"descending\" for the specified column.\n     *   The property value of each is a comparator function, as described\n     *   in {@link #setSortMethods}.\n     */\n    getSortMethods(columnIndex) {\n      return this.__sortMethods[columnIndex];\n    },\n\n    /**\n     * Clears the sorting.\n     */\n    clearSorting() {\n      if (this.__sortColumnIndex != -1) {\n        this.__sortColumnIndex = -1;\n        this.__sortAscending = true;\n\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    // overridden\n    getSortColumnIndex() {\n      return this.__sortColumnIndex;\n    },\n\n    /**\n     * Set the sort column index\n     *\n     * WARNING: This should be called only by subclasses with intimate\n     *          knowledge of what they are doing!\n     *\n     * @param columnIndex {Integer} index of the column\n     */\n    _setSortColumnIndex(columnIndex) {\n      this.__sortColumnIndex = columnIndex;\n    },\n\n    // overridden\n    isSortAscending() {\n      return this.__sortAscending;\n    },\n\n    /**\n     * Set whether to sort in ascending order or not.\n     *\n     * WARNING: This should be called only by subclasses with intimate\n     *          knowledge of what they are doing!\n     *\n     * @param ascending {Boolean}\n     *   <i>true</i> for an ascending sort;\n     *   <i> false</i> for a descending sort.\n     */\n    _setSortAscending(ascending) {\n      this.__sortAscending = ascending;\n    },\n\n    // overridden\n    getRowCount() {\n      return this._rowArr.length;\n    },\n\n    // overridden\n    getValue(columnIndex, rowIndex) {\n      if (rowIndex < 0 || rowIndex >= this._rowArr.length) {\n        throw new Error(\n          \"this._rowArr out of bounds: \" +\n            rowIndex +\n            \" (0..\" +\n            this._rowArr.length +\n            \")\"\n        );\n      }\n\n      return this._rowArr[rowIndex][columnIndex];\n    },\n\n    // overridden\n    setValue(columnIndex, rowIndex, value) {\n      if (this._rowArr[rowIndex][columnIndex] != value) {\n        this._rowArr[rowIndex][columnIndex] = value;\n\n        // Inform the listeners\n        if (this.hasListener(\"dataChanged\")) {\n          var data = {\n            firstRow: rowIndex,\n            lastRow: rowIndex,\n            firstColumn: columnIndex,\n            lastColumn: columnIndex\n          };\n\n          this.fireDataEvent(\"dataChanged\", data);\n        }\n\n        if (columnIndex == this.__sortColumnIndex) {\n          this.clearSorting();\n        }\n      }\n    },\n\n    /**\n     * Sets the whole data in a bulk.\n     *\n     * @param rowArr {var[][]} An array containing an array for each row. Each\n     *          row-array contains the values in that row in the order of the columns\n     *          in this model.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    setData(rowArr, clearSorting) {\n      this._rowArr = rowArr;\n\n      // Inform the listeners\n      if (this.hasListener(\"dataChanged\")) {\n        var data = {\n          firstRow: 0,\n          lastRow: rowArr.length - 1,\n          firstColumn: 0,\n          lastColumn: this.getColumnCount() - 1\n        };\n\n        this.fireDataEvent(\"dataChanged\", data);\n      }\n\n      if (clearSorting !== false) {\n        this.clearSorting();\n      }\n    },\n\n    /**\n     * Returns the data of this model.\n     *\n     * Warning: Do not alter this array! If you want to change the data use\n     * {@link #setData}, {@link #setDataAsMapArray} or {@link #setValue} instead.\n     *\n     * @return {var[][]} An array containing an array for each row. Each\n     *           row-array contains the values in that row in the order of the columns\n     *           in this model.\n     */\n    getData() {\n      return this._rowArr;\n    },\n\n    /**\n     * Sets the whole data in a bulk.\n     *\n     * @param mapArr {Map[]} An array containing a map for each row. Each\n     *        row-map contains the column IDs as key and the cell values as value.\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\n     *        If true {@link #getRowData} will return the original map.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    setDataAsMapArray(mapArr, rememberMaps, clearSorting) {\n      this.setData(this._mapArray2RowArr(mapArr, rememberMaps), clearSorting);\n    },\n\n    /**\n     * Adds some rows to the model.\n     *\n     * Warning: The given array will be altered!\n     *\n     * @param rowArr {var[][]} An array containing an array for each row. Each\n     *          row-array contains the values in that row in the order of the columns\n     *          in this model.\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\n     *          the rows are appended to the end.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    addRows(rowArr, startIndex, clearSorting) {\n      if (startIndex == null) {\n        startIndex = this._rowArr.length;\n      }\n\n      // Prepare the rowArr so it can be used for apply\n      rowArr.splice(0, 0, startIndex, 0);\n\n      // Insert the new rows\n      Array.prototype.splice.apply(this._rowArr, rowArr);\n\n      // Inform the listeners\n      var data = {\n        firstRow: startIndex,\n        lastRow: this._rowArr.length - 1,\n        firstColumn: 0,\n        lastColumn: this.getColumnCount() - 1\n      };\n\n      this.fireDataEvent(\"dataChanged\", data);\n\n      if (clearSorting !== false) {\n        this.clearSorting();\n      }\n    },\n\n    /**\n     * Adds some rows to the model.\n     *\n     * Warning: The given array (mapArr) will be altered!\n     *\n     * @param mapArr {Map[]} An array containing a map for each row. Each\n     *        row-map contains the column IDs as key and the cell values as value.\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\n     *        the rows are appended to the end.\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\n     *        If true {@link #getRowData} will return the original map.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    addRowsAsMapArray(mapArr, startIndex, rememberMaps, clearSorting) {\n      this.addRows(\n        this._mapArray2RowArr(mapArr, rememberMaps),\n        startIndex,\n        clearSorting\n      );\n    },\n\n    /**\n     * Sets rows in the model. The rows overwrite the old rows starting at\n     * <code>startIndex</code> to <code>startIndex+rowArr.length</code>.\n     *\n     * Warning: The given array will be altered!\n     *\n     * @param rowArr {var[][]} An array containing an array for each row. Each\n     *          row-array contains the values in that row in the order of the columns\n     *          in this model.\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\n     *          the rows are set from the beginning (0).\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    setRows(rowArr, startIndex, clearSorting) {\n      if (startIndex == null) {\n        startIndex = 0;\n      }\n\n      // store the original length before we alter rowArr for use in splice.apply\n      var rowArrLength = rowArr.length;\n\n      // Prepare the rowArr so it can be used for apply\n      rowArr.splice(0, 0, startIndex, rowArr.length);\n\n      // Replace rows\n      Array.prototype.splice.apply(this._rowArr, rowArr);\n\n      // Inform the listeners\n      var data = {\n        firstRow: startIndex,\n        lastRow: startIndex + rowArrLength - 1,\n        firstColumn: 0,\n        lastColumn: this.getColumnCount() - 1\n      };\n\n      this.fireDataEvent(\"dataChanged\", data);\n\n      if (clearSorting !== false) {\n        this.clearSorting();\n      }\n    },\n\n    /**\n     * Set rows in the model. The rows overwrite the old rows starting at\n     * <code>startIndex</code> to <code>startIndex+rowArr.length</code>.\n     *\n     * Warning: The given array (mapArr) will be altered!\n     *\n     * @param mapArr {Map[]} An array containing a map for each row. Each\n     *        row-map contains the column IDs as key and the cell values as value.\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\n     *        the rows are appended to the end.\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\n     *        If true {@link #getRowData} will return the original map.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    setRowsAsMapArray(mapArr, startIndex, rememberMaps, clearSorting) {\n      this.setRows(\n        this._mapArray2RowArr(mapArr, rememberMaps),\n        startIndex,\n        clearSorting\n      );\n    },\n\n    /**\n     * Removes some rows from the model.\n     *\n     * @param startIndex {Integer} the index of the first row to remove.\n     * @param howMany {Integer} the number of rows to remove.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    removeRows(startIndex, howMany, clearSorting) {\n      // In the case of `removeRows`, specifically, we must create the\n      // listeners' event data before actually removing the rows from\n      // the row data, so that the `lastRow` calculation is correct.\n      // If we do the delete operation first, as is done in other\n      // methods, the final rows of the table can escape being\n      // updated, thus leaving hanging old data on the rendered table.\n      // This reordering (deleting after creating event data) fixes #10365.\n      var data = {\n        firstRow: startIndex,\n        lastRow: this._rowArr.length - 1,\n        firstColumn: 0,\n        lastColumn: this.getColumnCount() - 1,\n        removeStart: startIndex,\n        removeCount: howMany\n      };\n\n      this._rowArr.splice(startIndex, howMany);\n\n      // Inform the listeners\n      this.fireDataEvent(\"dataChanged\", data);\n\n      if (clearSorting !== false) {\n        this.clearSorting();\n      }\n    },\n\n    /**\n     * Creates an array of maps to an array of arrays.\n     *\n     * @param mapArr {Map[]} An array containing a map for each row. Each\n     *          row-map contains the column IDs as key and the cell values as value.\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\n     *        If true {@link #getRowData} will return the original map.\n     * @return {var[][]} An array containing an array for each row. Each\n     *           row-array contains the values in that row in the order of the columns\n     *           in this model.\n     */\n    _mapArray2RowArr(mapArr, rememberMaps) {\n      var rowCount = mapArr.length;\n      var columnCount = this.getColumnCount();\n      var dataArr = new Array(rowCount);\n      var columnArr;\n\n      for (var i = 0; i < rowCount; ++i) {\n        columnArr = [];\n        if (rememberMaps) {\n          columnArr.originalData = mapArr[i];\n        }\n\n        for (var j = 0; j < columnCount; ++j) {\n          columnArr[j] = mapArr[i][this.getColumnId(j)];\n        }\n\n        dataArr[i] = columnArr;\n      }\n\n      return dataArr;\n    }\n  },\n\n  destruct() {\n    this._rowArr =\n      this.__editableColArr =\n      this.__sortMethods =\n      this.__sortableColArr =\n        null;\n  }\n});\n"
  ]
}