{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/table/cellrenderer/AbstractImage.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "cellrenderer",
    "Abstract",
    "type",
    "construct",
    "clazz",
    "stylesheet",
    "bom",
    "Stylesheet",
    "createElement",
    "properties",
    "repeat",
    "check",
    "value",
    "valid",
    "includes",
    "init",
    "members",
    "__defaultWidth",
    "__defaultHeight",
    "__imageData",
    "_identifyImage",
    "cellInfo",
    "Error",
    "_getImageInfos",
    "imageData",
    "url",
    "tooltip",
    "imageWidth",
    "imageHeight",
    "sizes",
    "__getImageSize",
    "width",
    "height",
    "source",
    "ResourceManager",
    "util",
    "getInstance",
    "ImageLoader",
    "io",
    "has",
    "getImageWidth",
    "getImageHeight",
    "isLoaded",
    "getWidth",
    "getHeight",
    "createDataCellHtml",
    "htmlArr",
    "_getCellClass",
    "_getContentHtml",
    "content",
    "srcUrl",
    "highResolutionSource",
    "findHighResolutionSource",
    "style",
    "display",
    "core",
    "Environment",
    "get",
    "verticalAlign",
    "position",
    "getCombinedFormat",
    "element",
    "Decoration",
    "create",
    "getRepeat",
    "_getCellAttributes",
    "baseAttrs",
    "destruct",
    "AbstractImage"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Carsten Lergenmueller (carstenl)\n\n************************************************************************ */\n\n/**\n * A template class for cell renderer, which display images. Concrete\n * implementations must implement the method {@link #_identifyImage}.\n */\nqx.Class.define(\"qx.ui.table.cellrenderer.AbstractImage\", {\n  extend: qx.ui.table.cellrenderer.Abstract,\n  type: \"abstract\",\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n\n    var clazz = this.self(arguments);\n    if (!clazz.stylesheet) {\n      clazz.stylesheet = qx.bom.Stylesheet.createElement(\n        \".qooxdoo-table-cell-icon {\" + \"  text-align:center;\" + \"}\"\n      );\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n  properties: {\n    /**\n     * Whether to repeat or scale the image.\n     *\n     * @param repeat {String}\n     *   One of\n     *     <code>scale</code>,\n     *     <code>scale-x</code>,\n     *     <code>scale-y</code>,\n     *     <code>repeat</code>,\n     *     <code>repeat-x</code>,\n     *     <code>repeat-y</code>,\n     *     <code>no-repeat</code>\n     */\n    repeat: {\n      check(value) {\n        var valid = [\n          \"scale\",\n          \"scale-x\",\n          \"scale-y\",\n          \"repeat\",\n          \"repeat-x\",\n          \"repeat-y\",\n          \"no-repeat\"\n        ];\n\n        return valid.includes(value);\n      },\n      init: \"no-repeat\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __defaultWidth: 16,\n    __defaultHeight: 16,\n    __imageData: null,\n\n    /**\n     * Identifies the Image to show. This is a template method, which must be\n     * implemented by sub classes.\n     *\n     * @abstract\n     * @param cellInfo {Map} The information about the cell.\n     *          See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     * @return {Map} A map having the following attributes:\n     *           <ul>\n     *           <li>\n     *             \"url\": (type string) must be the URL of the image to show.\n     *             The url given must either be managed by the {@link qx.util.ResourceManager}\n     *             or pre-loaded with {@link qx.io.ImageLoader}. This is to make sure that\n     *             the renderer knows the dimensions and the format of the image.\n     *           </li>\n     *           <li>\"imageWidth\": (type int) the width of the image in pixels.</li>\n     *           <li>\"imageHeight\": (type int) the height of the image in pixels.</li>\n     *           <li>\"tooltip\": (type string) must be the image tooltip text.</li>\n     *           </ul>\n     * @throws {Error} the abstract function warning.\n     */\n    _identifyImage(cellInfo) {\n      throw new Error(\"_identifyImage is abstract\");\n    },\n\n    /**\n     * Retrieves the image infos.\n     *\n     * @param cellInfo {Map} The information about the cell.\n     *          See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     * @return {Map} Map with an \"url\" attribute (type string)\n     *                 holding the URL of the image to show\n     *                 and a \"tooltip\" attribute\n     *                 (type string) being the tooltip text (or null if none was specified)\n     */\n    _getImageInfos(cellInfo) {\n      // Query the subclass about image and tooltip\n      var imageData = this._identifyImage(cellInfo);\n\n      // If subclass refuses to give map, construct it with required properties\n      // If no map is given, but instead a string, assume that this string is\n      // the URL of the image [BUG #4289]\n      if (imageData == null || typeof imageData == \"string\") {\n        imageData = {\n          url: imageData,\n          tooltip: null\n        };\n      }\n\n      // If sizes are not included in map given by subclass,\n      // fall-back to calculated image size\n      if (!imageData.imageWidth || !imageData.imageHeight) {\n        var sizes = this.__getImageSize(imageData.url);\n\n        imageData.imageWidth = sizes.width;\n        imageData.imageHeight = sizes.height;\n      }\n\n      // Add width and height keys to map [BUG #4289]\n      // - [width|height] is read by _getContentHtml()\n      // - [imageWidth|imageHeight] is possibly read in legacy applications\n      imageData.width = imageData.imageWidth;\n      imageData.height = imageData.imageHeight;\n\n      return imageData;\n    },\n\n    /**\n     * Compute the size of the given image\n     *\n     * @param source {String} the image URL\n     * @return {Map} A map containing the image's <code>width</code> and\n     *    <code>height</code>\n     */\n    __getImageSize(source) {\n      var ResourceManager = qx.util.ResourceManager.getInstance();\n      var ImageLoader = qx.io.ImageLoader;\n      var width, height;\n\n      // Detect if the image registry knows this image\n      if (ResourceManager.has(source)) {\n        width = ResourceManager.getImageWidth(source);\n        height = ResourceManager.getImageHeight(source);\n      } else if (ImageLoader.isLoaded(source)) {\n        width = ImageLoader.getWidth(source);\n        height = ImageLoader.getHeight(source);\n      } else {\n        width = this.__defaultWidth;\n        height = this.__defaultHeight;\n      }\n\n      return { width: width, height: height };\n    },\n\n    // overridden\n    createDataCellHtml(cellInfo, htmlArr) {\n      this.__imageData = this._getImageInfos(cellInfo);\n      return super.createDataCellHtml(cellInfo, htmlArr);\n    },\n\n    // overridden\n    _getCellClass(cellInfo) {\n      return super._getCellClass() + \" qooxdoo-table-cell-icon\";\n    },\n\n    // overridden\n    _getContentHtml(cellInfo) {\n      var content = \"<div></div>\";\n      // set image\n      if (this.__imageData.url) {\n        var srcUrl = this.__imageData.url;\n        var highResolutionSource =\n          qx.util.ResourceManager.getInstance().findHighResolutionSource(\n            this.__imageData.url\n          );\n\n        if (highResolutionSource) {\n          srcUrl = highResolutionSource;\n        }\n        var style = {\n          width: this.__imageData.width + \"px\",\n          height: this.__imageData.height + \"px\",\n          display: qx.core.Environment.get(\"css.inlineblock\"),\n          verticalAlign: \"middle\",\n          position: \"static\"\n        };\n\n        if (\n          qx.util.ResourceManager.getInstance().getCombinedFormat(\n            this.__imageData.url\n          ) === \"\"\n        ) {\n          // background size is critical for high-resolution images but breaks combined images\n          style[\"background-size\"] =\n            this.__imageData.width + \"px \" + this.__imageData.height + \"px\";\n        }\n        content = qx.bom.element.Decoration.create(\n          srcUrl,\n          this.getRepeat(),\n          style\n        );\n      }\n      return content;\n    },\n\n    // overridden\n    _getCellAttributes(cellInfo) {\n      let baseAttrs = super._getCellAttributes(cellInfo);\n      if (!baseAttrs) {\n        baseAttrs = \"\";\n      }\n\n      var tooltip = this.__imageData.tooltip;\n      if (tooltip) {\n        return baseAttrs + \" title='\" + tooltip + \"'\";\n      } else {\n        return baseAttrs;\n      }\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this.__imageData = null;\n  }\n});\n"
  ]
}