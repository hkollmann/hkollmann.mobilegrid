{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/table/selection/Manager.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "properties",
    "selectionModel",
    "check",
    "members",
    "__lastPointerDownHandled",
    "handleTap",
    "index",
    "evt",
    "isLeftPressed",
    "getSelectionModel",
    "isSelectedIndex",
    "_handleSelectEvent",
    "isRightPressed",
    "getModifiers",
    "setSelectionInterval",
    "handleSelectKeyDown",
    "handleMoveKeyDown",
    "event",
    "type",
    "Dom",
    "SHIFT_MASK",
    "anchor",
    "getAnchorSelectionIndex",
    "leadIndex",
    "getLeadSelectionIndex",
    "anchorIndex",
    "isShiftPressed",
    "isSelectionEmpty",
    "isCtrlOrCommandPressed",
    "addSelectionInterval",
    "removeSelectionInterval",
    "ui",
    "table",
    "selection",
    "Manager"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * A selection manager. This is a helper class that handles all selection\n * related events and updates a SelectionModel.\n * <p>\n * Widgets that support selection should use this manager. This way the only\n * thing the widget has to do is mapping pointer or key events to indexes and\n * call the corresponding handler method.\n *\n * @see SelectionModel\n */\nqx.Class.define(\"qx.ui.table.selection.Manager\", {\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * The selection model where to set the selection changes.\n     */\n    selectionModel: {\n      check: \"qx.ui.table.selection.Model\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __lastPointerDownHandled: null,\n\n    /**\n     * Handles the tap event.\n     *\n     * @param index {Integer} the index the pointer is pointing at.\n     * @param evt {qx.event.type.Tap} the pointer event.\n     */\n    handleTap(index, evt) {\n      if (evt.isLeftPressed()) {\n        var selectionModel = this.getSelectionModel();\n\n        if (!selectionModel.isSelectedIndex(index)) {\n          // This index is not selected -> We react when the pointer is pressed (because of drag and drop)\n          this._handleSelectEvent(index, evt);\n          this.__lastPointerDownHandled = true;\n        } else {\n          // This index is already selected -> We react when the pointer is released (because of drag and drop)\n          this.__lastPointerDownHandled = false;\n        }\n      } else if (evt.isRightPressed() && evt.getModifiers() == 0) {\n        var selectionModel = this.getSelectionModel();\n\n        if (!selectionModel.isSelectedIndex(index)) {\n          // This index is not selected -> Set the selection to this index\n          selectionModel.setSelectionInterval(index, index);\n        }\n      }\n\n      if (evt.isLeftPressed() && !this.__lastPointerDownHandled) {\n        this._handleSelectEvent(index, evt);\n      }\n    },\n\n    /**\n     * Handles the key down event that is used as replacement for pointer taps\n     * (Normally space).\n     *\n     * @param index {Integer} the index that is currently focused.\n     * @param evt {Map} the key event.\n     */\n    handleSelectKeyDown(index, evt) {\n      this._handleSelectEvent(index, evt);\n    },\n\n    /**\n     * Handles a key down event that moved the focus (E.g. up, down, home, end, ...).\n     *\n     * @param index {Integer} the index that is currently focused.\n     * @param evt {Map} the key event.\n     */\n    handleMoveKeyDown(index, evt) {\n      var selectionModel = this.getSelectionModel();\n\n      switch (evt.getModifiers()) {\n        case 0:\n          selectionModel.setSelectionInterval(index, index);\n          break;\n\n        case qx.event.type.Dom.SHIFT_MASK:\n          var anchor = selectionModel.getAnchorSelectionIndex();\n\n          if (anchor == -1) {\n            selectionModel.setSelectionInterval(index, index);\n          } else {\n            selectionModel.setSelectionInterval(anchor, index);\n          }\n\n          break;\n      }\n    },\n\n    /**\n     * Handles a select event.\n     *\n     * @param index {Integer} the index the event is pointing at.\n     * @param evt {Map} the pointer event.\n     */\n    _handleSelectEvent(index, evt) {\n      var selectionModel = this.getSelectionModel();\n\n      var leadIndex = selectionModel.getLeadSelectionIndex();\n      var anchorIndex = selectionModel.getAnchorSelectionIndex();\n\n      if (evt.isShiftPressed()) {\n        if (index != leadIndex || selectionModel.isSelectionEmpty()) {\n          // The lead selection index was changed\n          if (anchorIndex == -1) {\n            anchorIndex = index;\n          }\n\n          if (evt.isCtrlOrCommandPressed()) {\n            selectionModel.addSelectionInterval(anchorIndex, index);\n          } else {\n            selectionModel.setSelectionInterval(anchorIndex, index);\n          }\n        }\n      } else if (evt.isCtrlOrCommandPressed()) {\n        if (selectionModel.isSelectedIndex(index)) {\n          selectionModel.removeSelectionInterval(index, index);\n        } else {\n          selectionModel.addSelectionInterval(index, index);\n        }\n      } else {\n        // setSelectionInterval checks to see if the change is really necessary\n        selectionModel.setSelectionInterval(index, index);\n      }\n    }\n  }\n});\n"
  ]
}