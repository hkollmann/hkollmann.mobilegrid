{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/table/Table.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "MDragDropScrolling",
    "construct",
    "tableModel",
    "custom",
    "initiallyHiddenColumns",
    "setInitiallyHiddenColumns",
    "selectionManager",
    "setNewSelectionManager",
    "selectionModel",
    "setNewSelectionModel",
    "tableColumnModel",
    "setNewTableColumnModel",
    "tablePane",
    "setNewTablePane",
    "tablePaneHeader",
    "setNewTablePaneHeader",
    "tablePaneScroller",
    "setNewTablePaneScroller",
    "tablePaneModel",
    "setNewTablePaneModel",
    "columnMenu",
    "setNewColumnMenu",
    "_setLayout",
    "layout",
    "VBox",
    "__scrollerParent",
    "container",
    "Composite",
    "HBox",
    "_add",
    "flex",
    "setDataRowRenderer",
    "table",
    "rowrenderer",
    "Default",
    "__selectionManager",
    "getNewSelectionManager",
    "setSelectionModel",
    "getNewSelectionModel",
    "setTableModel",
    "getEmptyTableModel",
    "setMetaColumnCounts",
    "setTabIndex",
    "addListener",
    "_onKeyDown",
    "_onFocusChanged",
    "spacer",
    "set",
    "height",
    "_onResize",
    "__focusedCol",
    "__focusedRow",
    "locale",
    "Manager",
    "getInstance",
    "_onChangeLocale",
    "initStatusBarVisible",
    "getTableModel",
    "init",
    "getContentElement",
    "setAttribute",
    "events",
    "columnVisibilityMenuCreateStart",
    "columnVisibilityMenuCreateEnd",
    "tableWidthChanged",
    "verticalScrollBarChanged",
    "cellTap",
    "cellDbltap",
    "cellContextmenu",
    "dataEdited",
    "statics",
    "__redirectEvents",
    "properties",
    "appearance",
    "refine",
    "focusable",
    "minWidth",
    "selectable",
    "check",
    "apply",
    "event",
    "rowHeight",
    "themeable",
    "forceLineHeight",
    "headerCellsVisible",
    "headerCellHeight",
    "nullable",
    "statusBarVisible",
    "additionalStatusBarText",
    "columnVisibilityButtonVisible",
    "metaColumnCounts",
    "focusCellOnPointerMove",
    "rowFocusChangeModifiesSelection",
    "showCellFocusIndicator",
    "contextMenuFromDataCellsOnly",
    "keepFirstVisibleRowComplete",
    "alwaysUpdateCells",
    "resetSelectionOnHeaderTap",
    "resetSelectionOnTapBelowRows",
    "minCellEditHeight",
    "dataRowRenderer",
    "modalCellEditorPreOpenFunction",
    "excludeScrollerScrollbarsIfNotNeeded",
    "newColumnMenu",
    "columnmenu",
    "Button",
    "newSelectionManager",
    "obj",
    "selection",
    "newSelectionModel",
    "Model",
    "newTableColumnModel",
    "columnmodel",
    "Basic",
    "newTablePane",
    "pane",
    "Pane",
    "newTablePaneHeader",
    "Header",
    "newTablePaneScroller",
    "Scroller",
    "newTablePaneModel",
    "columnModel",
    "members",
    "__additionalStatusBarText",
    "__lastRowCount",
    "__lastColCount",
    "__internalChange",
    "__columnMenuButtons",
    "__columnModel",
    "__emptyTableModel",
    "__hadVerticalScrollBar",
    "__timer",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "basic",
    "Label",
    "allowGrowX",
    "getNewColumnMenu",
    "menu",
    "factory",
    "_initColumnMenu",
    "_applySelectionModel",
    "value",
    "old",
    "removeListener",
    "_onSelectionChanged",
    "_applyRowHeight",
    "scrollerArr",
    "_getPaneScrollerArr",
    "i",
    "length",
    "updateVerScrollBarMaximum",
    "_applyHeaderCellsVisible",
    "_showChildControl",
    "_excludeChildControl",
    "getColumnVisibilityButtonVisible",
    "_applyColumnVisibilityButtonVisible",
    "_applyHeaderCellHeight",
    "getHeader",
    "setHeight",
    "_applyMinCellEditHeight",
    "setMinCellEditHeight",
    "model",
    "Simple",
    "setColumns",
    "setData",
    "_applyTableModel",
    "getTableColumnModel",
    "getColumnCount",
    "_onTableModelMetaDataChanged",
    "_onTableModelDataChanged",
    "_updateStatusBar",
    "_updateTableData",
    "getRowCount",
    "getNewTableColumnModel",
    "_onColVisibilityChanged",
    "_onColWidthChanged",
    "_onColOrderChanged",
    "paneScroller",
    "paneModel",
    "getTablePaneModel",
    "setTableColumnModel",
    "_applyStatusBarVisible",
    "_applyAdditionalStatusBarText",
    "_applyMetaColumnCounts",
    "handlers",
    "manager",
    "Registration",
    "getManager",
    "evName",
    "Table",
    "capture",
    "getListeners",
    "bubble",
    "_cleanUpMetaColumns",
    "leftX",
    "setFirstColumnX",
    "setMaxColumnCount",
    "getNewTablePaneModel",
    "getNewTablePaneScroller",
    "setTablePaneModel",
    "_onScrollY",
    "j",
    "context",
    "handler",
    "add",
    "isLast",
    "getHeaderCellHeight",
    "setTopRightWidget",
    "getChildControl",
    "isColumnVisibilityButtonVisible",
    "_updateScrollerWidths",
    "_updateScrollBarVisibility",
    "_applyFocusCellOnPointerMove",
    "setFocusCellOnPointerMove",
    "_applyShowCellFocusIndicator",
    "setShowCellFocusIndicator",
    "_applyContextMenuFromDataCellsOnly",
    "setContextMenuFromDataCellsOnly",
    "_applyKeepFirstVisibleRowComplete",
    "onKeepFirstVisibleRowCompleteChanged",
    "_applyResetSelectionOnHeaderTap",
    "setResetSelectionOnHeaderTap",
    "_applyResetSelectionOnTapBelowRows",
    "setResetSelectionOnTapBelowRows",
    "getSelectionManager",
    "getChildren",
    "getPaneScroller",
    "metaColumn",
    "fromMetaColumn",
    "destroy",
    "evt",
    "updateContent",
    "_onChangeTheme",
    "getDataRowRenderer",
    "initThemeValues",
    "onSelectionChanged",
    "onTableModelMetaDataChanged",
    "data",
    "getData",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "removeStart",
    "removeCount",
    "_onContextMenuOpen",
    "e",
    "getSelectionModel",
    "removeSelectionInterval",
    "setFocusedCell",
    "onTableModelDataChanged",
    "rowCount",
    "colCount",
    "setScrollY",
    "_onKeyPress",
    "log",
    "Logger",
    "deprecatedMethodWarning",
    "deprecateMethodOverriding",
    "getEnabled",
    "oldFocusedRow",
    "consumed",
    "identifier",
    "getKeyIdentifier",
    "isEditing",
    "getModifiers",
    "stopEditing",
    "moveFocusedCell",
    "startEditing",
    "cancelEditing",
    "focus",
    "isCtrlPressed",
    "setSelectionInterval",
    "handleSelectKeyDown",
    "scroller",
    "getTablePane",
    "getRowHeight",
    "direction",
    "getVisibleRowCount",
    "getScrollY",
    "getRowFocusChangeModifiesSelection",
    "handleMoveKeyDown",
    "preventDefault",
    "stopPropagation",
    "onFocusChanged",
    "onColVisibilityChanged",
    "col",
    "visible",
    "setColumnVisible",
    "setColumnWidth",
    "newWidth",
    "onColOrderChanged",
    "getTablePaneScrollerAtPageX",
    "pageX",
    "metaCol",
    "_getMetaColumnAtPageX",
    "row",
    "scrollVisible",
    "scrollCellVisible",
    "cellId",
    "toHashCode",
    "resetSelection",
    "resetCellFocus",
    "getFocusedColumn",
    "getFocusedRow",
    "highlightFocusedRow",
    "bHighlight",
    "setHighlightFocusRow",
    "clearFocusedRowHighlight",
    "relatedTarget",
    "getRelatedTarget",
    "FocusIndicator",
    "deltaX",
    "deltaY",
    "undefined",
    "x",
    "getVisibleX",
    "getVisibleColumnCount",
    "lang",
    "Number",
    "limit",
    "getVisibleColumnAtX",
    "elem",
    "getDomElement",
    "addListenerOnce",
    "_getMetaColumnAtColumnX",
    "started",
    "blockHeaderElements",
    "getBlocker",
    "blockContent",
    "unblockHeaderElements",
    "unblock",
    "pos",
    "getContentLocation",
    "left",
    "right",
    "visXPos",
    "getMetaColumnCounts",
    "rightXPos",
    "counts",
    "getStatusBarVisible",
    "selectedRowCount",
    "getSelectedCount",
    "text",
    "trn",
    "setValue",
    "width",
    "getTotalWidth",
    "setPaneWidth",
    "setLayoutProperties",
    "getBounds",
    "horBar",
    "HORIZONTAL_SCROLLBAR",
    "verBar",
    "VERTICAL_SCROLLBAR",
    "horNeeded",
    "verNeeded",
    "getExcludeScrollerScrollbarsIfNotNeeded",
    "bars",
    "getNeededScrollBars",
    "setHorizontalScrollBarVisible",
    "getVerticalScrollBarVisible",
    "Timer",
    "once",
    "setVerticalScrollBarVisible",
    "fireDataEvent",
    "columnButton",
    "empty",
    "getMenu",
    "iCol",
    "l",
    "getOverallColumnAtX",
    "menuButton",
    "getColumnName",
    "column",
    "bVisible",
    "isColumnVisible",
    "Assert",
    "assertInterface",
    "IColumnMenuItem",
    "_createColumnVisibilityCheckBoxHandler",
    "fireEvent",
    "type",
    "listener",
    "self",
    "arr",
    "push",
    "arguments",
    "join",
    "removeListenerById",
    "ids",
    "split",
    "shift",
    "removed",
    "call",
    "destruct",
    "dispose",
    "_disposeObjects",
    "_disposeMap"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,mBAAhB,EAAqC;AACnCC,IAAAA,MAAM,EAAEN,EAAE,CAACO,EAAH,CAAMC,IAAN,CAAWC,MADgB;AAEnCC,IAAAA,OAAO,EAAEV,EAAE,CAACO,EAAH,CAAMC,IAAN,CAAWG,kBAFe;;AAInC;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,IAAAA,SA7FmC,qBA6FzBC,UA7FyB,EA6FbC,MA7Fa,EA6FL;AAC5B,+CAD4B,CAE5B;AACA;AACA;;AACA,UAAI,CAACA,MAAL,EAAa;AACXA,QAAAA,MAAM,GAAG,EAAT;AACD;;AAED,UAAIA,MAAM,CAACC,sBAAX,EAAmC;AACjC,aAAKC,yBAAL,CAA+BF,MAAM,CAACC,sBAAtC;AACD;;AAED,UAAID,MAAM,CAACG,gBAAX,EAA6B;AAC3B,aAAKC,sBAAL,CAA4BJ,MAAM,CAACG,gBAAnC;AACD;;AAED,UAAIH,MAAM,CAACK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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Fabian Jakobs (fjakobs)\n     * Jonathan Weiß (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * Table\n *\n * A detailed description can be found in the package description\n * {@link qx.ui.table}.\n *\n * @childControl statusbar {qx.ui.basic.Label} label to show the status of the table\n * @childControl column-button {qx.ui.table.columnmenu.Button} button to open the column menu\n */\nqx.Class.define(\"qx.ui.table.Table\", {\n  extend: qx.ui.core.Widget,\n  include: qx.ui.core.MDragDropScrolling,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param tableModel {qx.ui.table.ITableModel ? null}\n   *   The table model to read the data from.\n   *\n   * @param custom {Map ? null}\n   *   A map provided to override the various supplemental classes allocated\n   *   within this constructor.  Each property must be a function which\n   *   returns an object instance, as indicated by shown the defaults listed\n   *   here:\n   *\n   *   <dl>\n   *     <dt>initiallyHiddenColumns</dt>\n   *       <dd>\n   *         {Array?}\n   *         A list of column numbers that should be initially invisible. Any\n   *         column not mentioned will be initially visible, and if no array\n   *         is provided, all columns will be initially visible.\n   *       </dd>\n   *     <dt>selectionManager</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.selection.Manager(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>selectionModel</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.selection.Model(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tableColumnModel</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.columnmodel.Basic(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePaneModel</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Model(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePane</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Pane(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePaneHeader</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Header(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePaneScroller</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Scroller(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePaneModel</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Model(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>columnMenu</dt>\n   *       <dd><pre class='javascript'>\n   *         function()\n   *         {\n   *           return new qx.ui.table.columnmenu.Button();\n   *         }\n   *       </pre></dd>\n   *   </dl>\n   */\n  construct(tableModel, custom) {\n    super();\n    //\n    // Use default objects if custom objects are not specified\n    //\n    if (!custom) {\n      custom = {};\n    }\n\n    if (custom.initiallyHiddenColumns) {\n      this.setInitiallyHiddenColumns(custom.initiallyHiddenColumns);\n    }\n\n    if (custom.selectionManager) {\n      this.setNewSelectionManager(custom.selectionManager);\n    }\n\n    if (custom.selectionModel) {\n      this.setNewSelectionModel(custom.selectionModel);\n    }\n\n    if (custom.tableColumnModel) {\n      this.setNewTableColumnModel(custom.tableColumnModel);\n    }\n\n    if (custom.tablePane) {\n      this.setNewTablePane(custom.tablePane);\n    }\n\n    if (custom.tablePaneHeader) {\n      this.setNewTablePaneHeader(custom.tablePaneHeader);\n    }\n\n    if (custom.tablePaneScroller) {\n      this.setNewTablePaneScroller(custom.tablePaneScroller);\n    }\n\n    if (custom.tablePaneModel) {\n      this.setNewTablePaneModel(custom.tablePaneModel);\n    }\n\n    if (custom.columnMenu) {\n      this.setNewColumnMenu(custom.columnMenu);\n    }\n\n    this._setLayout(new qx.ui.layout.VBox());\n\n    // Create the child widgets\n    this.__scrollerParent = new qx.ui.container.Composite(\n      new qx.ui.layout.HBox()\n    );\n\n    this._add(this.__scrollerParent, { flex: 1 });\n\n    // Allocate a default data row renderer\n    this.setDataRowRenderer(new qx.ui.table.rowrenderer.Default(this));\n\n    // Create the models\n    this.__selectionManager = this.getNewSelectionManager()(this);\n    this.setSelectionModel(this.getNewSelectionModel()(this));\n    this.setTableModel(tableModel || this.getEmptyTableModel());\n\n    // create the main meta column\n    this.setMetaColumnCounts([-1]);\n\n    // Make focusable\n    this.setTabIndex(1);\n    this.addListener(\"keydown\", this._onKeyDown);\n    this.addListener(\"focus\", this._onFocusChanged);\n    this.addListener(\"blur\", this._onFocusChanged);\n\n    // attach the resize listener to the last child of the layout. This\n    // ensures that all other children are laid out before\n    var spacer = new qx.ui.core.Widget().set({\n      height: 0\n    });\n\n    this._add(spacer);\n    spacer.addListener(\"resize\", this._onResize, this);\n\n    this.__focusedCol = null;\n    this.__focusedRow = null;\n\n    // add an event listener which updates the table content on locale change\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().addListener(\n        \"changeLocale\",\n        this._onChangeLocale,\n        this\n      );\n    }\n\n    this.initStatusBarVisible();\n\n    // If the table model has an init() method...\n    tableModel = this.getTableModel();\n    if (tableModel.init && typeof tableModel.init == \"function\") {\n      // ... then call it now to allow the table model to affect table\n      // properties.\n      tableModel.init(this);\n    }\n\n    // ARIA attrs\n    this.getContentElement().setAttribute(\"role\", \"grid\");\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Dispatched before adding the column list to the column visibility menu.\n     * The event data is a map with two properties: table and menu.  Listeners\n     * may add additional items to the menu, which appear at the top of the\n     * menu.\n     */\n    columnVisibilityMenuCreateStart: \"qx.event.type.Data\",\n\n    /**\n     * Dispatched after adding the column list to the column visibility menu.\n     * The event data is a map with two properties: table and menu.  Listeners\n     * may add additional items to the menu, which appear at the bottom of the\n     * menu.\n     */\n    columnVisibilityMenuCreateEnd: \"qx.event.type.Data\",\n\n    /**\n     * Dispatched when the width of the table has changed.\n     */\n    tableWidthChanged: \"qx.event.type.Event\",\n\n    /**\n     * Dispatched when updating scrollbars discovers that a vertical scrollbar\n     * is needed when it previously was not, or vice versa.  The data is a\n     * boolean indicating whether a vertical scrollbar is now being used.\n     */\n    verticalScrollBarChanged: \"qx.event.type.Data\",\n\n    /**\n     * Dispatched when a data cell has been tapped.\n     */\n    cellTap: \"qx.ui.table.pane.CellEvent\",\n\n    /**\n     * Dispatched when a data cell has been tapped.\n     */\n    cellDbltap: \"qx.ui.table.pane.CellEvent\",\n\n    /**\n     * Dispatched when the context menu is needed in a data cell\n     */\n    cellContextmenu: \"qx.ui.table.pane.CellEvent\",\n\n    /**\n     * Dispatched after a cell editor is flushed.\n     *\n     * The data is a map containing this properties:\n     * <ul>\n     *   <li>row</li>\n     *   <li>col</li>\n     *   <li>value</li>\n     *   <li>oldValue</li>\n     * </ul>\n     */\n    dataEdited: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** Events that must be redirected to the scrollers. */\n    __redirectEvents: { cellTap: 1, cellDbltap: 1, cellContextmenu: 1 }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    appearance: {\n      refine: true,\n      init: \"table\"\n    },\n\n    focusable: {\n      refine: true,\n      init: true\n    },\n\n    minWidth: {\n      refine: true,\n      init: 50\n    },\n\n    /**\n     * The list of columns that are initially hidden. This property is set by\n     * the constructor, from the value received in\n     * custom.initiallyHiddenColumns, and is only used when a column model is\n     * initialized. It can be of great benefit in tables with numerous columns\n     * where most are not initially visible. The process of creating the\n     * headers for all of the columns, only to have those columns discarded\n     * shortly thereafter when setColumnVisibility(false) is called, is a\n     * waste of (significant, in some browsers) time. Specifying the\n     * non-visible columns at constructor time can therefore avoid the initial\n     * creation of all of those superfluous widgets.\n     */\n    initiallyHiddenColumns: {\n      init: null\n    },\n\n    /**\n     * Whether the widget contains content which may be selected by the user.\n     *\n     * If the value set to <code>true</code> the native browser selection can\n     * be used for text selection. But it is normally useful for\n     * forms fields, longer texts/documents, editors, etc.\n     *\n     * Note: This has no effect on Table!\n     */\n    selectable: {\n      refine: true,\n      init: false\n    },\n\n    /** The selection model. */\n    selectionModel: {\n      check: \"qx.ui.table.selection.Model\",\n      apply: \"_applySelectionModel\",\n      event: \"changeSelectionModel\"\n    },\n\n    /** The table model. */\n    tableModel: {\n      check: \"qx.ui.table.ITableModel\",\n      apply: \"_applyTableModel\",\n      event: \"changeTableModel\"\n    },\n\n    /** The height of the table rows. */\n    rowHeight: {\n      check: \"Number\",\n      init: 20,\n      apply: \"_applyRowHeight\",\n      event: \"changeRowHeight\",\n      themeable: true\n    },\n\n    /**\n     * Force line height to match row height.  May be disabled if cell\n     * renderers being used wish to render multiple lines of data within a\n     * cell.  (With the default setting, all but the first of multiple lines\n     * of data will not be visible.)\n     */\n    forceLineHeight: {\n      check: \"Boolean\",\n      init: true\n    },\n\n    /**\n     *  Whether the header cells are visible. When setting this to false,\n     *  you'll likely also want to set the {#columnVisibilityButtonVisible}\n     *  property to false as well, to entirely remove the header row.\n     */\n    headerCellsVisible: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyHeaderCellsVisible\",\n      themeable: true\n    },\n\n    /** The height of the header cells. */\n    headerCellHeight: {\n      check: \"Integer\",\n      init: 16,\n      apply: \"_applyHeaderCellHeight\",\n      event: \"changeHeaderCellHeight\",\n      nullable: true,\n      themeable: true\n    },\n\n    /** Whether to show the status bar */\n    statusBarVisible: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyStatusBarVisible\"\n    },\n\n    /** The Statusbartext, set it, if you want some more Information */\n    additionalStatusBarText: {\n      nullable: true,\n      init: null,\n      apply: \"_applyAdditionalStatusBarText\"\n    },\n\n    /** Whether to show the column visibility button */\n    columnVisibilityButtonVisible: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyColumnVisibilityButtonVisible\",\n      themeable: true\n    },\n\n    /**\n     * @type {Integer[]} The number of columns per meta column. If the last array entry is -1,\n     * this meta column will get the remaining columns.\n     */\n    metaColumnCounts: {\n      check: \"Object\",\n      apply: \"_applyMetaColumnCounts\"\n    },\n\n    /**\n     * Whether the focus should moved when the pointer is moved over a cell. If false\n     * the focus is only moved on pointer taps.\n     */\n    focusCellOnPointerMove: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyFocusCellOnPointerMove\"\n    },\n\n    /**\n     * Whether row focus change by keyboard also modifies selection\n     */\n    rowFocusChangeModifiesSelection: {\n      check: \"Boolean\",\n      init: true\n    },\n\n    /**\n     * Whether the cell focus indicator should be shown\n     */\n    showCellFocusIndicator: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyShowCellFocusIndicator\"\n    },\n\n    /**\n     * By default, the \"cellContextmenu\" event is fired only when a data cell\n     * is right-clicked. It is not fired when a right-click occurs in the\n     * empty area of the table below the last data row. By turning on this\n     * property, \"cellContextMenu\" events will also be generated when a\n     * right-click occurs in that empty area. In such a case, row identifier\n     * in the event data will be null, so event handlers can check (row ===\n     * null) to handle this case.\n     */\n    contextMenuFromDataCellsOnly: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyContextMenuFromDataCellsOnly\"\n    },\n\n    /**\n     * Whether the table should keep the first visible row complete. If set to false,\n     * the first row may be rendered partial, depending on the vertical scroll value.\n     */\n    keepFirstVisibleRowComplete: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyKeepFirstVisibleRowComplete\"\n    },\n\n    /**\n     * Whether the table cells should be updated when only the selection or the\n     * focus changed. This slows down the table update but allows to react on a\n     * changed selection or a changed focus in a cell renderer.\n     */\n    alwaysUpdateCells: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Whether to reset the selection when a header cell is tapped. Since\n     * most data models do not have provisions to retain a selection after\n     * sorting, the default is to reset the selection in this case. Some data\n     * models, however, do have the capability to retain the selection, so\n     * when using those, this property should be set to false.\n     */\n    resetSelectionOnHeaderTap: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyResetSelectionOnHeaderTap\"\n    },\n\n    /**\n     * Whether to reset the selection when the unpopulated table area is tapped.\n     * The default is false which keeps the behaviour as before\n     */\n    resetSelectionOnTapBelowRows: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyResetSelectionOnTapBelowRows\"\n    },\n\n    /**\n     * If set then defines the minimum height of the focus indicator when editing\n     */\n    minCellEditHeight: {\n      check: \"Integer\",\n      nullable: true,\n      init: null,\n      apply: \"_applyMinCellEditHeight\"\n    },\n\n    /** The renderer to use for styling the rows. */\n    dataRowRenderer: {\n      check: \"qx.ui.table.IRowRenderer\",\n      init: null,\n      nullable: true,\n      event: \"changeDataRowRenderer\"\n    },\n\n    /**\n     * A function to call when before modal cell editor is opened.\n     *\n     * @signature function(cellEditor, cellInfo)\n     *\n     * @param cellEditor {qx.ui.window.Window}\n     *   The modal window which has been created for this cell editor\n     *\n     * @param cellInfo {Map}\n     *   Information about the cell for which this cell editor was created.\n     *   It contains the following properties:\n     *       col, row, xPos, value\n     *\n     */\n    modalCellEditorPreOpenFunction: {\n      check: \"Function\",\n      init: null,\n      nullable: true\n    },\n\n    /**\n     * By default, all Scrollers' (meta-columns') horizontal scrollbars are\n     * shown if any one is required. Allow not showing any that are not\n     * required.\n     */\n    excludeScrollerScrollbarsIfNotNeeded: {\n      check: \"Boolean\",\n      init: false,\n      nullable: false\n    },\n\n    /**\n     * A function to instantiate a new column menu button.\n     */\n    newColumnMenu: {\n      check: \"Function\",\n      init() {\n        return new qx.ui.table.columnmenu.Button();\n      }\n    },\n\n    /**\n     * A function to instantiate a selection manager.  this allows subclasses of\n     * Table to subclass this internal class.  To take effect, this property must\n     * be set before calling the Table constructor.\n     */\n    newSelectionManager: {\n      check: \"Function\",\n      init(obj) {\n        return new qx.ui.table.selection.Manager(obj);\n      }\n    },\n\n    /**\n     * A function to instantiate a selection model.  this allows subclasses of\n     * Table to subclass this internal class.  To take effect, this property must\n     * be set before calling the Table constructor.\n     */\n    newSelectionModel: {\n      check: \"Function\",\n      init(obj) {\n        return new qx.ui.table.selection.Model(obj);\n      }\n    },\n\n    /**\n     * A function to instantiate a table column model.  This allows subclasses\n     * of Table to subclass this internal class.  To take effect, this\n     * property must be set before calling the Table constructor.\n     */\n    newTableColumnModel: {\n      check: \"Function\",\n      init(table) {\n        return new qx.ui.table.columnmodel.Basic(table);\n      }\n    },\n\n    /**\n     * A function to instantiate a table pane.  this allows subclasses of\n     * Table to subclass this internal class.  To take effect, this property\n     * must be set before calling the Table constructor.\n     */\n    newTablePane: {\n      check: \"Function\",\n      init(obj) {\n        return new qx.ui.table.pane.Pane(obj);\n      }\n    },\n\n    /**\n     * A function to instantiate a table pane.  this allows subclasses of\n     * Table to subclass this internal class.  To take effect, this property\n     * must be set before calling the Table constructor.\n     */\n    newTablePaneHeader: {\n      check: \"Function\",\n      init(obj) {\n        return new qx.ui.table.pane.Header(obj);\n      }\n    },\n\n    /**\n     * A function to instantiate a table pane scroller.  this allows\n     * subclasses of Table to subclass this internal class.  To take effect,\n     * this property must be set before calling the Table constructor.\n     */\n    newTablePaneScroller: {\n      check: \"Function\",\n      init(obj) {\n        return new qx.ui.table.pane.Scroller(obj);\n      }\n    },\n\n    /**\n     * A function to instantiate a table pane model.  this allows subclasses\n     * of Table to subclass this internal class.  To take effect, this\n     * property must be set before calling the Table constructor.\n     */\n    newTablePaneModel: {\n      check: \"Function\",\n      init(columnModel) {\n        return new qx.ui.table.pane.Model(columnModel);\n      }\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __focusedCol: null,\n    __focusedRow: null,\n\n    __scrollerParent: null,\n\n    __selectionManager: null,\n\n    __additionalStatusBarText: null,\n    __lastRowCount: null,\n    __lastColCount: null,\n    __internalChange: null,\n\n    __columnMenuButtons: null,\n    __columnModel: null,\n    __emptyTableModel: null,\n\n    __hadVerticalScrollBar: null,\n\n    __timer: null,\n\n    // overridden\n    _createChildControlImpl(id, hash) {\n      var control;\n\n      switch (id) {\n        case \"statusbar\":\n          control = new qx.ui.basic.Label();\n          control.set({\n            allowGrowX: true\n          });\n\n          this._add(control);\n          break;\n\n        case \"column-button\":\n          control = this.getNewColumnMenu()();\n          control.set({\n            focusable: false\n          });\n\n          // Create the initial menu too\n          var menu = control.factory(\"menu\", { table: this });\n\n          // Add a listener to initialize the column menu when it becomes visible\n          menu.addListener(\"appear\", this._initColumnMenu, this);\n\n          break;\n      }\n\n      return control || super._createChildControlImpl(id);\n    },\n\n    // property modifier\n    _applySelectionModel(value, old) {\n      this.__selectionManager.setSelectionModel(value);\n\n      if (old != null) {\n        old.removeListener(\"changeSelection\", this._onSelectionChanged, this);\n      }\n\n      value.addListener(\"changeSelection\", this._onSelectionChanged, this);\n    },\n\n    // property modifier\n    _applyRowHeight(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].updateVerScrollBarMaximum();\n      }\n    },\n\n    // property modifier\n    _applyHeaderCellsVisible(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        if (value) {\n          scrollerArr[i]._showChildControl(\"header\");\n        } else {\n          scrollerArr[i]._excludeChildControl(\"header\");\n        }\n      }\n      // also hide the column visibility button\n      if (this.getColumnVisibilityButtonVisible()) {\n        this._applyColumnVisibilityButtonVisible(value);\n      }\n    },\n\n    // property modifier\n    _applyHeaderCellHeight(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].getHeader().setHeight(value);\n      }\n    },\n\n    // property modifier\n    _applyMinCellEditHeight(value) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].setMinCellEditHeight(value);\n      }\n    },\n\n    /**\n     * Get an empty table model instance to use for this table. Use this table\n     * to configure the table with no table model.\n     *\n     * @return {qx.ui.table.ITableModel} The empty table model\n     */\n    getEmptyTableModel() {\n      if (!this.__emptyTableModel) {\n        this.__emptyTableModel = new qx.ui.table.model.Simple();\n        this.__emptyTableModel.setColumns([]);\n        this.__emptyTableModel.setData([]);\n      }\n      return this.__emptyTableModel;\n    },\n\n    // property modifier\n    _applyTableModel(value, old) {\n      this.getTableColumnModel().init(value.getColumnCount(), this);\n\n      if (old != null) {\n        old.removeListener(\n          \"metaDataChanged\",\n          this._onTableModelMetaDataChanged,\n          this\n        );\n\n        old.removeListener(\"dataChanged\", this._onTableModelDataChanged, this);\n      }\n\n      value.addListener(\n        \"metaDataChanged\",\n        this._onTableModelMetaDataChanged,\n        this\n      );\n\n      value.addListener(\"dataChanged\", this._onTableModelDataChanged, this);\n\n      // Update the status bar\n      this._updateStatusBar();\n\n      this._updateTableData(0, value.getRowCount(), 0, value.getColumnCount());\n\n      this._onTableModelMetaDataChanged();\n\n      // If the table model has an init() method, call it. We don't, however,\n      // call it if this is the initial setting of the table model, as the\n      // scrollers are not yet initialized. In that case, the init method is\n      // called explicitly by the Table constructor.\n      if (old && value.init && typeof value.init == \"function\") {\n        value.init(this);\n      }\n    },\n\n    /**\n     * Get the The table column model.\n     *\n     * @return {qx.ui.table.columnmodel.Basic} The table's column model\n     */\n    getTableColumnModel() {\n      if (!this.__columnModel) {\n        var columnModel = (this.__columnModel =\n          this.getNewTableColumnModel()(this));\n\n        columnModel.addListener(\n          \"visibilityChanged\",\n          this._onColVisibilityChanged,\n          this\n        );\n\n        columnModel.addListener(\"widthChanged\", this._onColWidthChanged, this);\n        columnModel.addListener(\"orderChanged\", this._onColOrderChanged, this);\n\n        // Get the current table model\n        var tableModel = this.getTableModel();\n        columnModel.init(tableModel.getColumnCount(), this);\n\n        // Reset the table column model in each table pane model\n        var scrollerArr = this._getPaneScrollerArr();\n\n        for (var i = 0; i < scrollerArr.length; i++) {\n          var paneScroller = scrollerArr[i];\n          var paneModel = paneScroller.getTablePaneModel();\n          paneModel.setTableColumnModel(columnModel);\n        }\n      }\n      return this.__columnModel;\n    },\n\n    // property modifier\n    _applyStatusBarVisible(value, old) {\n      if (value) {\n        this._showChildControl(\"statusbar\");\n      } else {\n        this._excludeChildControl(\"statusbar\");\n      }\n\n      if (value) {\n        this._updateStatusBar();\n      }\n    },\n\n    // property modifier\n    _applyAdditionalStatusBarText(value, old) {\n      this.__additionalStatusBarText = value;\n      this._updateStatusBar();\n    },\n\n    // property modifier\n    _applyColumnVisibilityButtonVisible(value, old) {\n      if (value) {\n        this._showChildControl(\"column-button\");\n      } else {\n        this._excludeChildControl(\"column-button\");\n      }\n    },\n\n    // property modifier\n    _applyMetaColumnCounts(value, old) {\n      var metaColumnCounts = value;\n      var scrollerArr = this._getPaneScrollerArr();\n      var handlers = {};\n\n      if (value > old) {\n        // Save event listeners on the redirected events so we can re-apply\n        // them to new scrollers.\n        var manager = qx.event.Registration.getManager(scrollerArr[0]);\n        for (var evName in qx.ui.table.Table.__redirectEvents) {\n          handlers[evName] = {};\n          handlers[evName].capture = manager.getListeners(\n            scrollerArr[0],\n            evName,\n            true\n          );\n\n          handlers[evName].bubble = manager.getListeners(\n            scrollerArr[0],\n            evName,\n            false\n          );\n        }\n      }\n\n      // Remove the panes not needed any more\n      this._cleanUpMetaColumns(metaColumnCounts.length);\n\n      // Update the old panes\n      var leftX = 0;\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        var paneScroller = scrollerArr[i];\n        var paneModel = paneScroller.getTablePaneModel();\n        paneModel.setFirstColumnX(leftX);\n        paneModel.setMaxColumnCount(metaColumnCounts[i]);\n        leftX += metaColumnCounts[i];\n      }\n\n      // Add the new panes\n      if (metaColumnCounts.length > scrollerArr.length) {\n        var columnModel = this.getTableColumnModel();\n\n        for (var i = scrollerArr.length; i < metaColumnCounts.length; i++) {\n          var paneModel = this.getNewTablePaneModel()(columnModel);\n          paneModel.setFirstColumnX(leftX);\n          paneModel.setMaxColumnCount(metaColumnCounts[i]);\n          leftX += metaColumnCounts[i];\n\n          var paneScroller = this.getNewTablePaneScroller()(this);\n          paneScroller.setTablePaneModel(paneModel);\n\n          // Register event listener for vertical scrolling\n          paneScroller.addListener(\"changeScrollY\", this._onScrollY, this);\n\n          // Apply redirected events to this new scroller\n          for (evName in qx.ui.table.Table.__redirectEvents) {\n            // On first setting of meta columns (constructing phase), there\n            // are no handlers to deal with yet.\n            if (!handlers[evName]) {\n              break;\n            }\n\n            if (\n              handlers[evName].capture &&\n              handlers[evName].capture.length > 0\n            ) {\n              var capture = handlers[evName].capture;\n              for (var j = 0; j < capture.length; j++) {\n                // Determine what context to use.  If the context does not\n                // exist, we assume that the context is this table.  If it\n                // does exist and it equals the first pane scroller (from\n                // which we retrieved the listeners) then set the context\n                // to be this new pane scroller.  Otherwise leave the context\n                // as it was set.\n                var context = capture[j].context;\n                if (!context) {\n                  context = this;\n                } else if (context == scrollerArr[0]) {\n                  context = paneScroller;\n                }\n\n                paneScroller.addListener(\n                  evName,\n                  capture[j].handler,\n                  context,\n                  true\n                );\n              }\n            }\n\n            if (handlers[evName].bubble && handlers[evName].bubble.length > 0) {\n              var bubble = handlers[evName].bubble;\n              for (var j = 0; j < bubble.length; j++) {\n                // Determine what context to use.  If the context does not\n                // exist, we assume that the context is this table.  If it\n                // does exist and it equals the first pane scroller (from\n                // which we retrieved the listeners) then set the context\n                // to be this new pane scroller.  Otherwise leave the context\n                // as it was set.\n                var context = bubble[j].context;\n                if (!context) {\n                  context = this;\n                } else if (context == scrollerArr[0]) {\n                  context = paneScroller;\n                }\n\n                paneScroller.addListener(\n                  evName,\n                  bubble[j].handler,\n                  context,\n                  false\n                );\n              }\n            }\n          }\n\n          // last meta column is flexible\n          var flex = i == metaColumnCounts.length - 1 ? 1 : 0;\n          this.__scrollerParent.add(paneScroller, { flex: flex });\n          scrollerArr = this._getPaneScrollerArr();\n        }\n      }\n\n      // Update all meta columns\n      for (var i = 0; i < scrollerArr.length; i++) {\n        var paneScroller = scrollerArr[i];\n        var isLast = i == scrollerArr.length - 1;\n\n        // Set the right header height\n        paneScroller.getHeader().setHeight(this.getHeaderCellHeight());\n\n        // Put the column visibility button in the top right corner of the last meta column\n        paneScroller.setTopRightWidget(\n          isLast ? this.getChildControl(\"column-button\") : null\n        );\n      }\n\n      if (!this.isColumnVisibilityButtonVisible()) {\n        this._excludeChildControl(\"column-button\");\n      }\n\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n    // property modifier\n    _applyFocusCellOnPointerMove(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].setFocusCellOnPointerMove(value);\n      }\n    },\n\n    // property modifier\n    _applyShowCellFocusIndicator(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].setShowCellFocusIndicator(value);\n      }\n    },\n\n    // property modifier\n    _applyContextMenuFromDataCellsOnly(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].setContextMenuFromDataCellsOnly(value);\n      }\n    },\n\n    // property modifier\n    _applyKeepFirstVisibleRowComplete(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onKeepFirstVisibleRowCompleteChanged();\n      }\n    },\n\n    // property modifier\n    _applyResetSelectionOnHeaderTap(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].setResetSelectionOnHeaderTap(value);\n      }\n    },\n\n    // property modifier\n    _applyResetSelectionOnTapBelowRows(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].setResetSelectionOnTapBelowRows(value);\n      }\n    },\n\n    /**\n     * Returns the selection manager.\n     *\n     * @return {qx.ui.table.selection.Manager} the selection manager.\n     */\n    getSelectionManager() {\n      return this.__selectionManager;\n    },\n\n    /**\n     * Returns an array containing all TablePaneScrollers in this table.\n     *\n     * @return {qx.ui.table.pane.Scroller[]} all TablePaneScrollers in this table.\n     */\n    _getPaneScrollerArr() {\n      return this.__scrollerParent.getChildren();\n    },\n\n    /**\n     * Returns a TablePaneScroller of this table.\n     *\n     * @param metaColumn {Integer} the meta column to get the TablePaneScroller for.\n     * @return {qx.ui.table.pane.Scroller} the qx.ui.table.pane.Scroller.\n     */\n    getPaneScroller(metaColumn) {\n      return this._getPaneScrollerArr()[metaColumn];\n    },\n\n    /**\n     * Cleans up the meta columns.\n     *\n     * @param fromMetaColumn {Integer} the first meta column to clean up. All following\n     *      meta columns will be cleaned up, too. All previous meta columns will\n     *      stay unchanged. If 0 all meta columns will be cleaned up.\n     */\n    _cleanUpMetaColumns(fromMetaColumn) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      if (scrollerArr != null) {\n        for (var i = scrollerArr.length - 1; i >= fromMetaColumn; i--) {\n          scrollerArr[i].destroy();\n        }\n      }\n    },\n\n    /**\n     * Event handler. Called when the locale has changed.\n     *\n     * @param evt {Event} the event.\n     */\n    _onChangeLocale(evt) {\n      this.updateContent();\n      this._updateStatusBar();\n    },\n\n    // overridden\n    _onChangeTheme() {\n      super._onChangeTheme();\n\n      this.getDataRowRenderer().initThemeValues();\n      this.updateContent();\n      this._updateStatusBar();\n    },\n\n    /**\n     * Event handler. Called when the selection has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onSelectionChanged(evt) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onSelectionChanged();\n      }\n\n      this._updateStatusBar();\n    },\n\n    /**\n     * Event handler. Called when the table model meta data has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onTableModelMetaDataChanged(evt) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onTableModelMetaDataChanged();\n      }\n\n      this._updateStatusBar();\n    },\n\n    /**\n     * Event handler. Called when the table model data has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onTableModelDataChanged(evt) {\n      var data = evt.getData();\n\n      this._updateTableData(\n        data.firstRow,\n        data.lastRow,\n        data.firstColumn,\n        data.lastColumn,\n        data.removeStart,\n        data.removeCount\n      );\n    },\n\n    // overridden\n    _onContextMenuOpen(e) {\n      // This is Widget's context menu handler which typically retrieves\n      // and displays the menu as soon as it receives a \"contextmenu\" event.\n      // We want to allow the cellContextmenu handler to create the menu,\n      // so we'll override this method with a null one, and do the menu\n      // placement and display handling in our _onContextMenu method.\n    },\n\n    /**\n     * To update the table if the table model has changed and remove selection.\n     *\n     * @param firstRow {Integer} The index of the first row that has changed.\n     * @param lastRow {Integer} The index of the last row that has changed.\n     * @param firstColumn {Integer} The model index of the first column that has changed.\n     * @param lastColumn {Integer} The model index of the last column that has changed.\n     * @param removeStart {Integer ? null} The first index of the interval (including), to remove selection.\n     * @param removeCount {Integer ? null} The count of the interval, to remove selection.\n     */\n    _updateTableData(\n      firstRow,\n      lastRow,\n      firstColumn,\n      lastColumn,\n      removeStart,\n      removeCount\n    ) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      // update selection if rows were removed\n      if (removeCount) {\n        this.getSelectionModel().removeSelectionInterval(\n          removeStart,\n          removeStart + removeCount - 1,\n          true\n        );\n\n        // remove focus if the focused row has been removed\n        if (\n          this.__focusedRow >= removeStart &&\n          this.__focusedRow < removeStart + removeCount\n        ) {\n          this.setFocusedCell();\n        }\n      }\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onTableModelDataChanged(\n          firstRow,\n          lastRow,\n          firstColumn,\n          lastColumn\n        );\n      }\n\n      var rowCount = this.getTableModel().getRowCount();\n\n      if (rowCount != this.__lastRowCount) {\n        this.__lastRowCount = rowCount;\n\n        this._updateScrollBarVisibility();\n        this._updateStatusBar();\n\n        // ARIA attrs\n        this.getContentElement().setAttribute(\"aria-rowcount\", rowCount);\n      }\n\n      const colCount = this.getTableModel().getColumnCount();\n\n      if (colCount != this.__lastColCount) {\n        this.__lastColCount = colCount;\n\n        // ARIA attrs\n        this.getContentElement().setAttribute(\"aria-colcount\", colCount);\n      }\n    },\n\n    /**\n     * Event handler. Called when a TablePaneScroller has been scrolled vertically.\n     *\n     * @param evt {Map} the event.\n     */\n    _onScrollY(evt) {\n      if (!this.__internalChange) {\n        this.__internalChange = true;\n\n        // Set the same scroll position to all meta columns\n        var scrollerArr = this._getPaneScrollerArr();\n\n        for (var i = 0; i < scrollerArr.length; i++) {\n          scrollerArr[i].setScrollY(evt.getData());\n        }\n\n        this.__internalChange = false;\n      }\n    },\n\n    /**\n     * Event handler. Called when a key was pressed.\n     *\n     * @param evt {qx.event.type.KeySequence} the event.\n     * @deprecated {6.0} please use _onKeyDown instead!\n     */\n    _onKeyPress(evt) {\n      qx.log.Logger.deprecatedMethodWarning(\n        this._onKeyPress,\n        \"The method '_onKeyPress()' is deprecated. Please use '_onKeyDown()' instead.\"\n      );\n\n      qx.log.Logger.deprecateMethodOverriding(\n        this,\n        qx.ui.table.Table,\n        \"_onKeyPress\",\n        \"The method '_onKeyPress()' is deprecated. Please use '_onKeyDown()' instead.\"\n      );\n\n      this._onKeyDown(evt);\n    },\n    /**\n     * Event handler. Called when on key down event\n     *\n     * @param evt {qx.event.type.KeySequence} the event.\n     */\n    _onKeyDown(evt) {\n      if (!this.getEnabled()) {\n        return;\n      }\n\n      // No editing mode\n      var oldFocusedRow = this.__focusedRow;\n      var consumed = false;\n\n      // Handle keys that are independent from the modifiers\n      var identifier = evt.getKeyIdentifier();\n\n      if (this.isEditing()) {\n        // Editing mode\n        if (evt.getModifiers() == 0) {\n          switch (identifier) {\n            case \"Enter\":\n              this.stopEditing();\n              var oldFocusedRow = this.__focusedRow;\n              this.moveFocusedCell(0, 1);\n\n              if (this.__focusedRow != oldFocusedRow) {\n                consumed = this.startEditing();\n              }\n\n              break;\n\n            case \"Escape\":\n              this.cancelEditing();\n              this.focus();\n              break;\n\n            default:\n              consumed = false;\n              break;\n          }\n        }\n      } else {\n        consumed = true;\n        // No editing mode\n        if (evt.isCtrlPressed()) {\n          // Handle keys that depend on modifiers\n\n          switch (identifier) {\n            case \"A\": // Ctrl + A\n              var rowCount = this.getTableModel().getRowCount();\n\n              if (rowCount > 0) {\n                this.getSelectionModel().setSelectionInterval(0, rowCount - 1);\n              }\n\n              break;\n\n            default:\n              consumed = false;\n              break;\n          }\n        } else {\n          // Handle keys that are independent from the modifiers\n          switch (identifier) {\n            case \"Space\":\n              this.__selectionManager.handleSelectKeyDown(\n                this.__focusedRow,\n                evt\n              );\n\n              break;\n\n            case \"F2\":\n            case \"Enter\":\n              this.startEditing();\n              consumed = true;\n              break;\n\n            case \"Home\":\n              this.setFocusedCell(this.__focusedCol, 0, true);\n              break;\n\n            case \"End\":\n              var rowCount = this.getTableModel().getRowCount();\n              this.setFocusedCell(this.__focusedCol, rowCount - 1, true);\n              break;\n\n            case \"Left\":\n              this.moveFocusedCell(-1, 0);\n              break;\n\n            case \"Right\":\n              this.moveFocusedCell(1, 0);\n              break;\n\n            case \"Up\":\n              this.moveFocusedCell(0, -1);\n              break;\n\n            case \"Down\":\n              this.moveFocusedCell(0, 1);\n              break;\n\n            case \"PageUp\":\n            case \"PageDown\":\n              var scroller = this.getPaneScroller(0);\n              var pane = scroller.getTablePane();\n              var rowHeight = this.getRowHeight();\n              var direction = identifier == \"PageUp\" ? -1 : 1;\n              rowCount = pane.getVisibleRowCount() - 1;\n              scroller.setScrollY(\n                scroller.getScrollY() + direction * rowCount * rowHeight\n              );\n\n              this.moveFocusedCell(0, direction * rowCount);\n              break;\n\n            default:\n              consumed = false;\n          }\n        }\n      }\n\n      if (\n        oldFocusedRow != this.__focusedRow &&\n        this.getRowFocusChangeModifiesSelection()\n      ) {\n        // The focus moved -> Let the selection manager handle this event\n        this.__selectionManager.handleMoveKeyDown(this.__focusedRow, evt);\n      }\n\n      if (consumed) {\n        evt.preventDefault();\n        evt.stopPropagation();\n      }\n    },\n\n    /**\n     * Event handler. Called when the table gets the focus.\n     *\n     * @param evt {Map} the event.\n     */\n    _onFocusChanged(evt) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onFocusChanged();\n      }\n    },\n\n    /**\n     * Event handler. Called when the visibility of a column has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onColVisibilityChanged(evt) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onColVisibilityChanged();\n      }\n\n      var data = evt.getData();\n      if (\n        this.__columnMenuButtons != null &&\n        data.col != null &&\n        data.visible != null\n      ) {\n        this.__columnMenuButtons[data.col].setColumnVisible(data.visible);\n      }\n\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n    /**\n     * Event handler. Called when the width of a column has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onColWidthChanged(evt) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        var data = evt.getData();\n        scrollerArr[i].setColumnWidth(data.col, data.newWidth);\n      }\n\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n    /**\n     * Event handler. Called when the column order has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onColOrderChanged(evt) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onColOrderChanged();\n      }\n\n      // A column may have been moved between meta columns\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n    /**\n     * Gets the TablePaneScroller at a certain x position in the page. If there is\n     * no TablePaneScroller at this position, null is returned.\n     *\n     * @param pageX {Integer} the position in the page to check (in pixels).\n     * @return {qx.ui.table.pane.Scroller} the TablePaneScroller or null.\n     */\n    getTablePaneScrollerAtPageX(pageX) {\n      var metaCol = this._getMetaColumnAtPageX(pageX);\n      return metaCol != -1 ? this.getPaneScroller(metaCol) : null;\n    },\n\n    /**\n     * Sets the currently focused cell. A value of <code>null</code> hides the\n     * focus cell.\n     *\n     * @param col {Integer?null} the model index of the focused cell's column.\n     * @param row {Integer?null} the model index of the focused cell's row.\n     * @param scrollVisible {Boolean ? false} whether to scroll the new focused cell\n     *          visible.\n     */\n    setFocusedCell(col, row, scrollVisible) {\n      if (\n        !this.isEditing() &&\n        (col != this.__focusedCol || row != this.__focusedRow)\n      ) {\n        if (col === null) {\n          col = 0;\n        }\n\n        this.__focusedCol = col;\n        this.__focusedRow = row;\n\n        var scrollerArr = this._getPaneScrollerArr();\n\n        for (var i = 0; i < scrollerArr.length; i++) {\n          scrollerArr[i].setFocusedCell(col, row);\n        }\n\n        if (col != null && scrollVisible) {\n          this.scrollCellVisible(col, row);\n        }\n\n        // ARIA attrs\n        const cellId =\n          \"qooxdoo-table-cell-\" + this.toHashCode() + \"-\" + row + \"-\" + col;\n        this.getContentElement().setAttribute(\"aria-activedescendant\", cellId);\n      }\n    },\n\n    /**\n     * Resets (clears) the current selection\n     */\n    resetSelection() {\n      this.getSelectionModel().resetSelection();\n    },\n\n    /**\n     * Resets the focused cell.\n     */\n    resetCellFocus() {\n      this.setFocusedCell(null, null, false);\n    },\n\n    /**\n     * Returns the column of the currently focused cell.\n     *\n     * @return {Integer} the model index of the focused cell's column.\n     */\n    getFocusedColumn() {\n      return this.__focusedCol;\n    },\n\n    /**\n     * Returns the row of the currently focused cell.\n     *\n     * @return {Integer} the model index of the focused cell's column.\n     */\n    getFocusedRow() {\n      return this.__focusedRow;\n    },\n\n    /**\n     * Select whether the focused row is highlighted\n     *\n     * @param bHighlight {Boolean}\n     *   Flag indicating whether the focused row should be highlighted.\n     *\n     */\n    highlightFocusedRow(bHighlight) {\n      this.getDataRowRenderer().setHighlightFocusRow(bHighlight);\n    },\n\n    /**\n     * Remove the highlighting of the current focus row.\n     *\n     * This is used to temporarily remove the highlighting of the currently\n     * focused row, and is expected to be used most typically by adding a\n     * listener on the \"pointerout\" event, so that the focus highlighting is\n     * suspended when the pointer leaves the table:\n     *\n     *     table.addListener(\"pointerout\", table.clearFocusedRowHighlight);\n     *\n     * @param evt {qx.event.type.Pointer} Incoming pointer event\n     */\n    clearFocusedRowHighlight(evt) {\n      if (evt) {\n        var relatedTarget = evt.getRelatedTarget();\n        if (\n          relatedTarget instanceof qx.ui.table.pane.Pane ||\n          relatedTarget instanceof qx.ui.table.pane.FocusIndicator\n        ) {\n          return;\n        }\n      }\n\n      // Remove focus from any cell that has it\n      this.resetCellFocus();\n\n      // Now, for each pane scroller...\n      var scrollerArr = this._getPaneScrollerArr();\n      for (var i = 0; i < scrollerArr.length; i++) {\n        // ... repaint without focus.\n        scrollerArr[i].onFocusChanged();\n      }\n    },\n\n    /**\n     * Moves the focus.\n     *\n     * @param deltaX {Integer} The delta by which the focus should be moved on the x axis.\n     * @param deltaY {Integer} The delta by which the focus should be moved on the y axis.\n     */\n    moveFocusedCell(deltaX, deltaY) {\n      var col = this.__focusedCol;\n      var row = this.__focusedRow;\n\n      // could also be undefined [BUG #4676]. In that case default to first cell focus\n      if (\n        col === null ||\n        col === undefined ||\n        row === null ||\n        row === undefined\n      ) {\n        this.setFocusedCell(0, 0, true);\n        return;\n      }\n\n      if (deltaX != 0) {\n        var columnModel = this.getTableColumnModel();\n        var x = columnModel.getVisibleX(col);\n        var colCount = columnModel.getVisibleColumnCount();\n        x = qx.lang.Number.limit(x + deltaX, 0, colCount - 1);\n        col = columnModel.getVisibleColumnAtX(x);\n      }\n\n      if (deltaY != 0) {\n        var tableModel = this.getTableModel();\n        row = qx.lang.Number.limit(\n          row + deltaY,\n          0,\n          tableModel.getRowCount() - 1\n        );\n      }\n\n      this.setFocusedCell(col, row, true);\n    },\n\n    /**\n     * Scrolls a cell visible.\n     *\n     * @param col {Integer} the model index of the column the cell belongs to.\n     * @param row {Integer} the model index of the row the cell belongs to.\n     */\n    scrollCellVisible(col, row) {\n      // get the dom element\n      var elem = this.getContentElement().getDomElement();\n      // if the dom element is not available, the table hasn't been rendered\n      if (!elem) {\n        // postpone the scroll until the table has appeared\n        this.addListenerOnce(\n          \"appear\",\n          function () {\n            this.scrollCellVisible(col, row);\n          },\n          this\n        );\n      }\n\n      var columnModel = this.getTableColumnModel();\n      var x = columnModel.getVisibleX(col);\n\n      var metaColumn = this._getMetaColumnAtColumnX(x);\n\n      if (metaColumn != -1) {\n        this.getPaneScroller(metaColumn).scrollCellVisible(col, row);\n      }\n    },\n\n    /**\n     * Returns whether currently a cell is editing.\n     *\n     * @return {var} whether currently a cell is editing.\n     */\n    isEditing() {\n      if (this.__focusedCol != null) {\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\n        var metaColumn = this._getMetaColumnAtColumnX(x);\n        return this.getPaneScroller(metaColumn).isEditing();\n      }\n      return false;\n    },\n\n    /**\n     * Starts editing the currently focused cell. Does nothing if already editing\n     * or if the column is not editable.\n     *\n     * @return {Boolean} whether editing was started\n     */\n    startEditing() {\n      if (this.__focusedCol != null) {\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\n        var metaColumn = this._getMetaColumnAtColumnX(x);\n        var started = this.getPaneScroller(metaColumn).startEditing();\n        return started;\n      }\n\n      return false;\n    },\n\n    /**\n     * Stops editing and writes the editor's value to the model.\n     */\n    stopEditing() {\n      if (this.__focusedCol != null) {\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\n        var metaColumn = this._getMetaColumnAtColumnX(x);\n        this.getPaneScroller(metaColumn).stopEditing();\n      }\n    },\n\n    /**\n     * Stops editing without writing the editor's value to the model.\n     */\n    cancelEditing() {\n      if (this.__focusedCol != null) {\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\n        var metaColumn = this._getMetaColumnAtColumnX(x);\n        this.getPaneScroller(metaColumn).cancelEditing();\n      }\n    },\n\n    /**\n     * Update the table content of every attached table pane.\n     */\n    updateContent() {\n      var scrollerArr = this._getPaneScrollerArr();\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].getTablePane().updateContent(true);\n      }\n    },\n\n    /**\n     * Activates the blocker widgets on all column headers and the\n     * column button\n     */\n    blockHeaderElements() {\n      var scrollerArr = this._getPaneScrollerArr();\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].getHeader().getBlocker().blockContent(20);\n      }\n      this.getChildControl(\"column-button\").getBlocker().blockContent(20);\n    },\n\n    /**\n     * Deactivates the blocker widgets on all column headers and the\n     * column button\n     */\n    unblockHeaderElements() {\n      var scrollerArr = this._getPaneScrollerArr();\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].getHeader().getBlocker().unblock();\n      }\n      this.getChildControl(\"column-button\").getBlocker().unblock();\n    },\n\n    /**\n     * Gets the meta column at a certain x position in the page. If there is no\n     * meta column at this position, -1 is returned.\n     *\n     * @param pageX {Integer} the position in the page to check (in pixels).\n     * @return {Integer} the index of the meta column or -1.\n     */\n    _getMetaColumnAtPageX(pageX) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        var pos = scrollerArr[i].getContentLocation();\n\n        if (pageX >= pos.left && pageX <= pos.right) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    /**\n     * Returns the meta column a column is shown in. If the column is not shown at\n     * all, -1 is returned.\n     *\n     * @param visXPos {Integer} the visible x position of the column.\n     * @return {Integer} the meta column the column is shown in.\n     */\n    _getMetaColumnAtColumnX(visXPos) {\n      var metaColumnCounts = this.getMetaColumnCounts();\n      var rightXPos = 0;\n\n      for (var i = 0; i < metaColumnCounts.length; i++) {\n        var counts = metaColumnCounts[i];\n        rightXPos += counts;\n\n        if (counts == -1 || visXPos < rightXPos) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    /**\n     * Updates the text shown in the status bar.\n     */\n    _updateStatusBar() {\n      var tableModel = this.getTableModel();\n\n      if (this.getStatusBarVisible()) {\n        var selectedRowCount = this.getSelectionModel().getSelectedCount();\n        var rowCount = tableModel.getRowCount();\n\n        var text;\n\n        if (rowCount >= 0) {\n          if (selectedRowCount == 0) {\n            text = this.trn(\"one row\", \"%1 rows\", rowCount, rowCount);\n          } else {\n            text = this.trn(\n              \"one of one row\",\n              \"%1 of %2 rows\",\n              rowCount,\n              selectedRowCount,\n              rowCount\n            );\n          }\n        }\n\n        if (this.__additionalStatusBarText) {\n          if (text) {\n            text += this.__additionalStatusBarText;\n          } else {\n            text = this.__additionalStatusBarText;\n          }\n        }\n\n        if (text) {\n          this.getChildControl(\"statusbar\").setValue(text);\n        }\n      }\n    },\n\n    /**\n     * Updates the widths of all scrollers.\n     */\n    _updateScrollerWidths() {\n      // Give all scrollers except for the last one the wanted width\n      // (The last one has a flex with)\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        var isLast = i == scrollerArr.length - 1;\n        var width = scrollerArr[i].getTablePaneModel().getTotalWidth();\n        scrollerArr[i].setPaneWidth(width);\n\n        var flex = isLast ? 1 : 0;\n        scrollerArr[i].setLayoutProperties({ flex: flex });\n      }\n    },\n\n    /**\n     * Updates the visibility of the scrollbars in the meta columns.\n     */\n    _updateScrollBarVisibility() {\n      if (!this.getBounds()) {\n        return;\n      }\n\n      var horBar = qx.ui.table.pane.Scroller.HORIZONTAL_SCROLLBAR;\n      var verBar = qx.ui.table.pane.Scroller.VERTICAL_SCROLLBAR;\n      var scrollerArr = this._getPaneScrollerArr();\n\n      // Check which scroll bars are needed\n      var horNeeded = false;\n      var verNeeded = false;\n      var excludeScrollerScrollbarsIfNotNeeded;\n\n      // Determine whether we need to render horizontal scrollbars for meta\n      // columns that don't themselves actually require it\n      excludeScrollerScrollbarsIfNotNeeded =\n        this.getExcludeScrollerScrollbarsIfNotNeeded();\n\n      if (!excludeScrollerScrollbarsIfNotNeeded) {\n        for (var i = 0; i < scrollerArr.length; i++) {\n          var isLast = i == scrollerArr.length - 1;\n\n          // Only show the last vertical scrollbar\n          var bars = scrollerArr[i].getNeededScrollBars(horNeeded, !isLast);\n\n          if (bars & horBar) {\n            horNeeded = true;\n          }\n\n          if (isLast && bars & verBar) {\n            verNeeded = true;\n          }\n        }\n      }\n\n      // Set the needed scrollbars\n      for (var i = 0; i < scrollerArr.length; i++) {\n        isLast = i == scrollerArr.length - 1;\n\n        // If we don't want to include scrollbars for meta columns that don't\n        // require it, find out whether this meta column requires it.\n        if (excludeScrollerScrollbarsIfNotNeeded) {\n          horNeeded = !!(\n            scrollerArr[i].getNeededScrollBars(false, !isLast) & horBar\n          );\n\n          // Show the horizontal scrollbar if needed. Specify null to indicate\n          // that the scrollbar should be hidden rather than excluded.\n          scrollerArr[i].setHorizontalScrollBarVisible(horNeeded || null);\n        } else {\n          // Show the horizontal scrollbar if needed.\n          scrollerArr[i].setHorizontalScrollBarVisible(horNeeded);\n        }\n\n        // If this is the last meta-column...\n        if (isLast) {\n          // ... then get the current (old) use of vertical scroll bar\n          verNeeded = !!(\n            scrollerArr[i].getNeededScrollBars(false, false) & verBar\n          );\n\n          if (this.__hadVerticalScrollBar == null) {\n            this.__hadVerticalScrollBar =\n              scrollerArr[i].getVerticalScrollBarVisible();\n            this.__timer = qx.event.Timer.once(\n              function () {\n                // reset the last visible state of the vertical scroll bar\n                // in a timeout to prevent infinite loops.\n                this.__hadVerticalScrollBar = null;\n                this.__timer = null;\n              },\n              this,\n              0\n            );\n          }\n        }\n\n        scrollerArr[i].setVerticalScrollBarVisible(isLast && verNeeded);\n\n        // If this is the last meta-column and the use of a vertical scroll bar\n        // has changed...\n        if (isLast && verNeeded != this.__hadVerticalScrollBar) {\n          // ... then dispatch an event to any awaiting listeners\n          this.fireDataEvent(\"verticalScrollBarChanged\", verNeeded);\n        }\n      }\n    },\n\n    /**\n     * Initialize the column menu\n     */\n    _initColumnMenu() {\n      var tableModel = this.getTableModel();\n      var columnModel = this.getTableColumnModel();\n\n      var columnButton = this.getChildControl(\"column-button\");\n\n      // Remove all items from the menu. We'll rebuild it here.\n      columnButton.empty();\n\n      // Inform listeners who may want to insert menu items at the beginning\n      var menu = columnButton.getMenu();\n      var data = {\n        table: this,\n        menu: menu,\n        columnButton: columnButton\n      };\n\n      this.fireDataEvent(\"columnVisibilityMenuCreateStart\", data);\n\n      this.__columnMenuButtons = {};\n      for (var iCol = 0, l = tableModel.getColumnCount(); iCol < l; iCol++) {\n        var col = columnModel.getOverallColumnAtX(iCol);\n        var menuButton = columnButton.factory(\"menu-button\", {\n          text: tableModel.getColumnName(col),\n          column: col,\n          bVisible: columnModel.isColumnVisible(col)\n        });\n\n        qx.core.Assert.assertInterface(menuButton, qx.ui.table.IColumnMenuItem);\n\n        menuButton.addListener(\n          \"changeColumnVisible\",\n          this._createColumnVisibilityCheckBoxHandler(col),\n          this\n        );\n\n        this.__columnMenuButtons[col] = menuButton;\n      }\n\n      // Inform listeners who may want to insert menu items at the end\n      data = {\n        table: this,\n        menu: menu,\n        columnButton: columnButton\n      };\n\n      this.fireDataEvent(\"columnVisibilityMenuCreateEnd\", data);\n    },\n\n    /**\n     * Creates a handler for a check box of the column visibility menu.\n     *\n     * @param col {Integer} the model index of column to create the handler for.\n     * @return {Function} The created event handler.\n     */\n    _createColumnVisibilityCheckBoxHandler(col) {\n      return function (evt) {\n        var columnModel = this.getTableColumnModel();\n        columnModel.setColumnVisible(col, evt.getData());\n      };\n    },\n\n    /**\n     * Sets the width of a column.\n     *\n     * @param col {Integer} the model index of column.\n     * @param width {Integer} the new width in pixels.\n     */\n    setColumnWidth(col, width) {\n      this.getTableColumnModel().setColumnWidth(col, width);\n    },\n\n    /**\n     * Resize event handler\n     */\n    _onResize() {\n      this.fireEvent(\"tableWidthChanged\");\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n    // overridden\n    addListener(type, listener, self, capture) {\n      if (this.self(arguments).__redirectEvents[type]) {\n        // start the id with the type (needed for removing)\n        var id = [type];\n        for (var i = 0, arr = this._getPaneScrollerArr(); i < arr.length; i++) {\n          id.push(arr[i].addListener.apply(arr[i], arguments));\n        }\n        // join the id's of every event with \"\n        return id.join('\"');\n      } else {\n        return super.addListener(type, listener, self, capture);\n      }\n    },\n\n    // overridden\n    removeListener(type, listener, self, capture) {\n      if (this.self(arguments).__redirectEvents[type]) {\n        for (var i = 0, arr = this._getPaneScrollerArr(); i < arr.length; i++) {\n          arr[i].removeListener.apply(arr[i], arguments);\n        }\n      } else {\n        super.removeListener(type, listener, self, capture);\n      }\n    },\n\n    // overridden\n    removeListenerById(id) {\n      var ids = id.split('\"');\n      // type is the first entry of the connected id\n      var type = ids.shift();\n      if (this.self(arguments).__redirectEvents[type]) {\n        var removed = true;\n        for (var i = 0, arr = this._getPaneScrollerArr(); i < arr.length; i++) {\n          removed = arr[i].removeListenerById.call(arr[i], ids[i]) && removed;\n        }\n        return removed;\n      } else {\n        return super.removeListenerById(id);\n      }\n    },\n\n    destroy() {\n      this.getChildControl(\"column-button\").getMenu().destroy();\n      super.destroy();\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    // remove the event listener which handled the locale change\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().removeListener(\n        \"changeLocale\",\n        this._onChangeLocale,\n        this\n      );\n    }\n\n    // we allocated these objects on init so we have to clean them up.\n    var selectionModel = this.getSelectionModel();\n    if (selectionModel) {\n      selectionModel.dispose();\n    }\n\n    var dataRowRenderer = this.getDataRowRenderer();\n    if (dataRowRenderer) {\n      dataRowRenderer.dispose();\n    }\n\n    if (this.getTableModel() != null) {\n      this.getTableModel().removeListener(\n        \"metaDataChanged\",\n        this._onTableModelMetaDataChanged,\n        this\n      );\n\n      this.getTableModel().removeListener(\n        \"dataChanged\",\n        this._onTableModelDataChanged,\n        this\n      );\n    }\n\n    this._cleanUpMetaColumns(0);\n    this.getTableColumnModel().dispose();\n    this._disposeObjects(\n      \"__selectionManager\",\n      \"__scrollerParent\",\n      \"__emptyTableModel\",\n      \"__emptyTableModel\",\n      \"__columnModel\",\n      \"__timer\"\n    );\n\n    this._disposeMap(\"__columnMenuButtons\");\n  }\n});\n"
  ]
}