{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/ui/menu/ButtonLayout.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "layout",
    "Abstract",
    "members",
    "verifyLayoutProperty",
    "core",
    "Environment",
    "select",
    "item",
    "name",
    "value",
    "assert",
    "renderLayout",
    "availWidth",
    "availHeight",
    "padding",
    "children",
    "_getLayoutChildren",
    "child",
    "column",
    "columnChildren",
    "i",
    "l",
    "length",
    "getLayoutProperties",
    "menu",
    "__getMenu",
    "columns",
    "getColumnSizes",
    "spacing",
    "getSpacingX",
    "neededWidth",
    "lang",
    "Array",
    "sum",
    "left",
    "top",
    "Util",
    "hint",
    "getSizeHint",
    "childTop",
    "computeVerticalAlignOffset",
    "getAlignY",
    "height",
    "offsetLeft",
    "computeHorizontalAlignOffset",
    "getAlignX",
    "width",
    "getMarginLeft",
    "getMarginRight",
    "widget",
    "Menu",
    "getLayoutParent",
    "_computeSizeHint",
    "neededHeight",
    "Math",
    "max",
    "ButtonLayout"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Layout used for the menu buttons which may contain four elements. A icon,\n * a label, a shortcut text and an arrow (for a sub menu)\n *\n * @internal\n */\nqx.Class.define(\"qx.ui.menu.ButtonLayout\", {\n  extend: qx.ui.layout.Abstract,\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    // overridden\n    verifyLayoutProperty: qx.core.Environment.select(\"qx.debug\", {\n      true(item, name, value) {\n        this.assert(\n          name == \"column\",\n          \"The property '\" +\n            name +\n            \"' is not supported by the MenuButton layout!\"\n        );\n      },\n\n      false: null\n    }),\n\n    // overridden\n    renderLayout(availWidth, availHeight, padding) {\n      var children = this._getLayoutChildren();\n      var child;\n      var column;\n\n      var columnChildren = [];\n      for (var i = 0, l = children.length; i < l; i++) {\n        child = children[i];\n        column = child.getLayoutProperties().column;\n        columnChildren[column] = child;\n      }\n\n      var menu = this.__getMenu(children[0]);\n\n      var columns = menu.getColumnSizes();\n      var spacing = menu.getSpacingX();\n\n      // stretch label column\n      var neededWidth =\n        qx.lang.Array.sum(columns) + spacing * (columns.length - 1);\n      if (neededWidth < availWidth) {\n        columns[1] += availWidth - neededWidth;\n      }\n\n      var left = padding.left,\n        top = padding.top;\n      var Util = qx.ui.layout.Util;\n\n      for (var i = 0, l = columns.length; i < l; i++) {\n        child = columnChildren[i];\n\n        if (child) {\n          var hint = child.getSizeHint();\n          var childTop =\n            top +\n            Util.computeVerticalAlignOffset(\n              child.getAlignY() || \"middle\",\n              hint.height,\n              availHeight,\n              0,\n              0\n            );\n\n          var offsetLeft = Util.computeHorizontalAlignOffset(\n            child.getAlignX() || \"left\",\n            hint.width,\n            columns[i],\n            child.getMarginLeft(),\n            child.getMarginRight()\n          );\n\n          child.renderLayout(\n            left + offsetLeft,\n            childTop,\n            hint.width,\n            hint.height\n          );\n        }\n\n        if (columns[i] > 0) {\n          left += columns[i] + spacing;\n        }\n      }\n    },\n\n    /**\n     * Get the widget's menu\n     *\n     * @param widget {qx.ui.core.Widget} the widget to get the menu for\n     * @return {qx.ui.menu.Menu} the menu\n     */\n    __getMenu(widget) {\n      while (!(widget instanceof qx.ui.menu.Menu)) {\n        widget = widget.getLayoutParent();\n      }\n      return widget;\n    },\n\n    // overridden\n    _computeSizeHint() {\n      var children = this._getLayoutChildren();\n      var neededHeight = 0;\n      var neededWidth = 0;\n\n      for (var i = 0, l = children.length; i < l; i++) {\n        var hint = children[i].getSizeHint();\n        neededWidth += hint.width;\n        neededHeight = Math.max(neededHeight, hint.height);\n      }\n\n      return {\n        width: neededWidth,\n        height: neededHeight\n      };\n    }\n  }\n});\n"
  ]
}