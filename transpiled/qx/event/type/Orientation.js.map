{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/event/type/Orientation.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "event",
    "type",
    "Event",
    "members",
    "__orientation",
    "__mode",
    "init",
    "orientation",
    "mode",
    "clone",
    "embryo",
    "getOrientation",
    "isLandscape",
    "isPortrait",
    "Orientation"
  ],
  "mappings": ";;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,2BAAhB,EAA6C;AAC3CC,IAAAA,MAAM,EAAEN,EAAE,CAACO,KAAH,CAASC,IAAT,CAAcC,KADqB;;AAG3C;AACF;AACA;AACA;AACA;AAEEC,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAa,EAAE,IADR;AAEPC,MAAAA,SAAM,EAAE,IAFD;;AAIP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,IAZO,gBAYFC,WAZE,EAYWC,IAZX,EAYiB;AACtB,uEAAW,KAAX,EAAkB,KAAlB;AAEA,aAAKJ,SAAL,GAAqBG,WAArB;AACA,aAAKF,SAAL,GAAcG,IAAd;AAEA,eAAO,IAAP;AACD,OAnBM;;AAqBP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,KA/BO,iBA+BDC,MA/BC,EA+BO;AACZ,YAAID,KAAK,mEAAeC,MAAf,CAAT;AAEAD,QAAAA,KAAK,CAACL,SAAN,GAAsB,KAAKA,SAA3B;AACAK,QAAAA,KAAK,CAACJ,SAAN,GAAe,KAAKA,SAApB;AAEA,eAAOI,KAAP;AACD,OAtCM;;AAwCP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIE,MAAAA,cApDO,4BAoDU;AACf,eAAO,KAAKP,SAAZ;AACD,OAtDM;;AAwDP;AACJ;AACA;AACA;AACA;AACA;AACIQ,MAAAA,WA9DO,yBA8DO;AACZ,eAAO,KAAKP,SAAL,IAAe,WAAtB;AACD,OAhEM;;AAkEP;AACJ;AACA;AACA;AACA;AACA;AACIQ,MAAAA,UAxEO,wBAwEM;AACX,eAAO,KAAKR,SAAL,IAAe,UAAtB;AACD;AA1EM;AATkC,GAA7C;AApCAZ,EAAAA,EAAE,CAACO,KAAH,CAASC,IAAT,CAAca,WAAd,CAA0BlB,aAA1B,GAA0CA,aAA1C",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tino Butz (tbtz)\n\n   ======================================================================\n\n   This class contains code based on the following work:\n\n   * Unify Project\n\n     Homepage:\n       http://unify-project.org\n\n     Copyright:\n       2009-2010 Deutsche Telekom AG, Germany, http://telekom.com\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n************************************************************************ */\n\n/**\n * Orientation event object.\n */\nqx.Class.define(\"qx.event.type.Orientation\", {\n  extend: qx.event.type.Event,\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __orientation: null,\n    __mode: null,\n\n    /**\n     * Initialize the fields of the event. The event must be initialized before\n     * it can be dispatched.\n     *\n     * @param orientation {String} One of <code>0</code>, <code>90</code> or <code>-90</code>\n     * @param mode {String} <code>landscape</code> or <code>portrait</code>\n     * @return {qx.event.type.Orientation} The initialized event instance\n     */\n    init(orientation, mode) {\n      super.init(false, false);\n\n      this.__orientation = orientation;\n      this.__mode = mode;\n\n      return this;\n    },\n\n    /**\n     * Get a copy of this object\n     *\n     * @param embryo {qx.event.type.Orientation?null} Optional event class, which will\n     *     be configured using the data of this event instance. The event must be\n     *     an instance of this event class. If the data is <code>null</code>,\n     *     a new pooled instance is created.\n     *\n     * @return {qx.event.type.Orientation} a copy of this object\n     */\n    clone(embryo) {\n      var clone = super.clone(embryo);\n\n      clone.__orientation = this.__orientation;\n      clone.__mode = this.__mode;\n\n      return clone;\n    },\n\n    /**\n     * Returns the current orientation of the viewport in degree.\n     *\n     * All possible values and their meaning:\n     *\n     * * <code>0</code>: \"Portrait\"\n     * * <code>-90</code>: \"Landscape (right, screen turned clockwise)\"\n     * * <code>90</code>: \"Landscape (left, screen turned counterclockwise)\"\n     * * <code>180</code>: \"Portrait (upside-down portrait)\"\n     *\n     * @return {Integer} The current orientation in degree\n     */\n    getOrientation() {\n      return this.__orientation;\n    },\n\n    /**\n     * Whether the viewport orientation is currently in landscape mode.\n     *\n     * @return {Boolean} <code>true</code> when the viewport orientation\n     *     is currently in landscape mode.\n     */\n    isLandscape() {\n      return this.__mode == \"landscape\";\n    },\n\n    /**\n     * Whether the viewport orientation is currently in portrait mode.\n     *\n     * @return {Boolean} <code>true</code> when the viewport orientation\n     *     is currently in portrait mode.\n     */\n    isPortrait() {\n      return this.__mode == \"portrait\";\n    }\n  }\n});\n"
  ]
}