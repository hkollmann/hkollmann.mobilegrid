{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/event/type/Drag.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "event",
    "type",
    "Event",
    "members",
    "init",
    "cancelable",
    "originalEvent",
    "_native",
    "getNativeEvent",
    "_originalTarget",
    "getOriginalTarget",
    "clone",
    "embryo",
    "getDocumentLeft",
    "x",
    "pageX",
    "undefined",
    "pointerType",
    "_original",
    "changedTouches",
    "Math",
    "round",
    "win",
    "dom",
    "Node",
    "getWindow",
    "srcElement",
    "clientX",
    "bom",
    "Viewport",
    "getScrollLeft",
    "getDocumentTop",
    "y",
    "pageY",
    "clientY",
    "getScrollTop",
    "getManager",
    "Registration",
    "getTarget",
    "getHandler",
    "handler",
    "DragDrop",
    "addType",
    "addAction",
    "action",
    "supportsType",
    "supportsAction",
    "addData",
    "data",
    "getData",
    "getDataAsync",
    "getCurrentType",
    "getCurrentAction",
    "getDefaultPrevented",
    "getCurrentActionAsync",
    "setDropAllowed",
    "isAllowed",
    "getDragTarget",
    "stopSession",
    "clearSession",
    "Drag"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * Event object class for drag events\n */\nqx.Class.define(\"qx.event.type.Drag\", {\n  extend: qx.event.type.Event,\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /**\n     * Initialize the fields of the event. The event must be initialized before\n     * it can be dispatched.\n     *\n     * @param cancelable {Boolean?false} Whether or not an event can have its default\n     *     action prevented. The default action can either be the browser's\n     *     default action of a native event (e.g. open the context menu on a\n     *     right click) or the default action of a qooxdoo class (e.g. close\n     *     the window widget). The default action can be prevented by calling\n     *     {@link qx.event.type.Event#preventDefault}\n     * @param originalEvent {qx.event.type.Track} The original (mouse) event to use\n     * @return {qx.event.type.Event} The initialized event instance\n     */\n    init(cancelable, originalEvent) {\n      super.init(true, cancelable);\n\n      if (originalEvent) {\n        this._native = originalEvent.getNativeEvent() || null;\n        this._originalTarget = originalEvent.getOriginalTarget() || null;\n      } else {\n        this._native = null;\n        this._originalTarget = null;\n      }\n\n      return this;\n    },\n\n    // overridden\n    clone(embryo) {\n      var clone = super.clone(embryo);\n\n      clone._native = this._native;\n\n      return clone;\n    },\n\n    /**\n     * Get the horizontal position at which the event occurred relative to the\n     * left of the document. This property takes into account any scrolling of\n     * the page.\n     *\n     * @return {Integer} The horizontal mouse position in the document.\n     */\n    getDocumentLeft() {\n      if (this._native == null) {\n        return 0;\n      }\n      var x = this._native.pageX;\n      if (x !== undefined) {\n        // iOS 6 does not copy pageX over to the fake pointer event\n        if (x == 0 && this._native.pointerType == \"touch\") {\n          x = this._native._original.changedTouches[0].pageX || 0;\n        }\n        return Math.round(x);\n      } else {\n        var win = qx.dom.Node.getWindow(this._native.srcElement);\n        return (\n          Math.round(this._native.clientX) + qx.bom.Viewport.getScrollLeft(win)\n        );\n      }\n    },\n\n    /**\n     * Get the vertical position at which the event occurred relative to the\n     * top of the document. This property takes into account any scrolling of\n     * the page.\n     *\n     * @return {Integer} The vertical mouse position in the document.\n     */\n    getDocumentTop() {\n      if (this._native == null) {\n        return 0;\n      }\n\n      var y = this._native.pageY;\n      if (y !== undefined) {\n        // iOS 6 does not copy pageY over to the fake pointer event\n        if (y == 0 && this._native.pointerType == \"touch\") {\n          y = this._native._original.changedTouches[0].pageY || 0;\n        }\n        return Math.round(y);\n      } else {\n        var win = qx.dom.Node.getWindow(this._native.srcElement);\n        return (\n          Math.round(this._native.clientY) + qx.bom.Viewport.getScrollTop(win)\n        );\n      }\n    },\n\n    /**\n     * Returns the drag&drop event handler responsible for the target\n     *\n     * @return {qx.event.handler.DragDrop} The drag&drop handler\n     */\n    getManager() {\n      return qx.event.Registration.getManager(this.getTarget()).getHandler(\n        qx.event.handler.DragDrop\n      );\n    },\n\n    /**\n     * Used during <code>dragstart</code> listener to\n     * inform the manager about supported data types.\n     *\n     * @param type {String} Data type to add to list of supported types\n     */\n    addType(type) {\n      this.getManager().addType(type);\n    },\n\n    /**\n     * Used during <code>dragstart</code> listener to\n     * inform the manager about supported drop actions.\n     *\n     * @param action {String} Action to add to the list of supported actions\n     */\n    addAction(action) {\n      this.getManager().addAction(action);\n    },\n\n    /**\n     * Whether the given type is supported by the drag\n     * target (source target).\n     *\n     * This is used in the event listeners for <code>dragover</code>\n     * or <code>dragdrop</code>.\n     *\n     * @param type {String} The type to look for\n     * @return {Boolean} Whether the given type is supported\n     */\n    supportsType(type) {\n      return this.getManager().supportsType(type);\n    },\n\n    /**\n     * Whether the given action is supported by the drag\n     * target (source target).\n     *\n     * This is used in the event listeners for <code>dragover</code>\n     * or <code>dragdrop</code>.\n     *\n     * @param action {String} The action to look for\n     * @return {Boolean} Whether the given action is supported\n     */\n    supportsAction(action) {\n      return this.getManager().supportsAction(action);\n    },\n\n    /**\n     * Adds data of the given type to the internal storage. The data\n     * is available until the <code>dragend</code> event is fired.\n     *\n     * @param type {String} Any valid type\n     * @param data {var} Any data to store\n     */\n    addData(type, data) {\n      this.getManager().addData(type, data);\n    },\n\n    /**\n     * Returns the data of the given type. Used in the <code>drop</code> listener.\n     *\n     * Note that this is a synchronous method and if any of the drag and drop\n     * events handlers are implemented using Promises, this may fail; @see\n     * `getDataAsync`.\n     *\n     * @param type {String} Any of the supported types.\n     * @return {var} The data for the given type\n     */\n    getData(type) {\n      return this.getManager().getData(type);\n    },\n\n    /**\n     * Returns the data of the given type. Used in the <code>drop</code> listener.\n     *\n     * @param type {String} Any of the supported types.\n     * @return {qx.Promise|var} The data for the given type\n     */\n    getDataAsync(type) {\n      return this.getManager().getDataAsync(type);\n    },\n\n    /**\n     * Returns the type which was requested last, to be used\n     * in the <code>droprequest</code> listener.\n     *\n     * @return {String} The last requested data type\n     */\n    getCurrentType() {\n      return this.getManager().getCurrentType();\n    },\n\n    /**\n     * Returns the currently selected action. Depends on the\n     * supported actions of the source target and the modification\n     * keys pressed by the user.\n     *\n     * Used in the <code>droprequest</code> listener.\n     *\n     * @return {String} The action. May be one of <code>move</code>,\n     *    <code>copy</code> or <code>alias</code>.\n     */\n    getCurrentAction() {\n      if (this.getDefaultPrevented()) {\n        return null;\n      }\n      return this.getManager().getCurrentAction();\n    },\n\n    /**\n     * Returns the currently selected action. Depends on the\n     * supported actions of the source target and the modification\n     * keys pressed by the user.\n     *\n     * Used in the <code>droprequest</code> listener.\n     *\n     * @return {qx.Promise|String} The action. May be one of <code>move</code>,\n     *    <code>copy</code> or <code>alias</code>.\n     */\n    getCurrentActionAsync() {\n      if (this.getDefaultPrevented()) {\n        return null;\n      }\n      return this.getManager().getCurrentActionAsync();\n    },\n\n    /**\n     * Whether the current drop target allows the current drag target.\n     *\n     * This can be called from within the \"drag\" event to enable/disable\n     * a drop target selectively, for example based on the child item,\n     * above and beyond the one-time choice made by the the \"dragover\"\n     * event for the droppable widget itself.\n     *\n     * @param isAllowed {Boolean} False if a drop should be disallowed\n     */\n    setDropAllowed(isAllowed) {\n      this.getManager().setDropAllowed(isAllowed);\n    },\n\n    /**\n     * Returns the target which has been initially tapped on.\n     * @return {qx.ui.core.Widget} The tapped widget.\n     */\n    getDragTarget() {\n      return this.getManager().getDragTarget();\n    },\n\n    /**\n     * Stops the drag&drop session and fires a <code>dragend</code> event.\n     */\n    stopSession() {\n      this.getManager().clearSession();\n    }\n  }\n});\n"
  ]
}