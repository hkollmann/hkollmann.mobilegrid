{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/event/type/Pointer.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "event",
    "type",
    "Mouse",
    "members",
    "_cloneNativeEvent",
    "nativeEvent",
    "clone",
    "pointerId",
    "width",
    "height",
    "pressure",
    "tiltX",
    "tiltY",
    "pointerType",
    "isPrimary",
    "_original",
    "MSPOINTER_TYPE_MOUSE",
    "MSPOINTER_TYPE_PEN",
    "MSPOINTER_TYPE_TOUCH",
    "getDocumentLeft",
    "x",
    "getPointerType",
    "_native",
    "undefined",
    "Math",
    "round",
    "changedTouches",
    "pageX",
    "getDocumentTop",
    "y",
    "pageY",
    "getPointerId",
    "getWidth",
    "getHeight",
    "getPressure",
    "getTiltX",
    "getTiltY",
    "getOriginalTarget",
    "orig",
    "indexOf",
    "document",
    "elementFromPoint",
    "clientX",
    "clientY",
    "ex",
    "bom",
    "Event",
    "getTarget",
    "Pointer"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2014 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n\n************************************************************************ */\n\n/**\n * Pointer event object.\n *\n * the interface of this class is based on the pointer event interface:\n * http://www.w3.org/TR/pointerevents/\n */\nqx.Class.define(\"qx.event.type.Pointer\", {\n  extend: qx.event.type.Mouse,\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    // overridden\n    _cloneNativeEvent(nativeEvent, clone) {\n      clone = super._cloneNativeEvent(nativeEvent, clone);\n\n      clone.pointerId = nativeEvent.pointerId;\n      clone.width = nativeEvent.width;\n      clone.height = nativeEvent.height;\n      clone.pressure = nativeEvent.pressure;\n      clone.tiltX = nativeEvent.tiltX;\n      clone.tiltY = nativeEvent.tiltY;\n      clone.pointerType = nativeEvent.pointerType;\n      clone.isPrimary = nativeEvent.isPrimary;\n      clone._original = nativeEvent._original;\n      clone.MSPOINTER_TYPE_MOUSE = nativeEvent.MSPOINTER_TYPE_MOUSE;\n      clone.MSPOINTER_TYPE_PEN = nativeEvent.MSPOINTER_TYPE_PEN;\n      clone.MSPOINTER_TYPE_TOUCH = nativeEvent.MSPOINTER_TYPE_TOUCH;\n\n      return clone;\n    },\n\n    // overridden\n    getDocumentLeft() {\n      var x = super.getDocumentLeft();\n      // iOS 6 does not copy pageX over to the fake pointer event\n      if (\n        x == 0 &&\n        this.getPointerType() == \"touch\" &&\n        this._native._original !== undefined\n      ) {\n        x = Math.round(this._native._original.changedTouches[0].pageX) || 0;\n      }\n      return x;\n    },\n\n    // overridden\n    getDocumentTop() {\n      var y = super.getDocumentTop();\n      // iOS 6 does not copy pageY over to the fake pointer event\n      if (\n        y == 0 &&\n        this.getPointerType() == \"touch\" &&\n        this._native._original !== undefined\n      ) {\n        y = Math.round(this._native._original.changedTouches[0].pageY) || 0;\n      }\n      return y;\n    },\n\n    /**\n     * Returns a unique identified for the pointer. This id is\n     * unique for all active pointers.\n     *\n     * @return {Number} The unique id.\n     */\n    getPointerId() {\n      return this._native.pointerId || 0;\n    },\n\n    /**\n     * Returns the contact geometry in it's width.\n     *\n     * @return {Number} The number of pixels (width) of the contact geometry.\n     */\n    getWidth() {\n      return this._native.width || 0;\n    },\n\n    /**\n     * Returns the contact geometry in it's height.\n     *\n     * @return {Number} The number of pixels (height) of the contact geometry.\n     */\n    getHeight() {\n      return this._native.height || 0;\n    },\n\n    /**\n     * Returns the pressure of the pointer in a rage from 0 to 1.\n     *\n     * @return {Number} <code>1</code> for full pressure. The default is 0.\n     */\n    getPressure() {\n      return this._native.pressure || 0;\n    },\n\n    /**\n     * Returns the plane angle in degrees between the Y-Z plane and the\n     * plane containing e.g. the stylus and the Y axis.\n     *\n     * @return {Number} A value between -90 and 90. The default is 0.\n     */\n    getTiltX() {\n      return this._native.tiltX || 0;\n    },\n\n    /**\n     * Returns the plane angle in degrees between the X-Z plane and the\n     * plane containing e.g. the stylus and the X axis.\n     *\n     * @return {Number} A value between -90 and 90. The default is 0.\n     */\n    getTiltY() {\n      return this._native.tiltY || 0;\n    },\n\n    // overridden\n    getOriginalTarget() {\n      if (this._native && this._native._original) {\n        // fake pointer events\n        var orig = this._native._original;\n        // In IE8, the original event can be a DispCEventObj which throws an\n        // exception when trying to access its properties.\n        try {\n          // touch events have a wrong target compared to mouse events\n          if (orig.type.indexOf(\"touch\") == 0) {\n            if (orig.changedTouches[0]) {\n              return document.elementFromPoint(\n                orig.changedTouches[0].clientX,\n                orig.changedTouches[0].clientY\n              );\n            }\n          }\n        } catch (ex) {\n          return qx.bom.Event.getTarget(this._native);\n        }\n        return qx.bom.Event.getTarget(orig);\n      } else if (this._native) {\n        // native pointer events\n        return qx.bom.Event.getTarget(this._native);\n      }\n      return super.getOriginalTarget();\n    },\n\n    /**\n     * Returns the device type which the event triggered. This can be one\n     * of the following strings: <code>mouse</code>, <code>wheel</code>,\n     * <code>pen</code> or <code>touch</code>.\n     *\n     * @return {String} The type of the pointer.\n     */\n    getPointerType() {\n      if (typeof this._native.pointerType == \"string\") {\n        return this._native.pointerType;\n      }\n\n      if (typeof this._native.pointerType == \"number\") {\n        if (this._native.pointerType == this._native.MSPOINTER_TYPE_MOUSE) {\n          return \"mouse\";\n        }\n        if (this._native.pointerType == this._native.MSPOINTER_TYPE_PEN) {\n          return \"pen\";\n        }\n        if (this._native.pointerType == this._native.MSPOINTER_TYPE_TOUCH) {\n          return \"touch\";\n        }\n      }\n\n      return \"\";\n    },\n\n    /**\n     * Returns whether the pointer is the primary pointer.\n     *\n     * @return {Boolean} <code>true</code>, if it's the primary pointer.\n     */\n    isPrimary() {\n      return !!this._native.isPrimary;\n    }\n  }\n});\n"
  ]
}