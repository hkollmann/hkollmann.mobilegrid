{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/event/util/Keyboard.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "specialCharCodeMap",
    "numpadToCharCode",
    "charCodeAt",
    "keyCodeToIdentifierMap",
    "core",
    "Environment",
    "get",
    "charCodeA",
    "charCodeZ",
    "charCode0",
    "charCode9",
    "keyCodeToIdentifier",
    "keyCode",
    "isIdentifiableKeyCode",
    "numPadKeyCode",
    "String",
    "fromCharCode",
    "charCodeToIdentifier",
    "charCode",
    "toUpperCase",
    "isNonPrintableKeyCode",
    "isValidKeyIdentifier",
    "keyIdentifier",
    "identifierToKeyCodeMap",
    "length",
    "isPrintableKeyIdentifier",
    "defer",
    "key",
    "parseInt",
    "event",
    "util",
    "Keyboard"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Utilities for working with character codes and key identifiers\n */\nqx.Bootstrap.define(\"qx.event.util.Keyboard\", {\n  statics: {\n    /*\n    ---------------------------------------------------------------------------\n      KEY MAPS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @type {Map} maps the charcodes of special printable keys to key identifiers\n     *\n     * @lint ignoreReferenceField(specialCharCodeMap)\n     */\n    specialCharCodeMap: {\n      8: \"Backspace\", // The Backspace (Back) key.\n      9: \"Tab\", // The Horizontal Tabulation (Tab) key.\n\n      //   Note: This key identifier is also used for the\n      //   Return (Macintosh numpad) key.\n      13: \"Enter\", // The Enter key.\n      27: \"Escape\", // The Escape (Esc) key.\n      32: \"Space\" // The Space (Spacebar) key.\n    },\n\n    /**\n     * @type {Map} maps the keycodes of the numpad keys to the right charcodes\n     *\n     * @lint ignoreReferenceField(numpadToCharCode)\n     */\n    numpadToCharCode: {\n      96: \"0\".charCodeAt(0),\n      97: \"1\".charCodeAt(0),\n      98: \"2\".charCodeAt(0),\n      99: \"3\".charCodeAt(0),\n      100: \"4\".charCodeAt(0),\n      101: \"5\".charCodeAt(0),\n      102: \"6\".charCodeAt(0),\n      103: \"7\".charCodeAt(0),\n      104: \"8\".charCodeAt(0),\n      105: \"9\".charCodeAt(0),\n      106: \"*\".charCodeAt(0),\n      107: \"+\".charCodeAt(0),\n      109: \"-\".charCodeAt(0),\n      110: \",\".charCodeAt(0),\n      111: \"/\".charCodeAt(0)\n    },\n\n    /**\n     * @type {Map} maps the keycodes of non printable keys to key identifiers\n     *\n     * @lint ignoreReferenceField(keyCodeToIdentifierMap)\n     */\n    keyCodeToIdentifierMap: {\n      16: \"Shift\", // The Shift key.\n      17: \"Control\", // The Control (Ctrl) key.\n      18: \"Alt\", // The Alt (Menu) key.\n      20: \"CapsLock\", // The CapsLock key\n      224: \"Meta\", // The Meta key. (Apple Meta and Windows key)\n\n      37: \"Left\", // The Left Arrow key.\n      38: \"Up\", // The Up Arrow key.\n      39: \"Right\", // The Right Arrow key.\n      40: \"Down\", // The Down Arrow key.\n\n      33: \"PageUp\", // The Page Up key.\n      34: \"PageDown\", // The Page Down (Next) key.\n\n      35: \"End\", // The End key.\n      36: \"Home\", // The Home key.\n\n      45: \"Insert\", // The Insert (Ins) key. (Does not fire in Opera/Win)\n      46: \"Delete\", // The Delete (Del) Key.\n\n      112: \"F1\", // The F1 key.\n      113: \"F2\", // The F2 key.\n      114: \"F3\", // The F3 key.\n      115: \"F4\", // The F4 key.\n      116: \"F5\", // The F5 key.\n      117: \"F6\", // The F6 key.\n      118: \"F7\", // The F7 key.\n      119: \"F8\", // The F8 key.\n      120: \"F9\", // The F9 key.\n      121: \"F10\", // The F10 key.\n      122: \"F11\", // The F11 key.\n      123: \"F12\", // The F12 key.\n\n      144: \"NumLock\", // The Num Lock key.\n      44: \"PrintScreen\", // The Print Screen (PrintScrn, SnapShot) key.\n      145: \"Scroll\", // The scroll lock key\n      19: \"Pause\", // The pause/break key\n      // The left Windows Logo key or left cmd key\n      91: qx.core.Environment.get(\"os.name\") == \"osx\" ? \"cmd\" : \"Win\",\n      92: \"Win\", // The right Windows Logo key or left cmd key\n      // The Application key (Windows Context Menu) or right cmd key\n      93: qx.core.Environment.get(\"os.name\") == \"osx\" ? \"cmd\" : \"Apps\"\n    },\n\n    /** char code for capital A */\n    charCodeA: \"A\".charCodeAt(0),\n    /** char code for capital Z */\n    charCodeZ: \"Z\".charCodeAt(0),\n    /** char code for 0 */\n    charCode0: \"0\".charCodeAt(0),\n    /** char code for 9 */\n    charCode9: \"9\".charCodeAt(0),\n\n    /**\n     * converts a keyboard code to the corresponding identifier\n     *\n     * @param keyCode {Integer} key code\n     * @return {String} key identifier\n     */\n    keyCodeToIdentifier(keyCode) {\n      if (this.isIdentifiableKeyCode(keyCode)) {\n        var numPadKeyCode = this.numpadToCharCode[keyCode];\n\n        if (numPadKeyCode) {\n          return String.fromCharCode(numPadKeyCode);\n        }\n\n        return (\n          this.keyCodeToIdentifierMap[keyCode] ||\n          this.specialCharCodeMap[keyCode] ||\n          String.fromCharCode(keyCode)\n        );\n      } else {\n        return \"Unidentified\";\n      }\n    },\n\n    /**\n     * converts a character code to the corresponding identifier\n     *\n     * @param charCode {String} character code\n     * @return {String} key identifier\n     */\n    charCodeToIdentifier(charCode) {\n      return (\n        this.specialCharCodeMap[charCode] ||\n        String.fromCharCode(charCode).toUpperCase()\n      );\n    },\n\n    /**\n     * Check whether the keycode can be reliably detected in keyup/keydown events\n     *\n     * @param keyCode {String} key code to check.\n     * @return {Boolean} Whether the keycode can be reliably detected in keyup/keydown events.\n     */\n    isIdentifiableKeyCode(keyCode) {\n      if (keyCode >= this.charCodeA && keyCode <= this.charCodeZ) {\n        return true;\n      }\n\n      // 0-9\n      if (keyCode >= this.charCode0 && keyCode <= this.charCode9) {\n        return true;\n      }\n\n      // Enter, Space, Tab, Backspace\n      if (this.specialCharCodeMap[keyCode]) {\n        return true;\n      }\n\n      // Numpad\n      if (this.numpadToCharCode[keyCode]) {\n        return true;\n      }\n\n      // non printable keys\n      if (this.isNonPrintableKeyCode(keyCode)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Checks whether the keyCode represents a non printable key\n     *\n     * @param keyCode {String} key code to check.\n     * @return {Boolean} Whether the keyCode represents a non printable key.\n     */\n    isNonPrintableKeyCode(keyCode) {\n      return this.keyCodeToIdentifierMap[keyCode] ? true : false;\n    },\n\n    /**\n     * Checks whether a given string is a valid keyIdentifier\n     *\n     * @param keyIdentifier {String} The key identifier.\n     * @return {Boolean} whether the given string is a valid keyIdentifier\n     */\n    isValidKeyIdentifier(keyIdentifier) {\n      if (this.identifierToKeyCodeMap[keyIdentifier]) {\n        return true;\n      }\n\n      if (keyIdentifier.length != 1) {\n        return false;\n      }\n\n      if (keyIdentifier >= \"0\" && keyIdentifier <= \"9\") {\n        return true;\n      }\n\n      if (keyIdentifier >= \"A\" && keyIdentifier <= \"Z\") {\n        return true;\n      }\n\n      switch (keyIdentifier) {\n        case \"+\":\n        case \"-\":\n        case \"*\":\n        case \"/\":\n        case \",\":\n          return true;\n\n        default:\n          return false;\n      }\n    },\n\n    /**\n     * Checks whether a given string is a printable keyIdentifier.\n     *\n     * @param keyIdentifier {String} The key identifier.\n     * @return {Boolean} whether the given string is a printable keyIdentifier.\n     */\n    isPrintableKeyIdentifier(keyIdentifier) {\n      if (keyIdentifier === \"Space\") {\n        return true;\n      } else {\n        return this.identifierToKeyCodeMap[keyIdentifier] ? false : true;\n      }\n    }\n  },\n\n  defer(statics) {\n    // construct inverse of keyCodeToIdentifierMap\n    if (!statics.identifierToKeyCodeMap) {\n      statics.identifierToKeyCodeMap = {};\n\n      for (var key in statics.keyCodeToIdentifierMap) {\n        statics.identifierToKeyCodeMap[statics.keyCodeToIdentifierMap[key]] =\n          parseInt(key, 10);\n      }\n\n      for (var key in statics.specialCharCodeMap) {\n        statics.identifierToKeyCodeMap[statics.specialCharCodeMap[key]] =\n          parseInt(key, 10);\n      }\n    }\n  }\n});\n"
  ]
}