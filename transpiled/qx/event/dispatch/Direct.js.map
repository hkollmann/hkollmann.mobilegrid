{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/event/dispatch/Direct.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "event",
    "IEventDispatcher",
    "construct",
    "manager",
    "_manager",
    "statics",
    "PRIORITY",
    "Registration",
    "PRIORITY_LAST",
    "members",
    "canDispatchEvent",
    "target",
    "type",
    "getBubbles",
    "dispatchEvent",
    "setEventPhase",
    "Event",
    "AT_TARGET",
    "tracker",
    "self",
    "listeners",
    "getListeners",
    "forEach",
    "listener",
    "isBlacklisted",
    "unique",
    "context",
    "Utils",
    "then",
    "handler",
    "call",
    "promise",
    "defer",
    "addDispatcher",
    "dispatch",
    "Direct"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,0BAAhB,EAA4C;AAC1CC,IAAAA,MAAM,EAAEN,EAAE,CAACO,IAAH,CAAQC,MAD0B;AAE1CC,IAAAA,SAAS,EAAET,EAAE,CAACU,KAAH,CAASC,gBAFsB;;AAI1C;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACEC,IAAAA,SAf0C,qBAehCC,OAfgC,EAevB;AACjB,WAAKC,QAAL,GAAgBD,OAAhB;AACD,KAjByC;;AAmB1C;AACF;AACA;AACA;AACA;AAEEE,IAAAA,OAAO,EAAE;AACP;AACAC,MAAAA,QAAQ,EAAEhB,EAAE,CAACU,KAAH,CAASO,YAAT,CAAsBC;AAFzB,KAzBiC;;AA8B1C;AACF;AACA;AACA;AACA;AAEEC,IAAAA,OAAO,EAAE;AACP;AACJ;AACA;AACA;AACA;AAEI;AACAC,MAAAA,gBARO,4BAQUC,MARV,EAQkBX,KARlB,EAQyBY,IARzB,EAQ+B;AACpC,eAAO,CAACZ,KAAK,CAACa,UAAN,EAAR;AACD,OAVM;AAYP;AACAC,MAAAA,aAbO,yBAaOH,MAbP,EAaeX,KAbf,EAasBY,IAbtB,EAa4B;AA8BjCZ,QAAAA,KAAK,CAACe,aAAN,CAAoBzB,EAAE,CAACU,KAAH,CAASY,IAAT,CAAcI,KAAd,CAAoBC,SAAxC;AAEA,YAAIC,OAAO,GAAG,EAAd;AACA,YAAIC,IAAI,GAAG,IAAX;;AACA,YAAIC,SAAS,GAAG,KAAKhB,QAAL,CAAciB,YAAd,CAA2BV,MAA3B,EAAmCC,IAAnC,EAAyC,KAAzC,CAAhB;;AACA,YAAIQ,SAAJ,EAAe;AACbA,UAAAA,SAAS,CAACE,OAAV,CAAkB,UAAUC,QAAV,EAAoB;AACpC,gBAAIJ,IAAI,CAACf,QAAL,CAAcoB,aAAd,CAA4BD,QAAQ,CAACE,MAArC,CAAJ,EAAkD;AAChD;AACD;;AACD,gBAAIC,OAAO,GAAGH,QAAQ,CAACG,OAAT,IAAoBf,MAAlC;AAqBArB,YAAAA,EAAE,CAACU,KAAH,CAAS2B,KAAT,CAAeC,IAAf,CAAoBV,OAApB,EAA6B,YAAY;AACvC,qBAAOK,QAAQ,CAACM,OAAT,CAAiBC,IAAjB,CAAsBJ,OAAtB,EAA+B1B,KAA/B,CAAP;AACD,aAFD;AAGD,WA5BD;AA6BD;;AAED,eAAOkB,OAAO,CAACa,OAAf;AACD;AAjFM,KApCiC;;AAwH1C;AACF;AACA;AACA;AACA;AAEEC,IAAAA,KA9H0C,iBA8HpC3B,OA9HoC,EA8H3B;AACbf,MAAAA,EAAE,CAACU,KAAH,CAASO,YAAT,CAAsB0B,aAAtB,CAAoC5B,OAApC;AACD;AAhIyC,GAA5C;AArBAf,EAAAA,EAAE,CAACU,KAAH,CAASkC,QAAT,CAAkBC,MAAlB,CAAyB1C,aAAzB,GAAyCA,aAAzC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Dispatches events directly on the event target (no bubbling nor capturing).\n */\nqx.Class.define(\"qx.event.dispatch.Direct\", {\n  extend: qx.core.Object,\n  implement: qx.event.IEventDispatcher,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Create a new instance\n   *\n   * @param manager {qx.event.Manager} Event manager for the window to use\n   */\n  construct(manager) {\n    this._manager = manager;\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** @type {Integer} Priority of this dispatcher */\n    PRIORITY: qx.event.Registration.PRIORITY_LAST\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /*\n    ---------------------------------------------------------------------------\n      EVENT DISPATCHER INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // interface implementation\n    canDispatchEvent(target, event, type) {\n      return !event.getBubbles();\n    },\n\n    // interface implementation\n    dispatchEvent(target, event, type) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (target instanceof qx.core.Object) {\n          var expectedEventClassName = qx.Class.getEventType(\n            target.constructor,\n            type\n          );\n\n          var expectedEventClass = qx.Class.getByName(expectedEventClassName);\n          if (!expectedEventClass) {\n            this.error(\n              \"The event type '\" +\n                type +\n                \"' declared in the class '\" +\n                target.constructor +\n                \" is not an available class': \" +\n                expectedEventClassName\n            );\n          } else if (!(event instanceof expectedEventClass)) {\n            this.error(\n              \"Expected event type to be instanceof '\" +\n                expectedEventClassName +\n                \"' but found '\" +\n                event.classname +\n                \"'\"\n            );\n          }\n        }\n      }\n\n      event.setEventPhase(qx.event.type.Event.AT_TARGET);\n\n      var tracker = {};\n      var self = this;\n      var listeners = this._manager.getListeners(target, type, false);\n      if (listeners) {\n        listeners.forEach(function (listener) {\n          if (self._manager.isBlacklisted(listener.unique)) {\n            return;\n          }\n          var context = listener.context || target;\n\n          if (qx.core.Environment.get(\"qx.debug\")) {\n            // warn if the context is disposed\n            if (\n              context &&\n              context.isDisposed &&\n              context.isDisposed() &&\n              !context.isDisposing()\n            ) {\n              self.warn(\n                \"The context object '\" +\n                  context +\n                  \"' for the event '\" +\n                  type +\n                  \"' of '\" +\n                  target +\n                  \"'is already disposed.\"\n              );\n            }\n          }\n          qx.event.Utils.then(tracker, function () {\n            return listener.handler.call(context, event);\n          });\n        });\n      }\n\n      return tracker.promise;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DEFER\n  *****************************************************************************\n  */\n\n  defer(statics) {\n    qx.event.Registration.addDispatcher(statics);\n  }\n});\n"
  ]
}