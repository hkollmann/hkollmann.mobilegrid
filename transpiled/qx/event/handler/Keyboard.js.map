{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/event/handler/Keyboard.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "event",
    "IEventHandler",
    "IDisposable",
    "construct",
    "manager",
    "__manager",
    "__window",
    "getWindow",
    "Environment",
    "get",
    "__root",
    "document",
    "documentElement",
    "__lastUpDownType",
    "_initKeyObserver",
    "statics",
    "PRIORITY",
    "Registration",
    "PRIORITY_NORMAL",
    "SUPPORTED_TYPES",
    "keyup",
    "keydown",
    "keypress",
    "keyinput",
    "TARGET_CHECK",
    "TARGET_DOMNODE",
    "IGNORE_CAN_HANDLE",
    "members",
    "__onKeyUpDownWrapper",
    "__lastKeyCode",
    "__inputListeners",
    "__onKeyPressWrapper",
    "canHandleEvent",
    "target",
    "type",
    "registerEvent",
    "capture",
    "unregisterEvent",
    "_fireInputEvent",
    "domEvent",
    "charCode",
    "__getEventTarget",
    "tracker",
    "self",
    "offsetWidth",
    "createEvent",
    "KeyInput",
    "Utils",
    "then",
    "dispatchEvent",
    "fireEvent",
    "Data",
    "promise",
    "_fireSequenceEvent",
    "keyIdentifier",
    "keyCode",
    "KeySequence",
    "getDefaultPrevented",
    "util",
    "Keyboard",
    "isNonPrintableKeyCode",
    "_emulateKeyPress",
    "focusHandler",
    "getHandler",
    "handler",
    "Focus",
    "getActive",
    "getFocus",
    "body",
    "lang",
    "Function",
    "listener",
    "__onKeyUpDown",
    "__onKeyPress",
    "Event",
    "bom",
    "addNativeListener",
    "_stopKeyObserver",
    "removeNativeListener",
    "key",
    "callback",
    "GlobalError",
    "observeMethod",
    "select",
    "track",
    "_idealKeyHandler",
    "isModifierDown",
    "ctrlKey",
    "altKey",
    "metaKey",
    "opera",
    "__firefoxInputFix",
    "gecko",
    "tagName",
    "toLowerCase",
    "getAttribute",
    "hash",
    "ObjectRegistry",
    "toHashCode",
    "stopPropagation",
    "mshtml",
    "window",
    "_charCode2KeyCode",
    "webkit",
    "keyCodeToIdentifierMap",
    "eventType",
    "keyCodeToIdentifier",
    "charCodeToIdentifier",
    "_identifierToKeyCode",
    "identifierToKeyCodeMap",
    "charCodeAt",
    "destruct",
    "defer",
    "addHandler"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This class provides unified key event handler for Internet Explorer,\n * Firefox, Opera and Safari.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n * @require(qx.event.handler.UserAction)\n */\nqx.Class.define(\"qx.event.handler.Keyboard\", {\n  extend: qx.core.Object,\n  implement: [qx.event.IEventHandler, qx.core.IDisposable],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Create a new instance\n   *\n   * @param manager {qx.event.Manager} Event manager for the window to use\n   */\n  construct(manager) {\n    super();\n\n    // Define shorthands\n    this.__manager = manager;\n    this.__window = manager.getWindow();\n\n    // Gecko ignores key events when not explicitly clicked in the document.\n    if (qx.core.Environment.get(\"engine.name\") == \"gecko\") {\n      this.__root = this.__window;\n    } else {\n      this.__root = this.__window.document.documentElement;\n    }\n\n    // Internal sequence cache\n    this.__lastUpDownType = {};\n\n    // Initialize observer\n    this._initKeyObserver();\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** @type {Integer} Priority of this handler */\n    PRIORITY: qx.event.Registration.PRIORITY_NORMAL,\n\n    /** @type {Map} Supported event types */\n    SUPPORTED_TYPES: {\n      keyup: 1,\n      keydown: 1,\n      keypress: 1,\n      keyinput: 1\n    },\n\n    /** @type {Integer} Which target check to use */\n    TARGET_CHECK: qx.event.IEventHandler.TARGET_DOMNODE,\n\n    /** @type {Integer} Whether the method \"canHandleEvent\" must be called */\n    IGNORE_CAN_HANDLE: true\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __onKeyUpDownWrapper: null,\n    __manager: null,\n    __window: null,\n    __root: null,\n    __lastUpDownType: null,\n    __lastKeyCode: null,\n    __inputListeners: null,\n    __onKeyPressWrapper: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // interface implementation\n    canHandleEvent(target, type) {},\n\n    // interface implementation\n    registerEvent(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n    // interface implementation\n    unregisterEvent(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Fire a key input event with the given parameters\n     *\n     * @param domEvent {Event} DOM event\n     * @param charCode {Integer} character code\n     * @return {qx.Promise?} a promise if the event handlers created one\n     */\n    _fireInputEvent(domEvent, charCode) {\n      var target = this.__getEventTarget();\n      var tracker = {};\n      var self = this;\n\n      // Only fire when target is defined and visible\n      if (target && target.offsetWidth != 0) {\n        var event = qx.event.Registration.createEvent(\n          \"keyinput\",\n          qx.event.type.KeyInput,\n          [domEvent, target, charCode]\n        );\n\n        qx.event.Utils.then(tracker, function () {\n          self.__manager.dispatchEvent(target, event);\n        });\n      }\n\n      // Fire user action event\n      // Needs to check if still alive first\n      if (this.__window) {\n        var self = this;\n        qx.event.Utils.then(tracker, function () {\n          return qx.event.Registration.fireEvent(\n            self.__window,\n            \"useraction\",\n            qx.event.type.Data,\n            [\"keyinput\"]\n          );\n        });\n      }\n\n      return tracker.promise;\n    },\n\n    /**\n     * Fire a key up/down/press event with the given parameters\n     *\n     * @param domEvent {Event} DOM event\n     * @param type {String} type og the event\n     * @param keyIdentifier {String} key identifier\n     * @return {qx.Promise?} a promise, if any of the event handlers returned a promise\n     */\n    _fireSequenceEvent(domEvent, type, keyIdentifier) {\n      var target = this.__getEventTarget();\n      var keyCode = domEvent.keyCode;\n      var tracker = {};\n      var self = this;\n\n      // Fire key event\n      var event = qx.event.Registration.createEvent(\n        type,\n        qx.event.type.KeySequence,\n        [domEvent, target, keyIdentifier]\n      );\n\n      qx.event.Utils.then(tracker, function () {\n        return self.__manager.dispatchEvent(target, event);\n      });\n\n      // IE and Safari suppress a \"keypress\" event if the \"keydown\" event's\n      // default action was prevented. In this case we emulate the \"keypress\"\n      //\n      // FireFox suppresses \"keypress\" when \"keydown\" default action is prevented.\n      // from version 29: https://bugzilla.mozilla.org/show_bug.cgi?id=935876.\n      if (event.getDefaultPrevented() && type == \"keydown\") {\n        if (\n          qx.core.Environment.get(\"engine.name\") == \"mshtml\" ||\n          qx.core.Environment.get(\"engine.name\") == \"webkit\" ||\n          (qx.core.Environment.get(\"engine.name\") == \"gecko\" &&\n            qx.core.Environment.get(\"browser.version\") >= 29)\n        ) {\n          // some key press events are already emulated. Ignore these events.\n          if (\n            !qx.event.util.Keyboard.isNonPrintableKeyCode(keyCode) &&\n            !this._emulateKeyPress[keyCode]\n          ) {\n            qx.event.Utils.then(tracker, function () {\n              return self._fireSequenceEvent(\n                domEvent,\n                \"keypress\",\n                keyIdentifier\n              );\n            });\n          }\n        }\n      }\n\n      // Fire user action event\n      // Needs to check if still alive first\n      if (this.__window) {\n        qx.event.Utils.then(tracker, function () {\n          return qx.event.Registration.fireEvent(\n            self.__window,\n            \"useraction\",\n            qx.event.type.Data,\n            [type]\n          );\n        });\n      }\n\n      return tracker.promise;\n    },\n\n    /**\n     * Get the target element for key events\n     *\n     * @return {Element} the event target element\n     */\n    __getEventTarget() {\n      var focusHandler = this.__manager.getHandler(qx.event.handler.Focus);\n      var target = focusHandler.getActive();\n\n      // Fallback to focused element when active is null or invisible\n      if (!target || target.offsetWidth == 0) {\n        target = focusHandler.getFocus();\n      }\n\n      // Fallback to body when focused is null or invisible\n      if (!target || target.offsetWidth == 0) {\n        target = this.__manager.getWindow().document.body;\n      }\n\n      return target;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      OBSERVER INIT/STOP\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Initializes the native key event listeners.\n     *\n     * @signature function()\n     */\n    _initKeyObserver() {\n      this.__onKeyUpDownWrapper = qx.lang.Function.listener(\n        this.__onKeyUpDown,\n        this\n      );\n\n      this.__onKeyPressWrapper = qx.lang.Function.listener(\n        this.__onKeyPress,\n        this\n      );\n\n      var Event = qx.bom.Event;\n\n      Event.addNativeListener(this.__root, \"keyup\", this.__onKeyUpDownWrapper);\n      Event.addNativeListener(\n        this.__root,\n        \"keydown\",\n        this.__onKeyUpDownWrapper\n      );\n\n      Event.addNativeListener(\n        this.__root,\n        \"keypress\",\n        this.__onKeyPressWrapper\n      );\n    },\n\n    /**\n     * Stops the native key event listeners.\n     *\n     * @signature function()\n     */\n    _stopKeyObserver() {\n      var Event = qx.bom.Event;\n\n      Event.removeNativeListener(\n        this.__root,\n        \"keyup\",\n        this.__onKeyUpDownWrapper\n      );\n\n      Event.removeNativeListener(\n        this.__root,\n        \"keydown\",\n        this.__onKeyUpDownWrapper\n      );\n\n      Event.removeNativeListener(\n        this.__root,\n        \"keypress\",\n        this.__onKeyPressWrapper\n      );\n\n      for (var key in this.__inputListeners || {}) {\n        var listener = this.__inputListeners[key];\n        Event.removeNativeListener(\n          listener.target,\n          \"keypress\",\n          listener.callback\n        );\n      }\n      delete this.__inputListeners;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      NATIVE EVENT OBSERVERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Low level handler for \"keyup\" and \"keydown\" events\n     *\n     * @internal\n     * @signature function(domEvent)\n     * @param domEvent {Event} DOM event object\n     */\n    __onKeyUpDown: qx.event.GlobalError.observeMethod(\n      qx.core.Environment.select(\"engine.name\", {\n        \"gecko|webkit|mshtml\"(domEvent) {\n          var keyCode = 0;\n          var charCode = 0;\n          var type = domEvent.type;\n\n          keyCode = domEvent.keyCode;\n\n          var tracker = {};\n          var self = this;\n\n          qx.event.Utils.track(\n            tracker,\n            this._idealKeyHandler(keyCode, charCode, type, domEvent)\n          );\n\n          // On non print-able character be sure to add a keypress event\n          if (type == \"keydown\") {\n            /*\n             * We need an artificial keypress event for every keydown event.\n             * Newer browsers do not fire keypress for a regular charachter key (e.g when typing 'a')\n             * if it was typed with the CTRL, ALT or META Key pressed during typing, like\n             * doing it when typing the combination CTRL+A\n             */\n            var isModifierDown =\n              domEvent.ctrlKey || domEvent.altKey || domEvent.metaKey;\n\n            // non-printable, backspace, tab or the modfier keys are down\n            if (\n              qx.event.util.Keyboard.isNonPrintableKeyCode(keyCode) ||\n              this._emulateKeyPress[keyCode] ||\n              isModifierDown\n            ) {\n              qx.event.Utils.then(tracker, function () {\n                return self._idealKeyHandler(\n                  keyCode,\n                  charCode,\n                  \"keypress\",\n                  domEvent\n                );\n              });\n            }\n          }\n\n          // Store last type\n          this.__lastUpDownType[keyCode] = type;\n\n          return tracker.promise;\n        },\n\n        opera(domEvent) {\n          this.__lastKeyCode = domEvent.keyCode;\n          return this._idealKeyHandler(\n            domEvent.keyCode,\n            0,\n            domEvent.type,\n            domEvent\n          );\n        }\n      })\n    ),\n\n    /**\n     * some keys like \"up\", \"down\", \"pageup\", \"pagedown\" do not bubble a\n     * \"keypress\" event in Firefox. To work around this bug we attach keypress\n     * listeners directly to the input events.\n     *\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=467513\n     *\n     * @signature function(target, type, keyCode)\n     * @param target {Element} The event target\n     * @param type {String} The event type\n     * @param keyCode {Integer} the key code\n     */\n    __firefoxInputFix: qx.core.Environment.select(\"engine.name\", {\n      gecko(target, type, keyCode) {\n        if (\n          type === \"keydown\" &&\n          (keyCode == 33 || keyCode == 34 || keyCode == 38 || keyCode == 40) &&\n          target.type == \"text\" &&\n          target.tagName.toLowerCase() === \"input\" &&\n          target.getAttribute(\"autoComplete\") !== \"off\"\n        ) {\n          if (!this.__inputListeners) {\n            this.__inputListeners = {};\n          }\n          var hash = qx.core.ObjectRegistry.toHashCode(target);\n          if (this.__inputListeners[hash]) {\n            return;\n          }\n          var self = this;\n          this.__inputListeners[hash] = {\n            target: target,\n            callback(domEvent) {\n              qx.bom.Event.stopPropagation(domEvent);\n              self.__onKeyPress(domEvent);\n            }\n          };\n\n          var listener = qx.event.GlobalError.observeMethod(\n            this.__inputListeners[hash].callback\n          );\n\n          qx.bom.Event.addNativeListener(target, \"keypress\", listener);\n        }\n      },\n\n      default: null\n    }),\n\n    /**\n     * Low level key press handler\n     *\n     * @signature function(domEvent)\n     * @param domEvent {Event} DOM event object\n     */\n    __onKeyPress: qx.event.GlobalError.observeMethod(\n      qx.core.Environment.select(\"engine.name\", {\n        mshtml(domEvent) {\n          domEvent = window.event || domEvent;\n\n          if (this._charCode2KeyCode[domEvent.keyCode]) {\n            return this._idealKeyHandler(\n              this._charCode2KeyCode[domEvent.keyCode],\n              0,\n              domEvent.type,\n              domEvent\n            );\n          } else {\n            return this._idealKeyHandler(\n              0,\n              domEvent.keyCode,\n              domEvent.type,\n              domEvent\n            );\n          }\n        },\n\n        gecko(domEvent) {\n          if (qx.core.Environment.get(\"engine.version\") < 66) {\n            var charCode = domEvent.charCode;\n            var type = domEvent.type;\n\n            return this._idealKeyHandler(\n              domEvent.keyCode,\n              charCode,\n              type,\n              domEvent\n            );\n          } else {\n            if (this._charCode2KeyCode[domEvent.keyCode]) {\n              return this._idealKeyHandler(\n                this._charCode2KeyCode[domEvent.keyCode],\n                0,\n                domEvent.type,\n                domEvent\n              );\n            } else {\n              return this._idealKeyHandler(\n                0,\n                domEvent.keyCode,\n                domEvent.type,\n                domEvent\n              );\n            }\n          }\n        },\n\n        webkit(domEvent) {\n          if (this._charCode2KeyCode[domEvent.keyCode]) {\n            return this._idealKeyHandler(\n              this._charCode2KeyCode[domEvent.keyCode],\n              0,\n              domEvent.type,\n              domEvent\n            );\n          } else {\n            return this._idealKeyHandler(\n              0,\n              domEvent.keyCode,\n              domEvent.type,\n              domEvent\n            );\n          }\n        },\n\n        opera(domEvent) {\n          var keyCode = domEvent.keyCode;\n          var type = domEvent.type;\n\n          // Some keys are identified differently for key up/down and keypress\n          // (e.g. \"v\" gets identified as \"F7\").\n          // So we store the last key up/down keycode and compare it to the\n          // current keycode.\n          // See http://bugzilla.qooxdoo.org/show_bug.cgi?id=603\n          if (keyCode != this.__lastKeyCode) {\n            return this._idealKeyHandler(0, this.__lastKeyCode, type, domEvent);\n          } else {\n            if (\n              qx.event.util.Keyboard.keyCodeToIdentifierMap[domEvent.keyCode]\n            ) {\n              return this._idealKeyHandler(\n                domEvent.keyCode,\n                0,\n                domEvent.type,\n                domEvent\n              );\n            } else {\n              return this._idealKeyHandler(\n                0,\n                domEvent.keyCode,\n                domEvent.type,\n                domEvent\n              );\n            }\n          }\n        }\n      })\n    ),\n\n    /*\n    ---------------------------------------------------------------------------\n      IDEAL KEY HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Key handler for an idealized browser.\n     * Runs after the browser specific key handlers have normalized the key events.\n     *\n     * @param keyCode {String} keyboard code\n     * @param charCode {String} character code\n     * @param eventType {String} type of the event (keydown, keypress, keyup)\n     * @param domEvent {Element} DomEvent\n     * @return {qx.Promise?} a promise, if an event handler created one\n     */\n    _idealKeyHandler(keyCode, charCode, eventType, domEvent) {\n      var keyIdentifier;\n\n      // Use: keyCode\n      if (keyCode || (!keyCode && !charCode)) {\n        keyIdentifier = qx.event.util.Keyboard.keyCodeToIdentifier(keyCode);\n\n        return this._fireSequenceEvent(domEvent, eventType, keyIdentifier);\n      }\n\n      // Use: charCode\n      else {\n        keyIdentifier = qx.event.util.Keyboard.charCodeToIdentifier(charCode);\n\n        var tracker = {};\n        var self = this;\n        qx.event.Utils.track(\n          tracker,\n          this._fireSequenceEvent(domEvent, \"keypress\", keyIdentifier)\n        );\n\n        return qx.event.Utils.then(tracker, function () {\n          return self._fireInputEvent(domEvent, charCode);\n        });\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      KEY MAPS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @type {Map} maps the charcodes of special keys for key press emulation\n     *\n     * @lint ignoreReferenceField(_emulateKeyPress)\n     */\n    _emulateKeyPress: qx.core.Environment.select(\"engine.name\", {\n      mshtml: {\n        8: true,\n        9: true\n      },\n\n      webkit: {\n        8: true,\n        9: true,\n        27: true\n      },\n\n      gecko:\n        qx.core.Environment.get(\"browser.version\") >= 65\n          ? {\n              8: true,\n              9: true,\n              27: true\n            }\n          : {},\n\n      default: {}\n    }),\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * converts a key identifier back to a keycode\n     *\n     * @param keyIdentifier {String} The key identifier to convert\n     * @return {Integer} keyboard code\n     */\n    _identifierToKeyCode(keyIdentifier) {\n      return (\n        qx.event.util.Keyboard.identifierToKeyCodeMap[keyIdentifier] ||\n        keyIdentifier.charCodeAt(0)\n      );\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._stopKeyObserver();\n    this.__lastKeyCode =\n      this.__manager =\n      this.__window =\n      this.__root =\n      this.__lastUpDownType =\n        null;\n  },\n\n  /*\n  *****************************************************************************\n     DEFER\n  *****************************************************************************\n  */\n\n  defer(statics, members) {\n    // register at the event handler\n    qx.event.Registration.addHandler(statics);\n\n    if (qx.core.Environment.get(\"engine.name\") !== \"opera\") {\n      members._charCode2KeyCode = {\n        13: 13,\n        27: 27\n      };\n    }\n  }\n});\n"
  ]
}