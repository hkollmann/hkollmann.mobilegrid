{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/event/handler/PointerCore.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "Object",
    "implement",
    "core",
    "IDisposable",
    "statics",
    "MOUSE_TO_POINTER_MAPPING",
    "mousedown",
    "mouseup",
    "mousemove",
    "mouseout",
    "mouseover",
    "TOUCH_TO_POINTER_MAPPING",
    "touchstart",
    "touchend",
    "touchmove",
    "touchcancel",
    "MSPOINTER_TO_POINTER_MAPPING",
    "MSPointerDown",
    "MSPointerMove",
    "MSPointerUp",
    "MSPointerCancel",
    "MSPointerLeave",
    "MSPointerEnter",
    "MSPointerOver",
    "MSPointerOut",
    "POINTER_TO_GESTURE_MAPPING",
    "pointerdown",
    "pointerup",
    "pointercancel",
    "pointermove",
    "LEFT_BUTTON",
    "Environment",
    "get",
    "SIM_MOUSE_DISTANCE",
    "SIM_MOUSE_DELAY",
    "__lastTouch",
    "construct",
    "target",
    "emitter",
    "__defaultTarget",
    "__emitter",
    "__eventNames",
    "__buttonStates",
    "__activeTouches",
    "_processedFlag",
    "classname",
    "substr",
    "lastIndexOf",
    "engineName",
    "docMode",
    "parseInt",
    "_initPointerObserver",
    "__nativePointerEvents",
    "_initObserver",
    "_onTouchEvent",
    "_onMouseEvent",
    "members",
    "__wrappedListener",
    "__lastButtonState",
    "__primaryIdentifier",
    "_onPointerEvent",
    "callback",
    "useEmitter",
    "lang",
    "Function",
    "listener",
    "forEach",
    "type",
    "dom",
    "Node",
    "isDocument",
    "$$emitter",
    "event",
    "Emitter",
    "on",
    "bom",
    "Event",
    "addNativeListener",
    "bind",
    "domEvent",
    "toLowerCase",
    "indexOf",
    "stopPropagation",
    "handler",
    "PointerCore",
    "getTarget",
    "evt",
    "Pointer",
    "_fireEvent",
    "changedTouches",
    "_determineActiveTouches",
    "touches",
    "length",
    "i",
    "cancelEvent",
    "identifier",
    "pointerType",
    "pointerId",
    "l",
    "touch",
    "touchTarget",
    "view",
    "document",
    "elementFromPoint",
    "clientX",
    "clientY",
    "touchProps",
    "pageX",
    "pageY",
    "screenX",
    "screenY",
    "overEvt",
    "isPrimary",
    "button",
    "buttons",
    "x",
    "y",
    "time",
    "Date",
    "getTime",
    "outEvt",
    "_isSimulatedMouseEvent",
    "which",
    "ctrlKey",
    "buttonsPressed",
    "Array",
    "sum",
    "mouseProps",
    "moveEvt",
    "push",
    "updatedActiveTouches",
    "add",
    "j",
    "timeSinceTouch",
    "dist",
    "distX",
    "Math",
    "abs",
    "distY",
    "_stopObserver",
    "removeNativeListener",
    "gestureEvent",
    "normalize",
    "srcElement",
    "ex",
    "tracker",
    "Utils",
    "then",
    "dispatchEvent",
    "promise",
    "currentTarget",
    "_stopped",
    "emit",
    "parentNode",
    "dispose"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,8BAApB,EAAoD;AAClDC,IAAAA,MAAM,EAAEC,MAD0C;AAElDC,IAAAA,SAAS,EAAE,CAACP,EAAE,CAACQ,IAAH,CAAQC,WAAT,CAFuC;AAIlDC,IAAAA,OAAO,EAAE;AACPC,MAAAA,wBAAwB,EAAE;AACxBC,QAAAA,SAAS,EAAE,aADa;AAExBC,QAAAA,OAAO,EAAE,WAFe;AAGxBC,QAAAA,SAAS,EAAE,aAHa;AAIxBC,QAAAA,QAAQ,EAAE,YAJc;AAKxBC,QAAAA,SAAS,EAAE;AALa,OADnB;AASPC,MAAAA,wBAAwB,EAAE;AACxBC,QAAAA,UAAU,EAAE,aADY;AAExBC,QAAAA,QAAQ,EAAE,WAFc;AAGxBC,QAAAA,SAAS,EAAE,aAHa;AAIxBC,QAAAA,WAAW,EAAE;AAJW,OATnB;AAgBPC,MAAAA,4BAA4B,EAAE;AAC5BC,QAAAA,aAAa,EAAE,aADa;AAE5BC,QAAAA,aAAa,EAAE,aAFa;AAG5BC,QAAAA,WAAW,EAAE,WAHe;AAI5BC,QAAAA,eAAe,EAAE,eAJW;AAK5BC,QAAAA,cAAc,EAAE,cALY;AAM5BC,QAAAA,cAAc,EAAE,cANY;AAO5BC,QAAAA,aAAa,EAAE,aAPa;AAQ5BC,QAAAA,YAAY,EAAE;AARc,OAhBvB;AA2BPC,MAAAA,0BAA0B,EAAE;AAC1BC,QAAAA,WAAW,EAAE,cADa;AAE1BC,QAAAA,SAAS,EAAE,eAFe;AAG1BC,QAAAA,aAAa,EAAE,eAHW;AAI1BC,QAAAA,WAAW,EAAE;AAJa,OA3BrB;AAkCPC,MAAAA,WAAW,EACTpC,EAAE,CAACQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,aAAxB,KAA0C,QAA1C,IACAtC,EAAE,CAACQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,sBAAxB,KAAmD,CADnD,GAEI,CAFJ,GAGI,CAtCC;AAwCPC,MAAAA,kBAAkB,EAAE,EAxCb;AA0CPC,MAAAA,eAAe,EAAE,IA1CV;;AA4CP;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,SAAW,EAAE;AAnDN,KAJyC;;AA0DlD;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,IAAAA,SAjEkD,qBAiExCC,MAjEwC,EAiEhCC,OAjEgC,EAiEvB;AACzB,WAAKC,SAAL,GAAuBF,MAAvB;AACA,WAAKG,SAAL,GAAiBF,OAAjB;AACA,WAAKG,SAAL,GAAoB,EAApB;AACA,WAAKC,SAAL,GAAsB,EAAtB;AACA,WAAKC,SAAL,GAAuB,EAAvB;AACA,WAAKC,cAAL,GACE,SACA,KAAKC,SAAL,CAAeC,MAAf,CAAsB,KAAKD,SAAL,CAAeE,WAAf,CAA2B,GAA3B,IAAkC,CAAxD,CADA,GAEA,WAHF;AAKA,UAAIC,UAAU,GAAGtD,EAAE,CAACQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,aAAxB,CAAjB;AACA,UAAIiB,OAAO,GAAGC,QAAQ,CAACxD,EAAE,CAACQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,sBAAxB,CAAD,EAAkD,EAAlD,CAAtB;;AACA,UAAIgB,UAAU,IAAI,QAAd,IAA0BC,OAAO,IAAI,EAAzC,EAA6C;AAC3C;AACA,aAAKR,SAAL,GAAoB,CAClB,eADkB,EAElB,eAFkB,EAGlB,aAHkB,EAIlB,iBAJkB,EAKlB,eALkB,EAMlB,cANkB,EAOlB,aAPkB,EAQlB,aARkB,EASlB,WATkB,EAUlB,eAVkB,EAWlB,aAXkB,EAYlB,YAZkB,CAApB;;AAeA,aAAKU,oBAAL;AACD,OAlBD,MAkBO;AACL,YAAIzD,EAAE,CAACQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,iBAAxB,CAAJ,EAAgD;AAC9C,eAAKoB,SAAL,GAA6B,IAA7B;AACD;;AACD,aAAKX,SAAL,GAAoB,CAClB,aADkB,EAElB,aAFkB,EAGlB,WAHkB,EAIlB,eAJkB,EAKlB,aALkB,EAMlB,YANkB,CAApB;;AASA,aAAKU,oBAAL;AACD;;AACD,UAAI,CAACzD,EAAE,CAACQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,iBAAxB,CAAL,EAAiD;AAC/C,YAAItC,EAAE,CAACQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,cAAxB,CAAJ,EAA6C;AAC3C,eAAKS,SAAL,GAAoB,CAClB,YADkB,EAElB,UAFkB,EAGlB,WAHkB,EAIlB,aAJkB,CAApB;;AAOA,eAAKY,aAAL,CAAmB,KAAKC,aAAxB;AACD;;AAED,aAAKb,SAAL,GAAoB,CAClB,WADkB,EAElB,SAFkB,EAGlB,WAHkB,EAIlB,WAJkB,EAKlB,UALkB,EAMlB,aANkB,CAApB;;AASA,aAAKY,aAAL,CAAmB,KAAKE,aAAxB;AACD;AACF,KAtIiD;AAwIlDC,IAAAA,OAAO,EAAE;AACPjB,MAAAA,SAAe,EAAE,IADV;AAEPC,MAAAA,SAAS,EAAE,IAFJ;AAGPC,MAAAA,SAAY,EAAE,IAHP;AAIPW,MAAAA,SAAqB,EAAE,KAJhB;AAKPK,MAAAA,SAAiB,EAAE,IALZ;AAMPC,MAAAA,SAAiB,EAAE,CANZ;AAOPhB,MAAAA,SAAc,EAAE,IAPT;AAQPiB,MAAAA,SAAmB,EAAE,IARd;AASPhB,MAAAA,SAAe,EAAE,IATV;AAUPC,MAAAA,cAAc,EAAE,IAVT;;AAYP;AACJ;AACA;AACIO,MAAAA,oBAfO,kCAegB;AACrB,aAAKE,aAAL,CAAmB,KAAKO,eAAxB;AACD,OAjBM;;AAmBP;AACJ;AACA;AACA;AACA;AACA;AACIP,MAAAA,aAzBO,yBAyBOQ,QAzBP,EAyBiBC,UAzBjB,EAyB6B;AAClC,aAAKL,SAAL,GAAyB/D,EAAE,CAACqE,IAAH,CAAQC,QAAR,CAAiBC,QAAjB,CAA0BJ,QAA1B,EAAoC,IAApC,CAAzB;;AACA,aAAKpB,SAAL,CAAkByB,OAAlB,CACE,UAAUC,IAAV,EAAgB;AACd,cAAIL,UAAU,IAAIpE,EAAE,CAAC0E,GAAH,CAAOC,IAAP,CAAYC,UAAZ,CAAuB,KAAK/B,SAA5B,CAAlB,EAAgE;AAC9D,gBAAI,CAAC,KAAKA,SAAL,CAAqBgC,SAA1B,EAAqC;AACnC,mBAAKhC,SAAL,CAAqBgC,SAArB,GAAiC,IAAI7E,EAAE,CAAC8E,KAAH,CAASC,OAAb,EAAjC;AACD;;AACD,iBAAKlC,SAAL,CAAqBgC,SAArB,CAA+BG,EAA/B,CAAkCP,IAAlC,EAAwC,KAAKV,SAA7C;AACD,WALD,MAKO;AACL/D,YAAAA,EAAE,CAACiF,GAAH,CAAOC,KAAP,CAAaC,iBAAb,CACE,KAAKtC,SADP,EAEE4B,IAFF,EAGE,KAAKV,SAHP;AAKD;AACF,SAbD,CAaEqB,IAbF,CAaO,IAbP,CADF;AAgBD,OA3CM;;AA6CP;AACJ;AACA;AACA;AACIlB,MAAAA,eAjDO,2BAiDSmB,QAjDT,EAiDmB;AACxB,YACE,CAACrF,EAAE,CAACQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,iBAAxB,CAAD,IACA;AACCtC,QAAAA,EAAE,CAACQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,sBAAxB,MAAoD,EAApD,IACC+C,QAAQ,CAACZ,IAAT,CAAca,WAAd,GAA4BC,OAA5B,CAAoC,IAApC,KAA6C,CAAC,CAJlD,EAKE;AACA;AACD;;AACD,YAAI,CAAC,KAAK7B,SAAV,EAAiC;AAC/B2B,UAAAA,QAAQ,CAACG,eAAT;AACD;;AACD,YAAIf,IAAI,GACNzE,EAAE,CAAC8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BpE,4BAA7B,CACE+D,QAAQ,CAACZ,IADX,KAEKY,QAAQ,CAACZ,IAHhB;AAIA,YAAI9B,MAAM,GAAG3C,EAAE,CAACiF,GAAH,CAAOC,KAAP,CAAaS,SAAb,CAAuBN,QAAvB,CAAb;AACA,YAAIO,GAAG,GAAG,IAAI5F,EAAE,CAAC8E,KAAH,CAASL,IAAT,CAAcC,GAAd,CAAkBmB,OAAtB,CAA8BpB,IAA9B,EAAoCY,QAApC,CAAV;;AACA,aAAKS,UAAL,CAAgBF,GAAhB,EAAqBnB,IAArB,EAA2B9B,MAA3B;AACD,OApEM;;AAsEP;AACJ;AACA;AACA;AACIiB,MAAAA,aA1EO,yBA0EOyB,QA1EP,EA0EiB;AACtB,YAAIA,QAAQ,CAAC,KAAKnC,cAAN,CAAZ,EAAmC;AACjC;AACD;;AACDmC,QAAAA,QAAQ,CAAC,KAAKnC,cAAN,CAAR,GAAgC,IAAhC;AACA,YAAIuB,IAAI,GACNzE,EAAE,CAAC8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BzE,wBAA7B,CAAsDoE,QAAQ,CAACZ,IAA/D,CADF;AAEA,YAAIsB,cAAc,GAAGV,QAAQ,CAACU,cAA9B;;AAEA,aAAKC,uBAAL,CAA6BX,QAAQ,CAACZ,IAAtC,EAA4CsB,cAA5C,EATsB,CAWtB;;;AACA,YAAIV,QAAQ,CAACY,OAAT,CAAiBC,MAAjB,GAA0B,KAAKjD,SAAL,CAAqBiD,MAAnD,EAA2D;AACzD;AACA,eAAK,IAAIC,CAAC,GAAG,KAAKlD,SAAL,CAAqBiD,MAArB,GAA8B,CAA3C,EAA8CC,CAAC,IAAI,CAAnD,EAAsDA,CAAC,EAAvD,EAA2D;AACzD,gBAAIC,WAAW,GAAG,IAAIpG,EAAE,CAAC8E,KAAH,CAASL,IAAT,CAAcC,GAAd,CAAkBmB,OAAtB,CAChB,eADgB,EAEhBR,QAFgB,EAGhB;AACEgB,cAAAA,UAAU,EAAE,KAAKpD,SAAL,CAAqBkD,CAArB,EAAwBE,UADtC;AAEE1D,cAAAA,MAAM,EAAE0C,QAAQ,CAAC1C,MAFnB;AAGE2D,cAAAA,WAAW,EAAE,OAHf;AAIEC,cAAAA,SAAS,EAAE,KAAKtD,SAAL,CAAqBkD,CAArB,EAAwBE,UAAxB,GAAqC;AAJlD,aAHgB,CAAlB;;AAWA,iBAAKP,UAAL,CAAgBM,WAAhB,EAA6B,eAA7B,EAA8Cf,QAAQ,CAAC1C,MAAvD;AACD,WAfwD,CAiBzD;;;AACA,eAAKsB,SAAL,GAA2B,IAA3B,CAlByD,CAoBzD;;AACA,eAAKhB,SAAL,GAAuB,EAAvB,CArByD,CAuBzD;;AACA;AACD;;AAED,YAAIoC,QAAQ,CAACZ,IAAT,IAAiB,YAAjB,IAAiC,KAAKR,SAAL,KAA6B,IAAlE,EAAwE;AACtE,eAAKA,SAAL,GAA2B8B,cAAc,CAAC,CAAD,CAAd,CAAkBM,UAA7C;AACD;;AAED,aAAK,IAAIF,CAAC,GAAG,CAAR,EAAWK,CAAC,GAAGT,cAAc,CAACG,MAAnC,EAA2CC,CAAC,GAAGK,CAA/C,EAAkDL,CAAC,EAAnD,EAAuD;AACrD,cAAIM,KAAK,GAAGV,cAAc,CAACI,CAAD,CAA1B;AAEA,cAAIO,WAAW,GACbrB,QAAQ,CAACsB,IAAT,CAAcC,QAAd,CAAuBC,gBAAvB,CACEJ,KAAK,CAACK,OADR,EAEEL,KAAK,CAACM,OAFR,KAGK1B,QAAQ,CAAC1C,MAJhB;AAMA,cAAIqE,UAAU,GAAG;AACfF,YAAAA,OAAO,EAAEL,KAAK,CAACK,OADA;AAEfC,YAAAA,OAAO,EAAEN,KAAK,CAACM,OAFA;AAGfE,YAAAA,KAAK,EAAER,KAAK,CAACQ,KAHE;AAIfC,YAAAA,KAAK,EAAET,KAAK,CAACS,KAJE;AAKfb,YAAAA,UAAU,EAAEI,KAAK,CAACJ,UALH;AAMfc,YAAAA,OAAO,EAAEV,KAAK,CAACU,OANA;AAOfC,YAAAA,OAAO,EAAEX,KAAK,CAACW,OAPA;AAQfzE,YAAAA,MAAM,EAAE+D,WARO;AASfJ,YAAAA,WAAW,EAAE,OATE;AAUfC,YAAAA,SAAS,EAAEE,KAAK,CAACJ,UAAN,GAAmB;AAVf,WAAjB;;AAaA,cAAIhB,QAAQ,CAACZ,IAAT,IAAiB,YAArB,EAAmC;AACjC;AACA,gBAAI4C,OAAO,GAAG,IAAIrH,EAAE,CAAC8E,KAAH,CAASL,IAAT,CAAcC,GAAd,CAAkBmB,OAAtB,CACZ,aADY,EAEZR,QAFY,EAGZ2B,UAHY,CAAd;;AAMA,iBAAKlB,UAAL,CAAgBuB,OAAhB,EAAyB,aAAzB,EAAwCL,UAAU,CAACrE,MAAnD;AACD;;AAED,cAAI8D,KAAK,CAACJ,UAAN,IAAoB,KAAKpC,SAA7B,EAAkD;AAChD+C,YAAAA,UAAU,CAACM,SAAX,GAAuB,IAAvB,CADgD,CAEhD;;AACAN,YAAAA,UAAU,CAACO,MAAX,GAAoB,CAApB;AACAP,YAAAA,UAAU,CAACQ,OAAX,GAAqB,CAArB;AACAxH,YAAAA,EAAE,CAAC8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BjD,SAA7B,GAA2C;AACzCgF,cAAAA,CAAC,EAAEhB,KAAK,CAACK,OADgC;AAEzCY,cAAAA,CAAC,EAAEjB,KAAK,CAACM,OAFgC;AAGzCY,cAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,OAAX;AAHmC,aAA3C;AAKD;;AAED,cAAIjC,GAAG,GAAG,IAAI5F,EAAE,CAAC8E,KAAH,CAASL,IAAT,CAAcC,GAAd,CAAkBmB,OAAtB,CAA8BpB,IAA9B,EAAoCY,QAApC,EAA8C2B,UAA9C,CAAV;;AAEA,eAAKlB,UAAL,CAAgBF,GAAhB,EAAqBnB,IAArB,EAA2BuC,UAAU,CAACrE,MAAtC;;AAEA,cAAI0C,QAAQ,CAACZ,IAAT,IAAiB,UAAjB,IAA+BY,QAAQ,CAACZ,IAAT,IAAiB,aAApD,EAAmE;AACjE;AACA,gBAAIqD,MAAM,GAAG,IAAI9H,EAAE,CAAC8E,KAAH,CAASL,IAAT,CAAcC,GAAd,CAAkBmB,OAAtB,CACX,YADW,EAEXR,QAFW,EAGX2B,UAHW,CAAb,CAFiE,CAQjE;;AACA,iBAAKlB,UAAL,CAAgBgC,MAAhB,EAAwB,YAAxB,EAAsCzC,QAAQ,CAAC1C,MAA/C;;AAEA,gBAAI,KAAKsB,SAAL,IAA4BwC,KAAK,CAACJ,UAAtC,EAAkD;AAChD,mBAAKpC,SAAL,GAA2B,IAA3B;AACD;AACF;AACF;AACF,OAtLM;;AAwLP;AACJ;AACA;AACA;AACIJ,MAAAA,aA5LO,yBA4LOwB,QA5LP,EA4LiB;AACtB,YAAIA,QAAQ,CAAC,KAAKnC,cAAN,CAAZ,EAAmC;AACjC;AACD;;AACDmC,QAAAA,QAAQ,CAAC,KAAKnC,cAAN,CAAR,GAAgC,IAAhC;;AAEA,YAAI,KAAK6E,sBAAL,CAA4B1C,QAAQ,CAACyB,OAArC,EAA8CzB,QAAQ,CAAC0B,OAAvD,CAAJ,EAAqE;AACnE;AACR;AACA;AACA;AACQ;AACD;;AAED,YAAI1B,QAAQ,CAACZ,IAAT,IAAiB,WAArB,EAAkC;AAChC,eAAKzB,SAAL,CAAoBqC,QAAQ,CAAC2C,KAA7B,IAAsC,CAAtC;AACD,SAFD,MAEO,IAAI3C,QAAQ,CAACZ,IAAT,IAAiB,SAArB,EAAgC;AACrC,cACEzE,EAAE,CAACQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,SAAxB,KAAsC,KAAtC,IACAtC,EAAE,CAACQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,aAAxB,KAA0C,OAF5C,EAGE;AACA,gBAAI,KAAKU,SAAL,CAAoBqC,QAAQ,CAAC2C,KAA7B,KAAuC,CAAvC,IAA4C3C,QAAQ,CAAC4C,OAAzD,EAAkE;AAChE,mBAAKjF,SAAL,CAAoB,CAApB,IAAyB,CAAzB;AACD;AACF;;AAED,eAAKA,SAAL,CAAoBqC,QAAQ,CAAC2C,KAA7B,IAAsC,CAAtC;AACD;;AAED,YAAIvD,IAAI,GACNzE,EAAE,CAAC8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6B/E,wBAA7B,CAAsD0E,QAAQ,CAACZ,IAA/D,CADF;AAEA,YAAI9B,MAAM,GAAG3C,EAAE,CAACiF,GAAH,CAAOC,KAAP,CAAaS,SAAb,CAAuBN,QAAvB,CAAb;AAEA,YAAI6C,cAAc,GAAGlI,EAAE,CAACqE,IAAH,CAAQ8D,KAAR,CAAcC,GAAd,CAAkB,KAAKpF,SAAvB,CAArB;AAEA,YAAIqF,UAAU,GAAG;AAAE/B,UAAAA,WAAW,EAAE,OAAf;AAAwBC,UAAAA,SAAS,EAAE;AAAnC,SAAjB,CAnCsB,CAqCtB;;AACA,YACE,KAAKvC,SAAL,IAA0BkE,cAA1B,IACAA,cAAc,KAAK,CADnB,IAEA,KAAKlE,SAAL,KAA2B,CAH7B,EAIE;AACA,cAAIsE,OAAO,GAAG,IAAItI,EAAE,CAAC8E,KAAH,CAASL,IAAT,CAAcC,GAAd,CAAkBmB,OAAtB,CACZ,aADY,EAEZR,QAFY,EAGZgD,UAHY,CAAd;;AAMA,eAAKvC,UAAL,CAAgBwC,OAAhB,EAAyB,aAAzB,EAAwC3F,MAAxC;AACD;;AACD,aAAKqB,SAAL,GAAyBkE,cAAzB,CAnDsB,CAqDtB;;AACA,YAAI7C,QAAQ,CAACZ,IAAT,IAAiB,WAAjB,IAAgCyD,cAAc,GAAG,CAArD,EAAwD;AACtD;AACD,SAxDqB,CA0DtB;;;AACA,YAAI7C,QAAQ,CAACZ,IAAT,IAAiB,SAAjB,IAA8ByD,cAAc,GAAG,CAAnD,EAAsD;AACpD;AACD;;AAED,YAAI7C,QAAQ,CAACZ,IAAT,IAAiB,aAArB,EAAoC;AAClC,eAAKzB,SAAL,CAAoBqC,QAAQ,CAAC2C,KAA7B,IAAsC,CAAtC;AACA;AACD;;AAED,YAAIpC,GAAG,GAAG,IAAI5F,EAAE,CAAC8E,KAAH,CAASL,IAAT,CAAcC,GAAd,CAAkBmB,OAAtB,CAA8BpB,IAA9B,EAAoCY,QAApC,EAA8CgD,UAA9C,CAAV;;AACA,aAAKvC,UAAL,CAAgBF,GAAhB,EAAqBnB,IAArB,EAA2B9B,MAA3B;AACD,OAlQM;;AAoQP;AACJ;AACA;AACA;AACA;AACIqD,MAAAA,uBAzQO,mCAyQiBvB,IAzQjB,EAyQuBsB,cAzQvB,EAyQuC;AAC5C,YAAItB,IAAI,IAAI,YAAZ,EAA0B;AACxB,eAAK,IAAI0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,cAAc,CAACG,MAAnC,EAA2CC,CAAC,EAA5C,EAAgD;AAC9C,iBAAKlD,SAAL,CAAqBsF,IAArB,CAA0BxC,cAAc,CAACI,CAAD,CAAxC;AACD;AACF,SAJD,MAIO,IAAI1B,IAAI,IAAI,UAAR,IAAsBA,IAAI,IAAI,aAAlC,EAAiD;AACtD,cAAI+D,oBAAoB,GAAG,EAA3B;;AAEA,eAAK,IAAIrC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKlD,SAAL,CAAqBiD,MAAzC,EAAiDC,CAAC,EAAlD,EAAsD;AACpD,gBAAIsC,GAAG,GAAG,IAAV;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3C,cAAc,CAACG,MAAnC,EAA2CwC,CAAC,EAA5C,EAAgD;AAC9C,kBACE,KAAKzF,SAAL,CAAqBkD,CAArB,EAAwBE,UAAxB,IAAsCN,cAAc,CAAC2C,CAAD,CAAd,CAAkBrC,UAD1D,EAEE;AACAoC,gBAAAA,GAAG,GAAG,KAAN;AACA;AACD;AACF;;AAED,gBAAIA,GAAJ,EAAS;AACPD,cAAAA,oBAAoB,CAACD,IAArB,CAA0B,KAAKtF,SAAL,CAAqBkD,CAArB,CAA1B;AACD;AACF;;AACD,eAAKlD,SAAL,GAAuBuF,oBAAvB;AACD;AACF,OAlSM;;AAoSP;AACJ;AACA;AACA;AACA;AACA;AACA;AACIT,MAAAA,sBA3SO,kCA2SgBN,CA3ShB,EA2SmBC,CA3SnB,EA2SsB;AAC3B,YAAIjB,KAAK,GAAGzG,EAAE,CAAC8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BjD,SAAzC;;AACA,YAAIgE,KAAJ,EAAW;AACT,cAAIkC,cAAc,GAAG,IAAIf,IAAJ,GAAWC,OAAX,KAAuBpB,KAAK,CAACkB,IAAlD;AACA,cAAIiB,IAAI,GAAG5I,EAAE,CAAC8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BnD,kBAAxC;AACA,cAAIsG,KAAK,GAAGC,IAAI,CAACC,GAAL,CAAStB,CAAC,GAAGzH,EAAE,CAAC8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BjD,SAA7B,CAAyCgF,CAAtD,CAAZ;AACA,cAAIuB,KAAK,GAAGF,IAAI,CAACC,GAAL,CAASrB,CAAC,GAAG1H,EAAE,CAAC8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BjD,SAA7B,CAAyCiF,CAAtD,CAAZ;;AACA,cAAIiB,cAAc,GAAG3I,EAAE,CAAC8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BlD,eAAlD,EAAmE;AACjE,gBAAIqG,KAAK,GAAGD,IAAR,IAAgBI,KAAK,GAAGJ,IAA5B,EAAkC;AAChC,qBAAO,IAAP;AACD;AACF;AACF;;AACD,eAAO,KAAP;AACD,OAzTM;;AA2TP;AACJ;AACA;AACIK,MAAAA,aA9TO,2BA8TS;AACd,aAAK,IAAI9C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKpD,SAAL,CAAkBmD,MAAtC,EAA8CC,CAAC,EAA/C,EAAmD;AACjDnG,UAAAA,EAAE,CAACiF,GAAH,CAAOC,KAAP,CAAagE,oBAAb,CACE,KAAKrG,SADP,EAEE,KAAKE,SAAL,CAAkBoD,CAAlB,CAFF,EAGE,KAAKpC,SAHP;AAKD;AACF,OAtUM;;AAwUP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI+B,MAAAA,UAhVO,sBAgVIT,QAhVJ,EAgVcZ,IAhVd,EAgVoB9B,MAhVpB,EAgV4B;AACjCA,QAAAA,MAAM,GAAGA,MAAM,IAAI0C,QAAQ,CAAC1C,MAA5B;AACA8B,QAAAA,IAAI,GAAGA,IAAI,IAAIY,QAAQ,CAACZ,IAAxB;AAEA,YAAI0E,YAAJ;;AACA,YACE,CAAC9D,QAAQ,CAACiB,WAAT,KAAyB,OAAzB,IACCjB,QAAQ,CAACkC,MAAT,IAAmBvH,EAAE,CAAC8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BtD,WADlD,MAECqC,IAAI,IAAI,aAAR,IAAyBA,IAAI,IAAI,WAAjC,IAAgDA,IAAI,IAAI,aAFzD,CADF,EAIE;AACA0E,UAAAA,YAAY,GAAG,IAAInJ,EAAE,CAAC8E,KAAH,CAASL,IAAT,CAAcC,GAAd,CAAkBmB,OAAtB,CACb7F,EAAE,CAAC8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6B3D,0BAA7B,CAAwD0C,IAAxD,CADa,EAEbY,QAFa,CAAf;AAKArF,UAAAA,EAAE,CAAC8E,KAAH,CAASL,IAAT,CAAcC,GAAd,CAAkBmB,OAAlB,CAA0BuD,SAA1B,CAAoCD,YAApC;;AACA,cAAI;AACFA,YAAAA,YAAY,CAACE,UAAb,GAA0B1G,MAA1B;AACD,WAFD,CAEE,OAAO2G,EAAP,EAAW,CACX;AACD;AACF;;AAED,YAAItJ,EAAE,CAACQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,qBAAxB,CAAJ,EAAoD;AAClD,cAAIiH,OAAO,GAAG,EAAd;;AACA,cAAI,CAAC,KAAK7F,SAAV,EAAiC;AAC/B1D,YAAAA,EAAE,CAAC8E,KAAH,CAAS0E,KAAT,CAAeC,IAAf,CAAoBF,OAApB,EAA6B,YAAY;AACvC,qBAAO5G,MAAM,CAAC+G,aAAP,CAAqBrE,QAArB,CAAP;AACD,aAFD;AAGD;;AACD,cAAI8D,YAAJ,EAAkB;AAChBnJ,YAAAA,EAAE,CAAC8E,KAAH,CAAS0E,KAAT,CAAeC,IAAf,CAAoBF,OAApB,EAA6B,YAAY;AACvC,qBAAO5G,MAAM,CAAC+G,aAAP,CAAqBP,YAArB,CAAP;AACD,aAFD;AAGD;;AACD,iBAAOI,OAAO,CAACI,OAAf;AACD,SAbD,MAaO;AACL,cACE3J,EAAE,CAACQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,cAAxB,MAA4C,MAA5C,IACAtC,EAAE,CAACQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,iBAAxB,IAA6C,CAF/C,EAGE;AACA;AACA,gBAAI;AACF+C,cAAAA,QAAQ,CAACgE,UAAT,GAAsB1G,MAAtB;AACD,aAFD,CAEE,OAAO2G,EAAP,EAAW,CACX;AACD;AACF;;AAED,iBAAO3G,MAAP,EAAe;AACb,gBAAIA,MAAM,CAACkC,SAAX,EAAsB;AACpBQ,cAAAA,QAAQ,CAACuE,aAAT,GAAyBjH,MAAzB;;AACA,kBAAI,CAAC0C,QAAQ,CAACwE,QAAd,EAAwB;AACtBlH,gBAAAA,MAAM,CAACkC,SAAP,CAAiBiF,IAAjB,CAAsBrF,IAAtB,EAA4BY,QAA5B;AACD;;AACD,kBAAI8D,YAAY,IAAI,CAACA,YAAY,CAACU,QAAlC,EAA4C;AAC1CV,gBAAAA,YAAY,CAACS,aAAb,GAA6BjH,MAA7B;AACAA,gBAAAA,MAAM,CAACkC,SAAP,CAAiBiF,IAAjB,CAAsBX,YAAY,CAAC1E,IAAnC,EAAyC0E,YAAzC;AACD;AACF;;AACDxG,YAAAA,MAAM,GAAGA,MAAM,CAACoH,UAAhB;AACD;AACF;AACF,OA/YM;;AAiZP;AACJ;AACA;AACIC,MAAAA,OApZO,qBAoZG;AACR,aAAKf,aAAL;;AACA,aAAKpG,SAAL,GAAuB,KAAKC,SAAL,GAAiB,IAAxC;AACD;AAvZM;AAxIyC,GAApD;AAzBA9C,EAAAA,EAAE,CAAC8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BvF,aAA7B,GAA6CA,aAA7C",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2014 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christopher Zuendorf (czuendorf)\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * Low-level pointer event handler.\n *\n * @require(qx.bom.client.Event)\n * @require(qx.bom.client.Device)\n */\nqx.Bootstrap.define(\"qx.event.handler.PointerCore\", {\n  extend: Object,\n  implement: [qx.core.IDisposable],\n\n  statics: {\n    MOUSE_TO_POINTER_MAPPING: {\n      mousedown: \"pointerdown\",\n      mouseup: \"pointerup\",\n      mousemove: \"pointermove\",\n      mouseout: \"pointerout\",\n      mouseover: \"pointerover\"\n    },\n\n    TOUCH_TO_POINTER_MAPPING: {\n      touchstart: \"pointerdown\",\n      touchend: \"pointerup\",\n      touchmove: \"pointermove\",\n      touchcancel: \"pointercancel\"\n    },\n\n    MSPOINTER_TO_POINTER_MAPPING: {\n      MSPointerDown: \"pointerdown\",\n      MSPointerMove: \"pointermove\",\n      MSPointerUp: \"pointerup\",\n      MSPointerCancel: \"pointercancel\",\n      MSPointerLeave: \"pointerleave\",\n      MSPointerEnter: \"pointerenter\",\n      MSPointerOver: \"pointerover\",\n      MSPointerOut: \"pointerout\"\n    },\n\n    POINTER_TO_GESTURE_MAPPING: {\n      pointerdown: \"gesturebegin\",\n      pointerup: \"gesturefinish\",\n      pointercancel: \"gesturecancel\",\n      pointermove: \"gesturemove\"\n    },\n\n    LEFT_BUTTON:\n      qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n      qx.core.Environment.get(\"browser.documentmode\") <= 8\n        ? 1\n        : 0,\n\n    SIM_MOUSE_DISTANCE: 25,\n\n    SIM_MOUSE_DELAY: 2500,\n\n    /**\n     * Coordinates of the last touch. This needs to be static because the target could\n     * change between touch and simulated mouse events. Touch events will be detected\n     * by one instance which moves the target. The simulated mouse events will be fired with\n     * a delay which causes another target and with that, another instance of this handler.\n     * last touch was.\n     */\n    __lastTouch: null\n  },\n\n  /**\n   * Create a new instance\n   *\n   * @param target {Element} element on which to listen for native touch events\n   * @param emitter {qx.event.Emitter?} Event emitter (used if dispatchEvent\n   * is not supported, e.g. in IE8)\n   */\n  construct(target, emitter) {\n    this.__defaultTarget = target;\n    this.__emitter = emitter;\n    this.__eventNames = [];\n    this.__buttonStates = [];\n    this.__activeTouches = [];\n    this._processedFlag =\n      \"$$qx\" +\n      this.classname.substr(this.classname.lastIndexOf(\".\") + 1) +\n      \"Processed\";\n\n    var engineName = qx.core.Environment.get(\"engine.name\");\n    var docMode = parseInt(qx.core.Environment.get(\"browser.documentmode\"), 10);\n    if (engineName == \"mshtml\" && docMode == 10) {\n      // listen to native prefixed events and custom unprefixed (see bug #8921)\n      this.__eventNames = [\n        \"MSPointerDown\",\n        \"MSPointerMove\",\n        \"MSPointerUp\",\n        \"MSPointerCancel\",\n        \"MSPointerOver\",\n        \"MSPointerOut\",\n        \"pointerdown\",\n        \"pointermove\",\n        \"pointerup\",\n        \"pointercancel\",\n        \"pointerover\",\n        \"pointerout\"\n      ];\n\n      this._initPointerObserver();\n    } else {\n      if (qx.core.Environment.get(\"event.mspointer\")) {\n        this.__nativePointerEvents = true;\n      }\n      this.__eventNames = [\n        \"pointerdown\",\n        \"pointermove\",\n        \"pointerup\",\n        \"pointercancel\",\n        \"pointerover\",\n        \"pointerout\"\n      ];\n\n      this._initPointerObserver();\n    }\n    if (!qx.core.Environment.get(\"event.mspointer\")) {\n      if (qx.core.Environment.get(\"device.touch\")) {\n        this.__eventNames = [\n          \"touchstart\",\n          \"touchend\",\n          \"touchmove\",\n          \"touchcancel\"\n        ];\n\n        this._initObserver(this._onTouchEvent);\n      }\n\n      this.__eventNames = [\n        \"mousedown\",\n        \"mouseup\",\n        \"mousemove\",\n        \"mouseover\",\n        \"mouseout\",\n        \"contextmenu\"\n      ];\n\n      this._initObserver(this._onMouseEvent);\n    }\n  },\n\n  members: {\n    __defaultTarget: null,\n    __emitter: null,\n    __eventNames: null,\n    __nativePointerEvents: false,\n    __wrappedListener: null,\n    __lastButtonState: 0,\n    __buttonStates: null,\n    __primaryIdentifier: null,\n    __activeTouches: null,\n    _processedFlag: null,\n\n    /**\n     * Adds listeners to native pointer events if supported\n     */\n    _initPointerObserver() {\n      this._initObserver(this._onPointerEvent);\n    },\n\n    /**\n     * Register native event listeners\n     * @param callback {Function} listener callback\n     * @param useEmitter {Boolean} attach listener to Emitter instead of\n     * native event\n     */\n    _initObserver(callback, useEmitter) {\n      this.__wrappedListener = qx.lang.Function.listener(callback, this);\n      this.__eventNames.forEach(\n        function (type) {\n          if (useEmitter && qx.dom.Node.isDocument(this.__defaultTarget)) {\n            if (!this.__defaultTarget.$$emitter) {\n              this.__defaultTarget.$$emitter = new qx.event.Emitter();\n            }\n            this.__defaultTarget.$$emitter.on(type, this.__wrappedListener);\n          } else {\n            qx.bom.Event.addNativeListener(\n              this.__defaultTarget,\n              type,\n              this.__wrappedListener\n            );\n          }\n        }.bind(this)\n      );\n    },\n\n    /**\n     * Handler for native pointer events\n     * @param domEvent {Event}  Native DOM event\n     */\n    _onPointerEvent(domEvent) {\n      if (\n        !qx.core.Environment.get(\"event.mspointer\") ||\n        // workaround for bug #8533\n        (qx.core.Environment.get(\"browser.documentmode\") === 10 &&\n          domEvent.type.toLowerCase().indexOf(\"ms\") == -1)\n      ) {\n        return;\n      }\n      if (!this.__nativePointerEvents) {\n        domEvent.stopPropagation();\n      }\n      var type =\n        qx.event.handler.PointerCore.MSPOINTER_TO_POINTER_MAPPING[\n          domEvent.type\n        ] || domEvent.type;\n      var target = qx.bom.Event.getTarget(domEvent);\n      var evt = new qx.event.type.dom.Pointer(type, domEvent);\n      this._fireEvent(evt, type, target);\n    },\n\n    /**\n     * Handler for touch events\n     * @param domEvent {Event} Native DOM event\n     */\n    _onTouchEvent(domEvent) {\n      if (domEvent[this._processedFlag]) {\n        return;\n      }\n      domEvent[this._processedFlag] = true;\n      var type =\n        qx.event.handler.PointerCore.TOUCH_TO_POINTER_MAPPING[domEvent.type];\n      var changedTouches = domEvent.changedTouches;\n\n      this._determineActiveTouches(domEvent.type, changedTouches);\n\n      // Detecting vacuum touches. (Touches which are not active anymore, but did not fire a touchcancel event)\n      if (domEvent.touches.length < this.__activeTouches.length) {\n        // Firing pointer cancel for previously active touches.\n        for (var i = this.__activeTouches.length - 1; i >= 0; i--) {\n          var cancelEvent = new qx.event.type.dom.Pointer(\n            \"pointercancel\",\n            domEvent,\n            {\n              identifier: this.__activeTouches[i].identifier,\n              target: domEvent.target,\n              pointerType: \"touch\",\n              pointerId: this.__activeTouches[i].identifier + 2\n            }\n          );\n\n          this._fireEvent(cancelEvent, \"pointercancel\", domEvent.target);\n        }\n\n        // Reset primary identifier\n        this.__primaryIdentifier = null;\n\n        // cleanup of active touches array.\n        this.__activeTouches = [];\n\n        // Do nothing after pointer cancel.\n        return;\n      }\n\n      if (domEvent.type == \"touchstart\" && this.__primaryIdentifier === null) {\n        this.__primaryIdentifier = changedTouches[0].identifier;\n      }\n\n      for (var i = 0, l = changedTouches.length; i < l; i++) {\n        var touch = changedTouches[i];\n\n        var touchTarget =\n          domEvent.view.document.elementFromPoint(\n            touch.clientX,\n            touch.clientY\n          ) || domEvent.target;\n\n        var touchProps = {\n          clientX: touch.clientX,\n          clientY: touch.clientY,\n          pageX: touch.pageX,\n          pageY: touch.pageY,\n          identifier: touch.identifier,\n          screenX: touch.screenX,\n          screenY: touch.screenY,\n          target: touchTarget,\n          pointerType: \"touch\",\n          pointerId: touch.identifier + 2\n        };\n\n        if (domEvent.type == \"touchstart\") {\n          // Fire pointerenter before pointerdown\n          var overEvt = new qx.event.type.dom.Pointer(\n            \"pointerover\",\n            domEvent,\n            touchProps\n          );\n\n          this._fireEvent(overEvt, \"pointerover\", touchProps.target);\n        }\n\n        if (touch.identifier == this.__primaryIdentifier) {\n          touchProps.isPrimary = true;\n          // always simulate left click on touch interactions for primary pointer\n          touchProps.button = 0;\n          touchProps.buttons = 1;\n          qx.event.handler.PointerCore.__lastTouch = {\n            x: touch.clientX,\n            y: touch.clientY,\n            time: new Date().getTime()\n          };\n        }\n\n        var evt = new qx.event.type.dom.Pointer(type, domEvent, touchProps);\n\n        this._fireEvent(evt, type, touchProps.target);\n\n        if (domEvent.type == \"touchend\" || domEvent.type == \"touchcancel\") {\n          // Fire pointerout after pointerup\n          var outEvt = new qx.event.type.dom.Pointer(\n            \"pointerout\",\n            domEvent,\n            touchProps\n          );\n\n          // fire on the original target to make sure over / out event are on the same target\n          this._fireEvent(outEvt, \"pointerout\", domEvent.target);\n\n          if (this.__primaryIdentifier == touch.identifier) {\n            this.__primaryIdentifier = null;\n          }\n        }\n      }\n    },\n\n    /**\n     * Handler for touch events\n     * @param domEvent {Event} Native DOM event\n     */\n    _onMouseEvent(domEvent) {\n      if (domEvent[this._processedFlag]) {\n        return;\n      }\n      domEvent[this._processedFlag] = true;\n\n      if (this._isSimulatedMouseEvent(domEvent.clientX, domEvent.clientY)) {\n        /*\n          Simulated MouseEvents are fired by browsers directly after TouchEvents\n          for improving compatibility. They should not trigger PointerEvents.\n        */\n        return;\n      }\n\n      if (domEvent.type == \"mousedown\") {\n        this.__buttonStates[domEvent.which] = 1;\n      } else if (domEvent.type == \"mouseup\") {\n        if (\n          qx.core.Environment.get(\"os.name\") == \"osx\" &&\n          qx.core.Environment.get(\"engine.name\") == \"gecko\"\n        ) {\n          if (this.__buttonStates[domEvent.which] != 1 && domEvent.ctrlKey) {\n            this.__buttonStates[1] = 0;\n          }\n        }\n\n        this.__buttonStates[domEvent.which] = 0;\n      }\n\n      var type =\n        qx.event.handler.PointerCore.MOUSE_TO_POINTER_MAPPING[domEvent.type];\n      var target = qx.bom.Event.getTarget(domEvent);\n\n      var buttonsPressed = qx.lang.Array.sum(this.__buttonStates);\n\n      var mouseProps = { pointerType: \"mouse\", pointerId: 1 };\n\n      // if the button state changes but not from or to zero\n      if (\n        this.__lastButtonState != buttonsPressed &&\n        buttonsPressed !== 0 &&\n        this.__lastButtonState !== 0\n      ) {\n        var moveEvt = new qx.event.type.dom.Pointer(\n          \"pointermove\",\n          domEvent,\n          mouseProps\n        );\n\n        this._fireEvent(moveEvt, \"pointermove\", target);\n      }\n      this.__lastButtonState = buttonsPressed;\n\n      // pointerdown should only trigger form the first pressed button.\n      if (domEvent.type == \"mousedown\" && buttonsPressed > 1) {\n        return;\n      }\n\n      // pointerup should only trigger if user releases all buttons.\n      if (domEvent.type == \"mouseup\" && buttonsPressed > 0) {\n        return;\n      }\n\n      if (domEvent.type == \"contextmenu\") {\n        this.__buttonStates[domEvent.which] = 0;\n        return;\n      }\n\n      var evt = new qx.event.type.dom.Pointer(type, domEvent, mouseProps);\n      this._fireEvent(evt, type, target);\n    },\n\n    /**\n     * Determines the current active touches.\n     * @param type {String} the DOM event type.\n     * @param changedTouches {Array} the current changed touches.\n     */\n    _determineActiveTouches(type, changedTouches) {\n      if (type == \"touchstart\") {\n        for (var i = 0; i < changedTouches.length; i++) {\n          this.__activeTouches.push(changedTouches[i]);\n        }\n      } else if (type == \"touchend\" || type == \"touchcancel\") {\n        var updatedActiveTouches = [];\n\n        for (var i = 0; i < this.__activeTouches.length; i++) {\n          var add = true;\n          for (var j = 0; j < changedTouches.length; j++) {\n            if (\n              this.__activeTouches[i].identifier == changedTouches[j].identifier\n            ) {\n              add = false;\n              break;\n            }\n          }\n\n          if (add) {\n            updatedActiveTouches.push(this.__activeTouches[i]);\n          }\n        }\n        this.__activeTouches = updatedActiveTouches;\n      }\n    },\n\n    /**\n     * Detects whether the given MouseEvent position is identical to the previously fired TouchEvent position.\n     * If <code>true</code> the corresponding event can be identified as simulated.\n     * @param x {Integer} current mouse x\n     * @param y {Integer} current mouse y\n     * @return {Boolean} <code>true</code> if passed mouse position is a synthetic MouseEvent.\n     */\n    _isSimulatedMouseEvent(x, y) {\n      var touch = qx.event.handler.PointerCore.__lastTouch;\n      if (touch) {\n        var timeSinceTouch = new Date().getTime() - touch.time;\n        var dist = qx.event.handler.PointerCore.SIM_MOUSE_DISTANCE;\n        var distX = Math.abs(x - qx.event.handler.PointerCore.__lastTouch.x);\n        var distY = Math.abs(y - qx.event.handler.PointerCore.__lastTouch.y);\n        if (timeSinceTouch < qx.event.handler.PointerCore.SIM_MOUSE_DELAY) {\n          if (distX < dist || distY < dist) {\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Removes native pointer event listeners.\n     */\n    _stopObserver() {\n      for (var i = 0; i < this.__eventNames.length; i++) {\n        qx.bom.Event.removeNativeListener(\n          this.__defaultTarget,\n          this.__eventNames[i],\n          this.__wrappedListener\n        );\n      }\n    },\n\n    /**\n     * Fire a touch event with the given parameters\n     *\n     * @param domEvent {Event} DOM event\n     * @param type {String ? null} type of the event\n     * @param target {Element ? null} event target\n     * @return {qx.Promise?} a promise, if one was returned by event handlers\n     */\n    _fireEvent(domEvent, type, target) {\n      target = target || domEvent.target;\n      type = type || domEvent.type;\n\n      var gestureEvent;\n      if (\n        (domEvent.pointerType !== \"mouse\" ||\n          domEvent.button <= qx.event.handler.PointerCore.LEFT_BUTTON) &&\n        (type == \"pointerdown\" || type == \"pointerup\" || type == \"pointermove\")\n      ) {\n        gestureEvent = new qx.event.type.dom.Pointer(\n          qx.event.handler.PointerCore.POINTER_TO_GESTURE_MAPPING[type],\n          domEvent\n        );\n\n        qx.event.type.dom.Pointer.normalize(gestureEvent);\n        try {\n          gestureEvent.srcElement = target;\n        } catch (ex) {\n          // Nothing - strict mode prevents writing to read only properties\n        }\n      }\n\n      if (qx.core.Environment.get(\"event.dispatchevent\")) {\n        var tracker = {};\n        if (!this.__nativePointerEvents) {\n          qx.event.Utils.then(tracker, function () {\n            return target.dispatchEvent(domEvent);\n          });\n        }\n        if (gestureEvent) {\n          qx.event.Utils.then(tracker, function () {\n            return target.dispatchEvent(gestureEvent);\n          });\n        }\n        return tracker.promise;\n      } else {\n        if (\n          qx.core.Environment.get(\"browser.name\") === \"msie\" &&\n          qx.core.Environment.get(\"browser.version\") < 9\n        ) {\n          // ensure compatibility with native events for IE8\n          try {\n            domEvent.srcElement = target;\n          } catch (ex) {\n            // Nothing - strict mode prevents writing to read only properties\n          }\n        }\n\n        while (target) {\n          if (target.$$emitter) {\n            domEvent.currentTarget = target;\n            if (!domEvent._stopped) {\n              target.$$emitter.emit(type, domEvent);\n            }\n            if (gestureEvent && !gestureEvent._stopped) {\n              gestureEvent.currentTarget = target;\n              target.$$emitter.emit(gestureEvent.type, gestureEvent);\n            }\n          }\n          target = target.parentNode;\n        }\n      }\n    },\n\n    /**\n     * Dispose this object\n     */\n    dispose() {\n      this._stopObserver();\n      this.__defaultTarget = this.__emitter = null;\n    }\n  }\n});\n"
  ]
}