{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/event/handler/Gesture.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "event",
    "handler",
    "GestureCore",
    "implement",
    "IEventHandler",
    "core",
    "IDisposable",
    "statics",
    "PRIORITY",
    "Registration",
    "PRIORITY_NORMAL",
    "SUPPORTED_TYPES",
    "tap",
    "swipe",
    "longtap",
    "dbltap",
    "rotate",
    "pinch",
    "track",
    "trackstart",
    "trackend",
    "roll",
    "GESTURE_EVENTS",
    "TARGET_CHECK",
    "TARGET_DOMNODE",
    "TARGET_DOCUMENT",
    "IGNORE_CAN_HANDLE",
    "EVENT_CLASSES",
    "type",
    "Tap",
    "Swipe",
    "Rotate",
    "Pinch",
    "Track",
    "Roll",
    "construct",
    "manager",
    "__manager",
    "__window",
    "getWindow",
    "__root",
    "document",
    "apply",
    "members",
    "__listener",
    "__onDblClickWrapped",
    "__fireRollWrapped",
    "canHandleEvent",
    "target",
    "registerEvent",
    "capture",
    "unregisterEvent",
    "_initObserver",
    "lang",
    "Function",
    "listener",
    "checkAndFireGesture",
    "Gesture",
    "forEach",
    "addListener",
    "bind",
    "Environment",
    "get",
    "_onDblClick",
    "bom",
    "Event",
    "addNativeListener",
    "data",
    "client",
    "getMouseWheel",
    "_fireRoll",
    "pointerEvent",
    "__callBase",
    "getNativeEvent",
    "getType",
    "getTarget",
    "_stopObserver",
    "removeListener",
    "removeNativeListener",
    "_hasIntermediaryHandler",
    "_fireEvent",
    "domEvent",
    "eventTypeClass",
    "Pointer",
    "nodeType",
    "fireEvent",
    "Data",
    "dispose",
    "method",
    "args",
    "prototype",
    "defer",
    "addHandler",
    "window",
    "getManager",
    "getHandler"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2014 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * Unified gesture event handler.\n *\n * @require(qx.event.handler.Pointer)\n */\nqx.Class.define(\"qx.event.handler.Gesture\", {\n  extend: qx.event.handler.GestureCore,\n  implement: [qx.event.IEventHandler, qx.core.IDisposable],\n\n  statics: {\n    /** @type {Integer} Priority of this handler */\n    PRIORITY: qx.event.Registration.PRIORITY_NORMAL,\n\n    /** @type {Map} Supported event types */\n    SUPPORTED_TYPES: {\n      tap: 1,\n      swipe: 1,\n      longtap: 1,\n      dbltap: 1,\n      rotate: 1,\n      pinch: 1,\n      track: 1,\n      trackstart: 1,\n      trackend: 1,\n      roll: 1\n    },\n\n    GESTURE_EVENTS: [\n      \"gesturebegin\",\n      \"gesturefinish\",\n      \"gesturemove\",\n      \"gesturecancel\"\n    ],\n\n    /** @type {Integer} Which target check to use */\n    TARGET_CHECK:\n      qx.event.IEventHandler.TARGET_DOMNODE +\n      qx.event.IEventHandler.TARGET_DOCUMENT,\n\n    /** @type {Integer} Whether the method \"canHandleEvent\" must be called */\n    IGNORE_CAN_HANDLE: true,\n\n    EVENT_CLASSES: {\n      tap: qx.event.type.Tap,\n      longtap: qx.event.type.Tap,\n      dbltap: qx.event.type.Tap,\n      swipe: qx.event.type.Swipe,\n      rotate: qx.event.type.Rotate,\n      pinch: qx.event.type.Pinch,\n      track: qx.event.type.Track,\n      trackstart: qx.event.type.Track,\n      trackend: qx.event.type.Track,\n      roll: qx.event.type.Roll\n    }\n  },\n\n  /**\n   * Create a new instance\n   *\n   * @param manager {qx.event.Manager} Event manager for the window to use\n   */\n  construct(manager) {\n    // Define shorthands\n    this.__manager = manager;\n    this.__window = manager.getWindow();\n    this.__root = this.__window.document;\n\n    qx.event.handler.GestureCore.apply(this, [this.__root]);\n  },\n\n  members: {\n    __manager: null,\n    __window: null,\n    __root: null,\n    __listener: null,\n    __onDblClickWrapped: null,\n    __fireRollWrapped: null,\n\n    /**\n     * Getter for the internal __window object\n     * @return {Window} DOM window instance\n     */\n    getWindow() {\n      return this.__window;\n    },\n\n    // interface implementation\n    canHandleEvent(target, type) {},\n\n    // interface implementation\n    registerEvent(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n    // interface implementation\n    unregisterEvent(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n    // overridden\n    _initObserver() {\n      this.__listener = qx.lang.Function.listener(\n        this.checkAndFireGesture,\n        this\n      );\n\n      qx.event.handler.Gesture.GESTURE_EVENTS.forEach(\n        function (type) {\n          qx.event.Registration.addListener(\n            this.__root,\n            type,\n            this.__listener,\n            this\n          );\n        }.bind(this)\n      );\n\n      if (\n        qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n        qx.core.Environment.get(\"browser.documentmode\") < 9\n      ) {\n        this.__onDblClickWrapped = qx.lang.Function.listener(\n          this._onDblClick,\n          this\n        );\n\n        qx.bom.Event.addNativeListener(\n          this.__root,\n          \"dblclick\",\n          this.__onDblClickWrapped\n        );\n      }\n\n      // list to wheel events\n      var data = qx.bom.client.Event.getMouseWheel(this.__window);\n      this.__fireRollWrapped = qx.lang.Function.listener(this._fireRoll, this);\n      // replaced the useCapture (4th parameter) from this to true\n      // see https://github.com/qooxdoo/qooxdoo/pull/9292\n      qx.bom.Event.addNativeListener(\n        data.target,\n        data.type,\n        this.__fireRollWrapped,\n        true,\n        false\n      );\n    },\n\n    /**\n     * Checks if a gesture was made and fires the gesture event.\n     *\n     * @param pointerEvent {qx.event.type.Pointer} Pointer event\n     * @param type {String ? null} type of the event\n     * @param target {Element ? null} event target\n     */\n    checkAndFireGesture(pointerEvent, type, target) {\n      this.__callBase(\"checkAndFireGesture\", [\n        pointerEvent.getNativeEvent(),\n        pointerEvent.getType(),\n        pointerEvent.getTarget()\n      ]);\n    },\n\n    // overridden\n    _stopObserver() {\n      qx.event.handler.Gesture.GESTURE_EVENTS.forEach(\n        function (type) {\n          qx.event.Registration.removeListener(\n            this.__root,\n            type,\n            this.__listener\n          );\n        }.bind(this)\n      );\n\n      if (\n        qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n        qx.core.Environment.get(\"browser.documentmode\") < 9\n      ) {\n        qx.bom.Event.removeNativeListener(\n          this.__root,\n          \"dblclick\",\n          this.__onDblClickWrapped\n        );\n      }\n\n      var data = qx.bom.client.Event.getMouseWheel(this.__window);\n      qx.bom.Event.removeNativeListener(\n        data.target,\n        data.type,\n        this.__fireRollWrapped\n      );\n    },\n\n    // overridden\n    _hasIntermediaryHandler(target) {\n      /* This check is irrelevant for qx.Desktop since there is only one\n         gesture handler */\n      return false;\n    },\n\n    /**\n     * Fire a touch event with the given parameters\n     *\n     * @param domEvent {Event} DOM event\n     * @param type {String ? null} type of the event\n     * @param target {Element ? null} event target\n     */\n    _fireEvent(domEvent, type, target) {\n      if (!target) {\n        target = qx.bom.Event.getTarget(domEvent);\n      }\n\n      if (!type) {\n        type = domEvent.type;\n      }\n\n      var eventTypeClass =\n        qx.event.handler.Gesture.EVENT_CLASSES[type] || qx.event.type.Pointer;\n\n      if (target && target.nodeType) {\n        qx.event.Registration.fireEvent(target, type, eventTypeClass, [\n          domEvent,\n          target,\n          null,\n          true,\n          true\n        ]);\n      }\n\n      // Fire user action event\n      qx.event.Registration.fireEvent(\n        this.__window,\n        \"useraction\",\n        qx.event.type.Data,\n        [type]\n      );\n    },\n\n    /**\n     * Dispose this object\n     */\n    dispose() {\n      this._stopObserver();\n      this.__callBase(\"dispose\");\n      this.__manager =\n        this.__window =\n        this.__root =\n        this.__onDblClickWrapped =\n          null;\n    },\n\n    /**\n     * Call overridden method.\n     *\n     * @param method {String} Name of the overridden method.\n     * @param args {Array} Arguments.\n     */\n    __callBase(method, args) {\n      qx.event.handler.GestureCore.prototype[method].apply(this, args || []);\n    }\n  },\n\n  defer(statics) {\n    qx.event.Registration.addHandler(statics);\n    qx.event.Registration.addListener(window, \"appinitialized\", () => {\n      qx.event.Registration.getManager(document).getHandler(statics);\n    });\n  }\n});\n"
  ]
}