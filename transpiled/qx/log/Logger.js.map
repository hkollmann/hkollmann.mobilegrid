{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/log/Logger.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__level",
    "setLevel",
    "value",
    "getLevel",
    "setTreshold",
    "__buffer",
    "setMaxMessages",
    "getTreshold",
    "getMaxMessages",
    "__appenders",
    "__appendersByName",
    "__filters",
    "__id",
    "register",
    "appender",
    "$$id",
    "id",
    "appenderName",
    "classname",
    "entries",
    "getAllLogEvents",
    "i",
    "l",
    "length",
    "entry",
    "appenders",
    "__getAppenders",
    "loggerName",
    "level",
    "process",
    "unregister",
    "addFilter",
    "logger",
    "RegExp",
    "push",
    "loggerMatch",
    "resetFilters",
    "debug",
    "object",
    "message",
    "log",
    "Logger",
    "__log",
    "arguments",
    "info",
    "warn",
    "error",
    "trace",
    "isLoggerEnabled",
    "dev",
    "StackTrace",
    "getStackTrace",
    "args",
    "lang",
    "Array",
    "fromArguments",
    "join",
    "deprecatedMethodWarning",
    "fcn",
    "msg",
    "deprecatedClassWarning",
    "clazz",
    "deprecatedEventWarning",
    "event",
    "deprecatedMixinWarning",
    "deprecatedConstantWarning",
    "constant",
    "deprecateMethodOverriding",
    "baseclass",
    "methodName",
    "clear",
    "clearHistory",
    "RingBuffer",
    "__levels",
    "__appendersCache",
    "__getLoggerName",
    "Object",
    "keys",
    "start",
    "items",
    "__serialize",
    "time",
    "Date",
    "offset",
    "LOADSTART",
    "win",
    "window",
    "isQxCoreObject",
    "toHashCode",
    "$$type",
    "constructor",
    "className",
    "levels",
    "cacheId",
    "undefined",
    "filter",
    "test",
    "__detect",
    "type",
    "nodeType",
    "Error",
    "name",
    "toString",
    "deep",
    "text",
    "nodeValue",
    "nodeName",
    "toLowerCase",
    "Function",
    "getName",
    "getStackTraceFromError",
    "basename",
    "temp",
    "sorted",
    "key",
    "sort",
    "number",
    "defer",
    "logs",
    "$$logs"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * John Spackman (john.spackman@zenesis.com)\n\n************************************************************************ */\n\n/**\n * Main qooxdoo logging class.\n *\n * Used as central logging feature by qx.core.Object.\n *\n * Extremely modular and lightweight to support logging at bootstrap and\n * at shutdown as well.\n *\n * * Supports dynamic appenders to push the output to the user\n * * Supports buffering of the last 50 messages (configurable)\n * * Supports different debug levels (\"debug\", \"info\", \"warn\" or \"error\")\n * * Simple data serialization for incoming messages\n *\n * Typical use of this class is via qx.core.MLogging which is included into most\n * classes, so you would use \"this.debug(...)\" etc, but qx.log.Logger.debug(),\n * .warn(), .error(), .info(), and .trace() can be used directly for static code.\n *\n * The first parameter is expected to be the context object, ie the object which\n * is sending the log; this can be null but that will prevent the filtering from\n * filtering on class name so ideally it will be a real qx.core.Object derived\n * object.  Other parameters are any Javascript object which will be serialized\n * into the log message\n *\n * <pre class=\"javascript\">\n *  qx.log.Logger.warn(myObject, \"This is a message to log\", myParam, otherData);\n * </pre>\n *\n *\n * The output of logging is controlled by \"appenders\", which are classes that\n * accept a log message and output it somehow (see examples in qx.log.appender.*);\n * typical examples are qx.log.appender.Console which outputs to the browser\n * console, or qx.log.appender.Native which outputs messages into a popup\n * window as part of your Qooxdoo UI.\n *\n * While it's quick and easy to add logging calls to code as and when you need it,\n * it is often convenient to control which logging calls output messages at runtime\n * rather than having to edit code. @see qx.log.Logger#addFilter\n *\n * @require(qx.dev.StackTrace)\n */\nqx.Bootstrap.define(\"qx.log.Logger\", {\n  statics: {\n    /*\n    ---------------------------------------------------------------------------\n      CONFIGURATION\n    ---------------------------------------------------------------------------\n    */\n\n    __level: \"debug\",\n\n    /**\n     * Configures the minimum log level required for new messages.\n     *\n     * @param value {String} One of \"debug\", \"info\", \"warn\" or \"error\".\n     */\n    setLevel(value) {\n      this.__level = value;\n    },\n\n    /**\n     * Returns the currently configured minimum log level required for new\n     * messages.\n     *\n     * @return {Integer} Debug level\n     */\n    getLevel() {\n      return this.__level;\n    },\n\n    /**\n     * Configures the number of messages to be kept in the buffer.\n     *\n     * @param value {Integer} Any positive integer\n     */\n    setTreshold(value) {\n      this.__buffer.setMaxMessages(value);\n    },\n\n    /**\n     * Returns the currently configured number of messages to be kept in the\n     * buffer.\n     *\n     * @return {Integer} Treshold value\n     */\n    getTreshold() {\n      return this.__buffer.getMaxMessages();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      APPENDER MANAGEMENT\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {Map} Map of all known appenders by ID */\n    __appenders: [],\n\n    /** @type {Map} Map of all known appenders by name */\n    __appendersByName: {},\n\n    /** @type {Array} Array of filters to apply when selecting appenders to append to */\n    __filters: [],\n\n    /** @type {Integer} Last free appender ID */\n    __id: 0,\n\n    /**\n     * Registers the given appender and inserts the last cached messages.\n     *\n     * Note that an appender is named by it's class name, unless it has a property\n     * called `appenderName`\n     *\n     * @param appender {Class} A static appender class supporting at\n     *   least a <code>process()</code> method to handle incoming messages.\n     */\n    register(appender) {\n      if (appender.$$id) {\n        return;\n      }\n\n      // Register appender\n      var id = this.__id++;\n      var appenderName = appender.appenderName || appender.classname;\n      this.__appenders[id] = appender;\n      this.__appendersByName[appenderName] = appender;\n      appender.$$id = id;\n\n      // Insert previous messages\n      var entries = this.__buffer.getAllLogEvents();\n      for (var i = 0, l = entries.length; i < l; i++) {\n        var entry = entries[i];\n\n        var appenders = this.__getAppenders(entry.loggerName, entry.level);\n        if (appenders[appenderName]) {\n          appender.process(entry);\n        }\n      }\n    },\n\n    /**\n     * Unregisters the given appender\n     *\n     * @param appender {Class} A static appender class\n     */\n    unregister(appender) {\n      var id = appender.$$id;\n      if (id == null) {\n        return;\n      }\n\n      var appenderName = appender.appenderName || appender.classname;\n      delete this.__appendersByName[appenderName];\n      delete this.__appenders[id];\n      delete appender.$$id;\n    },\n\n    /**\n     * Adds a filter that specifies the appenders to use for a given logger name (classname).\n     *\n     * By default, every log entry is output to all appenders but you can change this\n     * behaviour by calling qx.log.Logger.addFilter; every log message is associated\n     * with a class and a logging level (ie debug, warn, info, error, etc) and you can\n     * apply a filter on either one.\n     *\n     * For example, to restrict the output to only allow qx.ui.* classes to output debug\n     * logging information you would use this:\n     *\n     *  <pre class=\"javascript\">\n     *    qx.log.Logger.addFilter(/^qx\\.ui/, null, \"debug\");\n     *  </pre>\n     *\n     * Note that while the default is to log everything, as soon as you apply one filter\n     * you are specifying an exhaustive list of classes; so if you use the above example,\n     * the ONLY classes that will be able to log is qx.ui.*.  If you want to use multiple\n     * classes to the output, just add more addFilter calls.\n     *\n     * The logging level (eg \"debug\", \"error\", etc) is greater than or equal to - so in\n     * the above example, debug, error, warn, and info will be output but trace will not.\n     *\n     * The second parameter to addFilter is the classname of the appender to use; this\n     * allows you to specify that log messages only go to one destination; for example:\n     *\n     *  <pre class=\"javascript\">\n     *    qx.log.Logger.addFilter(/^qx\\.ui/, \"qx.log.appender.Console\", \"warn\");\n     *    qx.log.Logger.addFilter(/^qx\\.io/, \"qx.log.appender.Native\", \"debug\");\n     *    qx.log.Logger.addFilter(/^qx\\.io/, \"qx.log.appender.Console\", \"error\");\n     *  </pre>\n     *\n     * In this example, qx.ui.* will only go to the Console appender and only if a warning\n     * is issued; qx.io.* will go to Native for debug, error, warn, and info and to\n     * Console for error, warn, and info\n     *\n     * Note that an appender is named by it's class name, unless it has a property\n     * called `appenderName`.\n     *\n     * @param logger {String|RegExp} the pattern to match in the logger name\n     * @param appenderName {String?} the name of the appender class, if undefined then all appenders\n     * @param level {String?} the minimum logging level to use the appender, if undefined the default level is used\n     */\n    addFilter(logger, appenderName, level) {\n      if (typeof logger == \"string\") {\n        logger = new RegExp(logger);\n      }\n      this.__filters.push({\n        loggerMatch: logger,\n        level: level || this.__level,\n        appenderName: appenderName\n      });\n    },\n\n    /**\n     * Reset all filters\n     */\n    resetFilters() {\n      this.__filters = [];\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      USER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sending a message at level \"debug\" to the logger.\n     *\n     * @param object {Object} Contextual object (either instance or static class)\n     * @param message {var} Any number of arguments supported. An argument may\n     *   have any JavaScript data type. All data is serialized immediately and\n     *   does not keep references to other objects.\n     */\n    debug(object, message) {\n      qx.log.Logger.__log(\"debug\", arguments);\n    },\n\n    /**\n     * Sending a message at level \"info\" to the logger.\n     *\n     * @param object {Object} Contextual object (either instance or static class)\n     * @param message {var} Any number of arguments supported. An argument may\n     *   have any JavaScript data type. All data is serialized immediately and\n     *   does not keep references to other objects.\n     */\n    info(object, message) {\n      qx.log.Logger.__log(\"info\", arguments);\n    },\n\n    /**\n     * Sending a message at level \"warn\" to the logger.\n     *\n     * @param object {Object} Contextual object (either instance or static class)\n     * @param message {var} Any number of arguments supported. An argument may\n     *   have any JavaScript data type. All data is serialized immediately and\n     *   does not keep references to other objects.\n     */\n    warn(object, message) {\n      qx.log.Logger.__log(\"warn\", arguments);\n    },\n\n    /**\n     * Sending a message at level \"error\" to the logger.\n     *\n     * @param object {Object} Contextual object (either instance or static class)\n     * @param message {var} Any number of arguments supported. An argument may\n     *   have any JavaScript data type. All data is serialized immediately and\n     *   does not keep references to other objects.\n     */\n    error(object, message) {\n      qx.log.Logger.__log(\"error\", arguments);\n    },\n\n    /**\n     * Prints the current stack trace at level \"info\"\n     *\n     * @param object {Object?} Contextual object (either instance or static class)\n     * @param message {var} Any number of arguments supported. An argument may\n     *   have any JavaScript data type. All data is serialized immediately and\n     *   does not keep references to other objects.\n     */\n    trace(object, message) {\n      if (qx.log.Logger.isLoggerEnabled(\"trace\", object)) {\n        var trace = qx.dev.StackTrace.getStackTrace();\n        var args = qx.lang.Array.fromArguments(arguments);\n        args.push(trace.join(\"\\n\"));\n        qx.log.Logger.__log(\"trace\", args);\n      }\n    },\n\n    /**\n     * Prints a method deprecation warning and a stack trace if the setting\n     * <code>qx.debug</code> is set to <code>true</code>.\n     *\n     * @param fcn {Function} reference to the deprecated function. This is\n     *     arguments.callee if the calling method is to be deprecated.\n     * @param msg {String?} Optional message to be printed.\n     */\n    deprecatedMethodWarning(fcn, msg) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var functionName = qx.lang.Function.getName(fcn);\n        this.warn(\n          \"The method '\" +\n            functionName +\n            \"' is deprecated: \" +\n            (msg ||\n              \"Please consult the API documentation of this method for alternatives.\")\n        );\n\n        this.trace();\n      }\n    },\n\n    /**\n     * Prints a class deprecation warning and a stack trace if the setting\n     * <code>qx.debug</code> is set to <code>true</code>.\n     *\n     * @param clazz {Class} reference to the deprecated class.\n     * @param msg {String?} Optional message to be printed.\n     */\n    deprecatedClassWarning(clazz, msg) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var className = clazz.classname || \"unknown\";\n        this.warn(\n          \"The class '\" +\n            className +\n            \"' is deprecated: \" +\n            (msg ||\n              \"Please consult the API documentation of this class for alternatives.\")\n        );\n\n        this.trace();\n      }\n    },\n\n    /**\n     * Prints an event deprecation warning and a stack trace if the setting\n     * <code>qx.debug</code> is set to <code>true</code>.\n     *\n     * @param clazz {Class} reference to the deprecated class.\n     * @param event {String} deprecated event name.\n     * @param msg {String?} Optional message to be printed.\n     */\n    deprecatedEventWarning(clazz, event, msg) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var className = clazz.self ? clazz.self.classname : \"unknown\";\n        this.warn(\n          \"The event '\" +\n            (event || \"unknown\") +\n            \"' from class '\" +\n            className +\n            \"' is deprecated: \" +\n            (msg ||\n              \"Please consult the API documentation of this class for alternatives.\")\n        );\n\n        this.trace();\n      }\n    },\n\n    /**\n     * Prints a mixin deprecation warning and a stack trace if the setting\n     * <code>qx.debug</code> is set to <code>true</code>.\n     *\n     * @param clazz {Class} reference to the deprecated mixin.\n     * @param msg {String?} Optional message to be printed.\n     */\n    deprecatedMixinWarning(clazz, msg) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var mixinName = clazz ? clazz.name : \"unknown\";\n        this.warn(\n          \"The mixin '\" +\n            mixinName +\n            \"' is deprecated: \" +\n            (msg ||\n              \"Please consult the API documentation of this class for alternatives.\")\n        );\n\n        this.trace();\n      }\n    },\n\n    /**\n     * Prints a constant deprecation warning and a stacktrace if the setting\n     * <code>qx.debug</code> is set to <code>true</code> AND the browser supports\n     * __defineGetter__!\n     *\n     * @param clazz {Class} The class the constant is attached to.\n     * @param constant {String} The name of the constant as string.\n     * @param msg {String} Optional message to be printed.\n     */\n    deprecatedConstantWarning(clazz, constant, msg) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        // check if __defineGetter__ is available\n        if (clazz.__defineGetter__) {\n          var self = this;\n          var constantValue = clazz[constant];\n          clazz.__defineGetter__(constant, function () {\n            self.warn(\n              \"The constant '\" +\n                constant +\n                \"' is deprecated: \" +\n                (msg ||\n                  \"Please consult the API documentation for alternatives.\")\n            );\n\n            self.trace();\n            return constantValue;\n          });\n        }\n      }\n    },\n\n    /**\n     * Prints a deprecation warning and a stacktrace when a subclass overrides\n     * the passed method name. The deprecation is only printed if the setting\n     * <code>qx.debug</code> is set to <code>true</code>.\n     *\n     *\n     * @param object {qx.core.Object} Instance to check for overriding.\n     * @param baseclass {Class} The baseclass as starting point.\n     * @param methodName {String} The method name which is deprecated for overriding.\n     * @param msg {String?} Optional message to be printed.\n     */\n    deprecateMethodOverriding(object, baseclass, methodName, msg) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var clazz = object.constructor;\n\n        while (clazz.classname !== baseclass.classname) {\n          if (clazz.prototype.hasOwnProperty(methodName)) {\n            this.warn(\n              `The method ' ${clazz.classname}.${methodName}' overrides a deprecated method:\n              (msg || \"Please consult the API documentation for alternatives.\")\n              `\n            );\n\n            this.trace();\n            break;\n          }\n          clazz = clazz.superclass;\n        }\n      }\n    },\n\n    /**\n     * Deletes the current buffer. Does not influence message handling of the\n     * connected appenders.\n     *\n     */\n    clear() {\n      this.__buffer.clearHistory();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAL LOGGING IMPLEMENTATION\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {qx.log.appender.RingBuffer} Message buffer of previously fired messages. */\n    __buffer: new qx.log.appender.RingBuffer(50),\n\n    /** @type {Map} Numeric translation of log levels */\n    __levels: {\n      trace: 0,\n      debug: 1,\n      info: 2,\n      warn: 3,\n      error: 4\n    },\n\n    /** @type {Map} cache of appenders for a given logger and level */\n    __appendersCache: {},\n\n    /**\n     * Detects the name of the logger to use for an object\n     *\n     * @param object {Object} Contextual object (either instance or static class)\n     * @return {String} Logger name\n     */\n    __getLoggerName(object) {\n      if (object) {\n        if (object.classname) {\n          return object.classname;\n        }\n        if (typeof object == \"string\") {\n          return object;\n        }\n      }\n      return \"[default]\";\n    },\n\n    /**\n     * Detects whether a logger level is enabled for an object\n     *\n     * @param level {String} One of \"trace\", \"debug\", \"info\", \"warn\" or \"error\"\n     * @param object {Object} Contextual object (either instance or static class)\n     * @return {Boolean} True if the logger is enabled\n     */\n    isLoggerEnabled(level, object) {\n      var loggerName = this.__getLoggerName(object);\n      var appenders = this.__getAppenders(loggerName, level);\n      return !!Object.keys(appenders).length;\n    },\n\n    /**\n     * Internal logging main routine.\n     *\n     * @param level {String} One of \"trace\", \"debug\", \"info\", \"warn\" or \"error\"\n     * @param args {Array} List of other arguments, where the first is\n     *   taken as the context object.\n     */\n    __log(level, args) {\n      // Get object and determine appenders\n      var object = args.length < 2 ? null : args[0];\n      var loggerName = this.__getLoggerName(object);\n      var appenders = this.__getAppenders(loggerName, level);\n      if (!Object.keys(appenders).length) {\n        return;\n      }\n\n      // Serialize and cache\n      var start = object ? 1 : 0;\n      var items = [];\n      for (var i = start, l = args.length; i < l; i++) {\n        items.push(this.__serialize(args[i], true));\n      }\n\n      // Build entry\n      var time = new Date();\n      var entry = {\n        time: time,\n        offset: time - qx.Bootstrap.LOADSTART,\n        level: level,\n        loggerName: loggerName,\n        items: items,\n        // store window to allow cross frame logging\n        win: window\n      };\n\n      // Add relation fields\n      if (object) {\n        if (qx.Bootstrap.isQxCoreObject(object)) {\n          entry.object = object.toHashCode();\n        }\n        if (object.$$type) {\n          entry.clazz = object;\n        } else if (object.constructor) {\n          entry.clazz = object.constructor;\n        }\n      }\n\n      this.__buffer.process(entry);\n\n      // Send to appenders\n      for (var classname in appenders) {\n        appenders[classname].process(entry);\n      }\n    },\n\n    /**\n     * Finds the appenders for a given classname\n     *\n     * @param className {String} Name of the class\n     * @param level {String} the minimum logging level to use the appender\n     * @return {Array} list of appenders\n     */\n    __getAppenders(className, level) {\n      var levels = this.__levels;\n\n      // If no filters, then all appenders apply\n      if (!this.__filters.length) {\n        // Check the default level\n        if (levels[level] < levels[this.__level]) {\n          return [];\n        }\n        return this.__appendersByName;\n      }\n\n      // Check the cache\n      var cacheId = className + \"|\" + level;\n      var appenders = this.__appendersCache[cacheId];\n      if (appenders !== undefined) {\n        return appenders;\n      }\n\n      appenders = {};\n      for (var i = 0; i < this.__filters.length; i++) {\n        var filter = this.__filters[i];\n\n        // Filters only apply to certain levels\n        if (levels[level] < levels[filter.level]) {\n          continue;\n        }\n\n        // No duplicates\n        if (filter.appenderName && appenders[filter.appenderName]) {\n          continue;\n        }\n\n        // Test\n        if (!filter.loggerMatch || filter.loggerMatch.test(className)) {\n          if (filter.appenderName) {\n            appenders[filter.appenderName] =\n              this.__appendersByName[filter.appenderName];\n          } else {\n            return (this.__appendersCache[cacheId] = this.__appendersByName);\n          }\n        }\n      }\n\n      return (this.__appendersCache[cacheId] = appenders);\n    },\n\n    /**\n     * Detects the type of the variable given.\n     *\n     * @param value {var} Incoming value\n     * @return {String} Type of the incoming value. Possible values:\n     *   \"undefined\", \"null\", \"boolean\", \"number\", \"string\",\n     *   \"function\", \"array\", \"error\", \"map\",\n     *   \"class\", \"instance\", \"node\", \"stringify\", \"unknown\"\n     */\n    __detect(value) {\n      if (value === undefined) {\n        return \"undefined\";\n      } else if (value === null) {\n        return \"null\";\n      }\n\n      if (value.$$type) {\n        return \"class\";\n      }\n\n      var type = typeof value;\n\n      if (\n        type === \"function\" ||\n        type == \"string\" ||\n        type === \"number\" ||\n        type === \"boolean\"\n      ) {\n        return type;\n      } else if (type === \"object\") {\n        if (value.nodeType) {\n          return \"node\";\n          // In Gecko, DOMException doesn't inherit from Error\n        } else if (value instanceof Error || (value.name && value.message)) {\n          return \"error\";\n        } else if (value.classname) {\n          return \"instance\";\n        } else if (value instanceof Array) {\n          return \"array\";\n        } else if (value instanceof Date) {\n          return \"date\";\n        } else {\n          return \"map\";\n        }\n      }\n\n      if (value.toString) {\n        return \"stringify\";\n      }\n\n      return \"unknown\";\n    },\n\n    /**\n     * Serializes the incoming value. If it is a singular value, the result is\n     * a simple string. For an array or a map the result can also be a\n     * serialized string of a limited number of individual items.\n     *\n     * @param value {var} Incoming value\n     * @param deep {Boolean?false} Whether arrays and maps should be\n     *    serialized for a limited number of items\n     * @return {Map} Contains the keys <code>type</code>, <code>text</code> and\n     * <code>trace</code>.\n     */\n    __serialize(value, deep) {\n      var type = this.__detect(value);\n      var text = \"unknown\";\n      var trace = [];\n\n      switch (type) {\n        case \"null\":\n        case \"undefined\":\n          text = type;\n          break;\n\n        case \"string\":\n        case \"number\":\n        case \"boolean\":\n        case \"date\":\n          text = value;\n          break;\n\n        case \"node\":\n          if (value.nodeType === 9) {\n            text = \"document\";\n          } else if (value.nodeType === 3) {\n            text = \"text[\" + value.nodeValue + \"]\";\n          } else if (value.nodeType === 1) {\n            text = value.nodeName.toLowerCase();\n            if (value.id) {\n              text += \"#\" + value.id;\n            }\n          } else {\n            text = \"node\";\n          }\n          break;\n\n        case \"function\":\n          text = qx.lang.Function.getName(value) || type;\n          break;\n\n        case \"instance\":\n        case \"class\":\n        case \"stringify\":\n          text = value.toString();\n          break;\n\n        case \"error\":\n          trace = qx.dev.StackTrace.getStackTraceFromError(value);\n          text =\n            (value.basename ? value.basename + \": \" : \"\") + value.toString();\n          break;\n\n        case \"array\":\n          if (deep) {\n            text = [];\n            for (var i = 0, l = value.length; i < l; i++) {\n              if (text.length > 20) {\n                text.push(\"...(+\" + (l - i) + \")\");\n                break;\n              }\n\n              text.push(this.__serialize(value[i], false));\n            }\n          } else {\n            text = \"[...(\" + value.length + \")]\";\n          }\n          break;\n\n        case \"map\":\n          if (deep) {\n            var temp;\n\n            // Produce sorted key list\n            var sorted = [];\n            for (var key in value) {\n              sorted.push(key);\n            }\n            sorted.sort();\n\n            // Temporary text list\n            text = [];\n            for (var i = 0, l = sorted.length; i < l; i++) {\n              if (text.length > 20) {\n                text.push(\"...(+\" + (l - i) + \")\");\n                break;\n              }\n\n              // Additional storage of hash-key\n              key = sorted[i];\n              temp = this.__serialize(value[key], false);\n              temp.key = key;\n              text.push(temp);\n            }\n          } else {\n            var number = 0;\n            for (var key in value) {\n              number++;\n            }\n            text = \"{...(\" + number + \")}\";\n          }\n          break;\n      }\n\n      return {\n        type: type,\n        text: text,\n        trace: trace\n      };\n    }\n  },\n\n  defer(statics) {\n    var logs = qx.Bootstrap.$$logs;\n    for (var i = 0; i < logs.length; i++) {\n      statics.__log(logs[i][0], logs[i][1]);\n    }\n\n    qx.Bootstrap.debug = statics.debug;\n    qx.Bootstrap.info = statics.info;\n    qx.Bootstrap.warn = statics.warn;\n    qx.Bootstrap.error = statics.error;\n    qx.Bootstrap.trace = statics.trace;\n  }\n});\n"
  ]
}