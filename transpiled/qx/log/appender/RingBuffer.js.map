{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/log/appender/RingBuffer.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "util",
    "RingBuffer",
    "construct",
    "maxMessages",
    "setMaxMessages",
    "members",
    "setMaxEntries",
    "getMaxMessages",
    "getMaxEntries",
    "process",
    "entry",
    "addEntry",
    "getAllLogEvents",
    "getAllEntries",
    "retrieveLogEvents",
    "count",
    "startingFromMark",
    "getEntries",
    "clearHistory",
    "clear",
    "log",
    "appender"
  ],
  "mappings": ";;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,4BAApB,EAAkD;AAChDC,IAAAA,MAAM,EAAEL,EAAE,CAACM,IAAH,CAAQC,UADgC;;AAGhD;AACF;AACA;AACEC,IAAAA,SANgD,qBAMtCC,WANsC,EAMzB;AACrB,WAAKC,cAAL,CAAoBD,WAAW,IAAI,EAAnC;AACD,KAR+C;AAUhDE,IAAAA,OAAO,EAAE;AACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACID,MAAAA,cATO,0BASQD,WATR,EASqB;AAC1B,aAAKG,aAAL,CAAmBH,WAAnB;AACD,OAXM;;AAaP;AACJ;AACA;AACA;AACA;AACII,MAAAA,cAlBO,4BAkBU;AACf,eAAO,KAAKC,aAAL,EAAP;AACD,OApBM;;AAsBP;AACJ;AACA;AACA;AACA;AACIC,MAAAA,OA3BO,mBA2BCC,KA3BD,EA2BQ;AACb,aAAKC,QAAL,CAAcD,KAAd;AACD,OA7BM;;AA+BP;AACJ;AACA;AACA;AACA;AACIE,MAAAA,eApCO,6BAoCW;AAChB,eAAO,KAAKC,aAAL,EAAP;AACD,OAtCM;;AAwCP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,iBAlDO,6BAkDWC,KAlDX,EAkDkBC,gBAlDlB,EAkDoC;AACzC,eAAO,KAAKC,UAAL,CAAgBF,KAAhB,EAAuBC,gBAAvB,CAAP;AACD,OApDM;;AAsDP;AACJ;AACA;AACIE,MAAAA,YAzDO,0BAyDQ;AACb,aAAKC,KAAL;AACD;AA3DM;AAVuC,GAAlD;AA/BAzB,EAAAA,EAAE,CAAC0B,GAAH,CAAOC,QAAP,CAAgBpB,UAAhB,CAA2BJ,aAA3B,GAA2CA,aAA3C",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n     2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Carsten Lergenmueller (carstenl)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * An appender that writes all messages to a memory container. The messages\n * can be retrieved later, f. i. when an error dialog pops up and the question\n * arises what actions have caused the error.\n *\n * A mark feature also exists which can be used to remember a point in time.\n * When retrieving log events, it is possible to get only those events\n * after the marked time. This is useful if data from the buffer is extracted\n * and f. i. sent to a logging system. Whenever this happens, a mark() call\n * can be used so that the next extraction will only get new data.\n */\nqx.Bootstrap.define(\"qx.log.appender.RingBuffer\", {\n  extend: qx.util.RingBuffer,\n\n  /**\n   * @param maxMessages {Integer?50} Maximum number of messages in the buffer\n   */\n  construct(maxMessages) {\n    this.setMaxMessages(maxMessages || 50);\n  },\n\n  members: {\n    /**\n     * Set the maximum number of messages to hold. If null the number of\n     * messages is not limited.\n     *\n     * Warning: Changing this property will clear the events logged so far.\n     *\n     * @param maxMessages {Integer} the maximum number of messages to hold\n     */\n    setMaxMessages(maxMessages) {\n      this.setMaxEntries(maxMessages);\n    },\n\n    /**\n     * Get the maximum number of messages to hold\n     *\n     * @return {Integer} the maximum number of messages\n     */\n    getMaxMessages() {\n      return this.getMaxEntries();\n    },\n\n    /**\n     * Processes a single log entry\n     *\n     * @param entry {Map} The entry to process\n     */\n    process(entry) {\n      this.addEntry(entry);\n    },\n\n    /**\n     * Returns all stored log events\n     *\n     * @return {Array} array of stored log events\n     */\n    getAllLogEvents() {\n      return this.getAllEntries();\n    },\n\n    /**\n     * Returns log events which have been logged previously.\n     *\n     * @param count {Integer} The number of events to retrieve. If there are\n     *    more events than the given count, the oldest ones will not be returned.\n     *\n     * @param startingFromMark {Boolean ? false} If true, only entries since the last call to mark()\n     *                                           will be returned\n     * @return {Array} array of stored log events\n     */\n    retrieveLogEvents(count, startingFromMark) {\n      return this.getEntries(count, startingFromMark);\n    },\n\n    /**\n     * Clears the log history\n     */\n    clearHistory() {\n      this.clear();\n    }\n  }\n});\n"
  ]
}