{
  "version": 3,
  "sources": [
    "/home/runner/work/hkollmann.mobilegrid/hkollmann.mobilegrid/node_modules/@qooxdoo/framework/source/class/qx/data/SingleValueBinding.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "__bindings",
    "__bindingsByTarget",
    "bind",
    "sourceObject",
    "sourcePropertyChain",
    "targetObject",
    "targetPropertyChain",
    "options",
    "targetListenerMap",
    "__setUpTargetBinding",
    "propertyNames",
    "split",
    "arrayIndexValues",
    "__checkForArrayInPropertyChain",
    "sources",
    "listeners",
    "listenerIds",
    "eventNames",
    "source",
    "initialPromise",
    "i",
    "length",
    "propertyName",
    "push",
    "eventName",
    "__getEventNameForProperty",
    "core",
    "AssertionError",
    "Object",
    "hasProperty",
    "constructor",
    "log",
    "Logger",
    "warn",
    "__setInitialValue",
    "undefined",
    "itemIndex",
    "currentValue",
    "getItem",
    "__bindEventToProperty",
    "lang",
    "String",
    "firstUp",
    "context",
    "index",
    "listener",
    "Function",
    "__chainListener",
    "addListener",
    "ex",
    "removeListenerById",
    "targets",
    "targetIds",
    "id",
    "type",
    "targetListenerIds",
    "__storeBinding",
    "onUpdate",
    "j",
    "converter",
    "ignoreConverter",
    "currentSourceChain",
    "slice",
    "join",
    "match",
    "RegExp",
    "__setTargetValue",
    "__resetTargetValue",
    "implementsInterface",
    "data",
    "IListData",
    "target",
    "firstUpPropName",
    "currentIndex",
    "getLength",
    "SingleValueBinding",
    "updateTarget",
    "value",
    "resolvePropertyChain",
    "__convertValue",
    "o",
    "propertyChain",
    "properties",
    "__getPropertyChainArray",
    "__getTargetFromChain",
    "__getEventForProperty",
    "supportsEvent",
    "lastProperty",
    "__getArrayIndex",
    "setItem",
    "arrayExp",
    "arrayMatch",
    "replace",
    "filter",
    "prop",
    "targetProperties",
    "property",
    "arrIndex",
    "result",
    "e",
    "ValidationError",
    "onSetFail",
    "name",
    "endsWith",
    "arrayIndex",
    "substring",
    "indexOf",
    "Error",
    "isNaN",
    "parseInt",
    "splice",
    "sourceEvent",
    "targetProperty",
    "bindListener",
    "start",
    "getData",
    "end",
    "hash",
    "toHashCode",
    "binding",
    "model",
    "getModel",
    "lastIndexOf",
    "propertieDefinition",
    "getPropertyDefinition",
    "check",
    "__defaultConversion",
    "sourceProperty",
    "event",
    "targetCheck",
    "dataType",
    "Type",
    "getClass",
    "parseFloat",
    "removeBindingFromObject",
    "error",
    "classname",
    "bindings",
    "getAllBindingsForObject",
    "Array",
    "remove",
    "removeAllBindingsForObject",
    "object",
    "removeRelatedBindings",
    "relatedObject",
    "sourceBindings",
    "targetBindings",
    "clone",
    "unique",
    "concat",
    "removeAllBindings",
    "ObjectRegistry",
    "fromHashCode",
    "getAllBindings",
    "showBindingInLog",
    "message",
    "debug",
    "showAllBindingsInLog"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,4BAAhB,EAA8C;AAC5CC,IAAAA,OAAO,EAAE;AACP;AACAC,MAAAA,SAAU,EAAE,EAFL;;AAIP;AACAC,MAAAA,SAAkB,EAAE,EALb;;AAOP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,IA3FO,gBA4FLC,YA5FK,EA6FLC,mBA7FK,EA8FLC,YA9FK,EA+FLC,mBA/FK,EAgGLC,OAhGK,EAiGL;AACA;AAQA;AACA,YAAIC,iBAAiB,GAAG,KAAKC,SAAL,CACtBN,YADsB,EAEtBC,mBAFsB,EAGtBC,YAHsB,EAItBC,mBAJsB,EAKtBC,OALsB,CAAxB,CAVA,CAkBA;;;AACA,YAAIG,aAAa,GAAGN,mBAAmB,CAACO,KAApB,CAA0B,GAA1B,CAApB,CAnBA,CAqBA;;AACA,YAAIC,gBAAgB,GAAG,KAAKC,SAAL,CAAoCH,aAApC,CAAvB;;AACA,YAAII,OAAO,GAAG,EAAd;AACA,YAAIC,SAAS,GAAG,EAAhB;AACA,YAAIC,WAAW,GAAG,EAAlB;AACA,YAAIC,UAAU,GAAG,EAAjB;AAC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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * Single-value binding is a core component of the data binding package.\n */\nqx.Class.define(\"qx.data.SingleValueBinding\", {\n  statics: {\n    /** internal reference for all bindings indexed by source object */\n    __bindings: {},\n\n    /** internal reference for all bindings indexed by target object */\n    __bindingsByTarget: {},\n\n    /**\n     * The function is responsible for binding a source objects property to\n     * a target objects property. Both properties have to have the usual qooxdoo\n     * getter and setter. The source property also needs to fire change-events\n     * on every change of its value.\n     * Please keep in mind, that this binding is unidirectional. If you need\n     * a binding in both directions, you have to use two of this bindings.\n     *\n     * It's also possible to bind some kind of a hierarchy as a source. This\n     * means that you can separate the source properties with a dot and bind\n     * by that the object referenced to this property chain.\n     * Example with an object 'a' which has object 'b' stored in its 'child'\n     * property. Object b has a string property named abc:\n     * <pre><code>\n     * qx.data.SingleValueBinding.bind(a, \"child.abc\", textfield, \"value\");\n     * </code></pre>\n     * In that case, if the property abc of b changes, the textfield will\n     * automatically contain the new value. Also if the child of a changes, the\n     * new value (abc of the new child) will be in the textfield.\n     *\n     * There is also a possibility of binding an array. Therefore the array\n     * {@link qx.data.IListData} is needed because this array has change events\n     * which the native does not. Imagine a qooxdoo object a which has a\n     * children property containing an array holding more of its own kind.\n     * Every object has a name property as a string.\n     * <pre>\n     * var svb = qx.data.SingleValueBinding;\n     * // bind the first child's name of 'a' to a textfield\n     * svb.bind(a, \"children[0].name\", textfield, \"value\");\n     * // bind the last child's name of 'a' to a textfield\n     * svb.bind(a, \"children[last].name\", textfield2, \"value\");\n     * // also deeper bindings are possible\n     * svb.bind(a, \"children[0].children[0].name\", textfield3, \"value\");\n     * </pre>\n     *\n     * As you can see in this example, the abc property of a's b will be bound\n     * to the textfield. If now the value of b changed or even the a will get a\n     * new b, the binding still shows the right value.\n     *\n     * @param sourceObject {qx.core.Object} The source of the binding.\n     * @param sourcePropertyChain {String} The property chain which represents\n     *   the source property.\n     * @param targetObject {qx.core.Object} The object which the source should\n     *   be bind to.\n     * @param targetPropertyChain {String} The property chain to the target\n     *   object.\n     * @param options {Map?null} A map containing the options.\n     *   <li>converter: A converter function which takes four parameters\n     *       and should return the converted value.\n     *       <ol>\n     *         <li>The data to convert</li>\n     *         <li>The corresponding model object, which is only set in case of the use of an controller.</li>\n     *         <li>The source object for the binding</li>\n     *         <li>The target object.</li>\n     *       </ol>\n     *       If no conversion has been done, the given value should be returned.\n     *       e.g. a number to boolean converter\n     *       <code>function(data, model, source, target) {return data > 100;}</code>\n     *   </li>\n     *   <li>onUpdate: A callback function can be given here. This method will be\n     *       called if the binding was updated successful. There will be\n     *       three parameter you do get in that method call.\n     *       <ol>\n     *         <li>The source object</li>\n     *         <li>The target object</li>\n     *         <li>The data</li>\n     *       </ol>\n     *       Here is a sample: <code>onUpdate : function(source, target, data) {...}</code>\n     *   </li>\n     *   <li>onSetFail: A callback function can be given here. This method will\n     *       be called if the set of the value fails.\n     *   </li>\n     *   <li>ignoreConverter: A string which will be matched using the current\n     *       property chain. If it matches, the converter will not be called.\n     *   </li>\n     *\n     * @return {var} Returns the internal id for that binding. This can be used\n     *   for referencing the binding or e.g. for removing. This is not an atomic\n     *   id so you can't you use it as a hash-map index.\n     *\n     * @throws {qx.core.AssertionError} If the event is no data event or\n     *   there is no property definition for object and property (source and\n     *   target).\n     */\n    bind(\n      sourceObject,\n      sourcePropertyChain,\n      targetObject,\n      targetPropertyChain,\n      options\n    ) {\n      // check for the arguments\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertObject(sourceObject, \"sourceObject\");\n        qx.core.Assert.assertString(sourcePropertyChain, \"sourcePropertyChain\");\n        qx.core.Assert.assertObject(targetObject, \"targetObject\");\n        qx.core.Assert.assertString(targetPropertyChain, \"targetPropertyChain\");\n      }\n\n      // set up the target binding\n      var targetListenerMap = this.__setUpTargetBinding(\n        sourceObject,\n        sourcePropertyChain,\n        targetObject,\n        targetPropertyChain,\n        options\n      );\n\n      // get the property names\n      var propertyNames = sourcePropertyChain.split(\".\");\n\n      // stuff that's needed to store for the listener function\n      var arrayIndexValues = this.__checkForArrayInPropertyChain(propertyNames);\n      var sources = [];\n      var listeners = [];\n      var listenerIds = [];\n      var eventNames = [];\n      var source = sourceObject;\n      var initialPromise = null;\n\n      // add a try catch to make it possible to remove the listeners of the\n      // chain in case the loop breaks after some listeners already added.\n      try {\n        // go through all property names\n        for (var i = 0; i < propertyNames.length; i++) {\n          var propertyName = propertyNames[i];\n\n          // check for the array\n          if (arrayIndexValues[i] !== \"\") {\n            // push the array change event\n            eventNames.push(\"change\");\n          } else {\n            var eventName = this.__getEventNameForProperty(\n              source,\n              propertyName\n            );\n\n            if (!eventName) {\n              if (i == 0) {\n                // the root property can not change --> error\n                throw new qx.core.AssertionError(\n                  \"Binding property \" +\n                    propertyName +\n                    \" of object \" +\n                    source +\n                    \" not possible: No event available. Full property chain: \" +\n                    sourcePropertyChain\n                );\n              }\n\n              if (\n                source instanceof qx.core.Object &&\n                qx.Class.hasProperty(source.constructor, propertyName)\n              ) {\n                qx.log.Logger.warn(\n                  \"Binding property \" +\n                    propertyName +\n                    \" of object \" +\n                    source +\n                    \" not possible: No event available. Full property chain: \" +\n                    sourcePropertyChain\n                );\n              }\n\n              // call the converter if no event could be found on binding creation\n              initialPromise = this.__setInitialValue(\n                undefined,\n                targetObject,\n                targetPropertyChain,\n                options,\n                sourceObject\n              );\n\n              break;\n            }\n            eventNames.push(eventName);\n          }\n\n          // save the current source\n          sources[i] = source;\n\n          // check for the last property\n          if (i == propertyNames.length - 1) {\n            // if it is an array, set the initial value and bind the event\n            if (arrayIndexValues[i] !== \"\") {\n              // get the current value\n              var itemIndex =\n                arrayIndexValues[i] === \"last\"\n                  ? source.length - 1\n                  : arrayIndexValues[i];\n              var currentValue = source.getItem(itemIndex);\n\n              // set the initial value\n              initialPromise = this.__setInitialValue(\n                currentValue,\n                targetObject,\n                targetPropertyChain,\n                options,\n                sourceObject\n              );\n\n              // bind the event\n              listenerIds[i] = this.__bindEventToProperty(\n                source,\n                eventNames[i],\n                targetObject,\n                targetPropertyChain,\n                options,\n                arrayIndexValues[i]\n              );\n            } else {\n              // try to set the initial value\n              if (\n                propertyNames[i] != null &&\n                source[\"get\" + qx.lang.String.firstUp(propertyNames[i])] != null\n              ) {\n                var currentValue =\n                  source[\"get\" + qx.lang.String.firstUp(propertyNames[i])]();\n                initialPromise = this.__setInitialValue(\n                  currentValue,\n                  targetObject,\n                  targetPropertyChain,\n                  options,\n                  sourceObject\n                );\n              }\n              // bind the property\n              listenerIds[i] = this.__bindEventToProperty(\n                source,\n                eventNames[i],\n                targetObject,\n                targetPropertyChain,\n                options\n              );\n            }\n\n            // if its not the last property\n          } else {\n            // create the context for the listener\n            var context = {\n              index: i,\n              propertyNames: propertyNames,\n              sources: sources,\n              listenerIds: listenerIds,\n              arrayIndexValues: arrayIndexValues,\n              targetObject: targetObject,\n              targetPropertyChain: targetPropertyChain,\n              options: options,\n              listeners: listeners\n            };\n\n            // create a listener\n            var listener = qx.lang.Function.bind(\n              this.__chainListener,\n              this,\n              context\n            );\n\n            // store the listener for further processing\n            listeners.push(listener);\n\n            // add the chaining listener\n            listenerIds[i] = source.addListener(eventNames[i], listener);\n          }\n\n          // get and store the next source\n          if (\n            source[\"get\" + qx.lang.String.firstUp(propertyNames[i])] == null\n          ) {\n            source = undefined;\n          } else if (arrayIndexValues[i] !== \"\") {\n            var itemIndex =\n              arrayIndexValues[i] === \"last\"\n                ? source.length - 1\n                : arrayIndexValues[i];\n            source =\n              source[\"get\" + qx.lang.String.firstUp(propertyNames[i])](\n                itemIndex\n              );\n          } else {\n            source = source[\"get\" + qx.lang.String.firstUp(propertyNames[i])]();\n            // the value should be undefined if we can not find the last part of the property chain\n            if (source === null && propertyNames.length - 1 != i) {\n              source = undefined;\n            }\n          }\n          if (!source) {\n            // call the converter if no source could be found on binding creation\n            this.__setInitialValue(\n              source,\n              targetObject,\n              targetPropertyChain,\n              options,\n              sourceObject\n            );\n\n            break;\n          }\n        }\n      } catch (ex) {\n        // remove the already added listener\n        // go through all added listeners (source)\n\n        for (var i = 0; i < sources.length; i++) {\n          // check if a source is available\n          if (sources[i] && listenerIds[i]) {\n            sources[i].removeListenerById(listenerIds[i]);\n          }\n        }\n        var targets = targetListenerMap.targets;\n        var targetIds = targetListenerMap.listenerIds;\n        // go through all added listeners (target)\n        for (var i = 0; i < targets.length; i++) {\n          // check if a target is available\n          if (targets[i] && targetIds[i]) {\n            targets[i].removeListenerById(targetIds[i]);\n          }\n        }\n\n        throw ex;\n      }\n\n      // create the id map\n      var id = {\n        type: \"deepBinding\",\n        listenerIds: listenerIds,\n        sources: sources,\n        targetListenerIds: targetListenerMap.listenerIds,\n        targets: targetListenerMap.targets,\n        initialPromise: initialPromise\n      };\n\n      // store the bindings\n      this.__storeBinding(\n        id,\n        sourceObject,\n        sourcePropertyChain,\n        targetObject,\n        targetPropertyChain\n      );\n\n      return id;\n    },\n\n    /**\n     * Event listener for the chaining of the properties.\n     *\n     * @param context {Map} The current context for the listener.\n     */\n    __chainListener(context) {\n      // invoke the onUpdate method\n      if (context.options && context.options.onUpdate) {\n        context.options.onUpdate(\n          context.sources[context.index],\n          context.targetObject\n        );\n      }\n\n      // delete all listener after the current one\n      for (var j = context.index + 1; j < context.propertyNames.length; j++) {\n        // remove the old sources\n        var source = context.sources[j];\n        context.sources[j] = null;\n        if (!source) {\n          continue;\n        }\n\n        // remove the listeners\n        source.removeListenerById(context.listenerIds[j]);\n      }\n\n      // get the current source\n      var source = context.sources[context.index];\n      // add new once after the current one\n      for (var j = context.index + 1; j < context.propertyNames.length; j++) {\n        // get and store the new source\n        if (context.arrayIndexValues[j - 1] !== \"\") {\n          source = source[\n            \"get\" + qx.lang.String.firstUp(context.propertyNames[j - 1])\n          ](context.arrayIndexValues[j - 1]);\n        } else {\n          source =\n            source[\n              \"get\" + qx.lang.String.firstUp(context.propertyNames[j - 1])\n            ]();\n        }\n        context.sources[j] = source;\n        // reset the target object if no new source could be found\n        if (!source) {\n          // use the converter if the property chain breaks [BUG# 6880]\n          if (context.options && context.options.converter) {\n            var ignoreConverter = false;\n            // take care of the ignore pattern used for the controller\n            if (context.options.ignoreConverter) {\n              // the current property chain as string\n              var currentSourceChain = context.propertyNames\n                .slice(0, j)\n                .join(\".\");\n              // match for the current pattern given in the options\n              var match = currentSourceChain.match(\n                new RegExp(\"^\" + context.options.ignoreConverter)\n              );\n\n              ignoreConverter = match ? match.length > 0 : false;\n            }\n\n            if (!ignoreConverter) {\n              this.__setTargetValue(\n                context.targetObject,\n                context.targetPropertyChain,\n                context.options.converter()\n              );\n            } else {\n              this.__resetTargetValue(\n                context.targetObject,\n                context.targetPropertyChain\n              );\n            }\n          } else {\n            this.__resetTargetValue(\n              context.targetObject,\n              context.targetPropertyChain\n            );\n          }\n\n          break;\n        }\n\n        // if its the last property\n        if (j == context.propertyNames.length - 1) {\n          // if its an array\n          if (\n            qx.Class.implementsInterface(source, qx.data.IListData) &&\n            context.arrayIndexValues[j] !== \"\"\n          ) {\n            // set the initial value\n            var itemIndex =\n              context.arrayIndexValues[j] === \"last\"\n                ? source.length - 1\n                : context.arrayIndexValues[j];\n            var currentValue = source.getItem(itemIndex);\n            this.__setInitialValue(\n              currentValue,\n              context.targetObject,\n              context.targetPropertyChain,\n              context.options,\n              context.sources[context.index]\n            );\n\n            // bind the item event to the new target\n            context.listenerIds[j] = this.__bindEventToProperty(\n              source,\n              \"change\",\n              context.targetObject,\n              context.targetPropertyChain,\n              context.options,\n              context.arrayIndexValues[j]\n            );\n          } else {\n            if (\n              context.propertyNames[j] != null &&\n              source[\n                \"get\" + qx.lang.String.firstUp(context.propertyNames[j])\n              ] != null\n            ) {\n              var currentValue =\n                source[\n                  \"get\" + qx.lang.String.firstUp(context.propertyNames[j])\n                ]();\n\n              this.__setInitialValue(\n                currentValue,\n                context.targetObject,\n                context.targetPropertyChain,\n                context.options,\n                context.sources[context.index]\n              );\n            }\n            var eventName = this.__getEventNameForProperty(\n              source,\n              context.propertyNames[j]\n            );\n\n            if (!eventName) {\n              context.sources[j] = null;\n              this.__resetTargetValue(\n                context.targetObject,\n                context.targetPropertyChain\n              );\n\n              return;\n            }\n            // bind the last property to the new target\n            context.listenerIds[j] = this.__bindEventToProperty(\n              source,\n              eventName,\n              context.targetObject,\n              context.targetPropertyChain,\n              context.options\n            );\n          }\n        } else {\n          // check if a listener already created\n          if (context.listeners[j] == null) {\n            var listener = qx.lang.Function.bind(\n              this.__chainListener,\n              this,\n              context\n            );\n\n            // store the listener for further processing\n            context.listeners.push(listener);\n          }\n          // add a new listener\n          if (qx.Class.implementsInterface(source, qx.data.IListData)) {\n            var eventName = \"change\";\n          } else {\n            var eventName = this.__getEventNameForProperty(\n              source,\n              context.propertyNames[j]\n            );\n          }\n\n          if (!eventName) {\n            context.sources[j] = null;\n            this.__resetTargetValue(\n              context.targetObject,\n              context.targetPropertyChain\n            );\n\n            return;\n          }\n          context.listenerIds[j] = source.addListener(\n            eventName,\n            context.listeners[j]\n          );\n        }\n      }\n    },\n\n    /**\n     * Internal helper for setting up the listening to the changes on the\n     * target side of the binding. Only works if the target property is a\n     * property chain\n     *\n     * @param sourceObject {qx.core.Object} The source of the binding.\n     * @param sourcePropertyChain {String} The property chain which represents\n     *   the source property.\n     * @param targetObject {qx.core.Object} The object which the source should\n     *   be bind to.\n     * @param targetPropertyChain {String} The property name of the target\n     *   object.\n     * @param options {Map} The options map perhaps containing the user defined\n     *   converter.\n     * @return {var} A map containing the listener ids and the targets.\n     */\n    __setUpTargetBinding(\n      sourceObject,\n      sourcePropertyChain,\n      targetObject,\n      targetPropertyChain,\n      options\n    ) {\n      // get the property names\n      var propertyNames = targetPropertyChain.split(\".\");\n\n      var arrayIndexValues = this.__checkForArrayInPropertyChain(propertyNames);\n      var targets = [];\n      var listeners = [];\n      var listenerIds = [];\n      var eventNames = [];\n      var target = targetObject;\n\n      // go through all property names\n      for (var i = 0; i < propertyNames.length - 1; i++) {\n        // check for the array\n        if (arrayIndexValues[i] !== \"\") {\n          // push the array change event\n          eventNames.push(\"change\");\n        } else {\n          var eventName = this.__getEventNameForProperty(\n            target,\n            propertyNames[i]\n          );\n\n          if (!eventName) {\n            // if the event names could not be terminated,\n            // just ignore the target chain listening\n            break;\n          }\n          eventNames.push(eventName);\n        }\n\n        // save the current source\n        targets[i] = target;\n\n        // create a listener\n        var listener = function () {\n          // delete all listener after the current one\n          for (var j = i + 1; j < propertyNames.length - 1; j++) {\n            // remove the old sources\n            var target = targets[j];\n            targets[j] = null;\n            if (!target) {\n              continue;\n            }\n\n            // remove the listeners\n            target.removeListenerById(listenerIds[j]);\n          }\n\n          // get the current target\n          var target = targets[i];\n          // add new once after the current one\n          for (var j = i + 1; j < propertyNames.length - 1; j++) {\n            var firstUpPropName = qx.lang.String.firstUp(propertyNames[j - 1]);\n            // get and store the new target\n            if (arrayIndexValues[j - 1] !== \"\") {\n              var currentIndex =\n                arrayIndexValues[j - 1] === \"last\"\n                  ? target.getLength() - 1\n                  : arrayIndexValues[j - 1];\n              target = target[\"get\" + firstUpPropName](currentIndex);\n            } else {\n              target = target[\"get\" + firstUpPropName]();\n            }\n            targets[j] = target;\n            if (!target) {\n              break;\n            }\n\n            // check if a listener already created\n            if (listeners[j] == null) {\n              // store the listener for further processing\n              listeners.push(listener);\n            }\n\n            // add a new listener\n            if (qx.Class.implementsInterface(target, qx.data.IListData)) {\n              var eventName = \"change\";\n            } else {\n              var eventName =\n                qx.data.SingleValueBinding.__getEventNameForProperty(\n                  target,\n                  propertyNames[j]\n                );\n\n              if (!eventName) {\n                // if the event name could not be terminated,\n                // ignore the rest\n                break;\n              }\n            }\n\n            listenerIds[j] = target.addListener(eventName, listeners[j]);\n          }\n\n          qx.data.SingleValueBinding.updateTarget(\n            sourceObject,\n            sourcePropertyChain,\n            targetObject,\n            targetPropertyChain,\n            options\n          );\n        };\n\n        // store the listener for further processing\n        listeners.push(listener);\n\n        // add the chaining listener\n        listenerIds[i] = target.addListener(eventNames[i], listener);\n\n        var firstUpPropName = qx.lang.String.firstUp(propertyNames[i]);\n        // get and store the next target\n        if (target[\"get\" + firstUpPropName] == null) {\n          target = null;\n        } else if (arrayIndexValues[i] !== \"\") {\n          target = target[\"get\" + firstUpPropName](arrayIndexValues[i]);\n        } else {\n          target = target[\"get\" + firstUpPropName]();\n        }\n        if (!target) {\n          break;\n        }\n      }\n\n      return { listenerIds: listenerIds, targets: targets };\n    },\n\n    /**\n     * Helper for updating the target. Gets the current set data from the source\n     * and set that on the target.\n     *\n     * @param sourceObject {qx.core.Object} The source of the binding.\n     * @param sourcePropertyChain {String} The property chain which represents\n     *   the source property.\n     * @param targetObject {qx.core.Object} The object which the source should\n     *   be bind to.\n     * @param targetPropertyChain {String} The property name of the target\n     *   object.\n     * @param options {Map} The options map perhaps containing the user defined\n     *   converter.\n     *\n     * @internal\n     */\n    updateTarget(\n      sourceObject,\n      sourcePropertyChain,\n      targetObject,\n      targetPropertyChain,\n      options\n    ) {\n      var value = this.resolvePropertyChain(sourceObject, sourcePropertyChain);\n\n      // convert the data before setting\n      value = qx.data.SingleValueBinding.__convertValue(\n        value,\n        targetObject,\n        targetPropertyChain,\n        options,\n        sourceObject\n      );\n\n      this.__setTargetValue(targetObject, targetPropertyChain, value);\n    },\n\n    /**\n     * Internal helper for getting the current set value at the property chain.\n     *\n     * @param o {qx.core.Object} The source of the binding.\n     * @param propertyChain {String} The property chain which represents\n     *   the source property.\n     * @return {var?undefined} Returns the set value if defined.\n     */\n    resolvePropertyChain(o, propertyChain) {\n      var properties = this.__getPropertyChainArray(propertyChain);\n      return this.__getTargetFromChain(o, properties, properties.length);\n    },\n\n    /**\n     * Tries to return a fitting event name to the given source object and\n     * property name. First, it assumes that the property name is a real property\n     * and therefore it checks the property definition for the event. The second\n     * possibility is to check if there is an event with the given name. The\n     * third and last possibility checked is if there is an event which is named\n     * change + propertyName. If this three possibilities fail, an error will be\n     * thrown.\n     *\n     * @param source {qx.core.Object} The source where the property is stored.\n     * @param propertyName {String} The name of the property.\n     * @return {String|null} The name of the corresponding event or null.\n     */\n    __getEventNameForProperty(source, propertyName) {\n      // get the current event name from the property definition\n      var eventName = this.__getEventForProperty(source, propertyName);\n      // if no event name could be found\n      if (eventName == null) {\n        // check if the propertyName is the event name\n        if (qx.Class.supportsEvent(source.constructor, propertyName)) {\n          eventName = propertyName;\n          // check if the change + propertyName is the event name\n        } else if (\n          qx.Class.supportsEvent(\n            source.constructor,\n            \"change\" + qx.lang.String.firstUp(propertyName)\n          )\n        ) {\n          eventName = \"change\" + qx.lang.String.firstUp(propertyName);\n        } else {\n          return null;\n        }\n      }\n      return eventName;\n    },\n\n    /**\n     * Resets the value of the given target after resolving the target property\n     * chain.\n     *\n     * @param targetObject {qx.core.Object} The object where the property chain\n     *   starts.\n     * @param targetPropertyChain {String} The names of the properties,\n     *   separated with a dot.\n     */\n    __resetTargetValue(targetObject, targetPropertyChain) {\n      // get the last target object of the chain\n      var properties = this.__getPropertyChainArray(targetPropertyChain);\n      var target = this.__getTargetFromChain(targetObject, properties);\n      if (target != null) {\n        // get the name of the last property\n        var lastProperty = properties[properties.length - 1];\n        // check for an array and set the value to null\n        var index = this.__getArrayIndex(lastProperty);\n        if (index) {\n          this.__setTargetValue(targetObject, targetPropertyChain, null);\n          return;\n        }\n\n        // try to reset the property\n        if (\n          target[\"reset\" + qx.lang.String.firstUp(lastProperty)] != undefined\n        ) {\n          target[\"reset\" + qx.lang.String.firstUp(lastProperty)]();\n        } else {\n          // fallback if no resetter is given (see bug #2456)\n          if (\n            typeof target[\"set\" + qx.lang.String.firstUp(lastProperty)] !=\n            \"function\"\n          ) {\n            throw new qx.core.AssertionError(\n              \"No setter for '\" + lastProperty + \"' on target \" + target + \".\"\n            );\n          }\n          target[\"set\" + qx.lang.String.firstUp(lastProperty)](null);\n        }\n      }\n    },\n\n    /**\n     * Sets the given value to the given target after resolving the\n     * target property chain.\n     *\n     * @param targetObject {qx.core.Object} The object where the property chain\n     *   starts.\n     * @param targetPropertyChain {String} The names of the properties,\n     *   separated with a dot.\n     * @param value {var} The value to set.\n     */\n    __setTargetValue(targetObject, targetPropertyChain, value) {\n      // get the last target object of the chain\n      var properties = this.__getPropertyChainArray(targetPropertyChain);\n      var target = this.__getTargetFromChain(targetObject, properties);\n      if (target) {\n        // get the name of the last property\n        var lastProperty = properties[properties.length - 1];\n\n        // check for array notation\n        var index = this.__getArrayIndex(lastProperty);\n        if (index) {\n          if (index === \"last\") {\n            // check for the 'last' notation\n            index = target.length - 1;\n          }\n          target.setItem(index, value);\n        } else {\n          if (\n            typeof target[\"set\" + qx.lang.String.firstUp(lastProperty)] !=\n            \"function\"\n          ) {\n            throw new qx.core.AssertionError(\n              \"No setter for '\" + lastProperty + \"' on target \" + target + \".\"\n            );\n          }\n          return target[\"set\" + qx.lang.String.firstUp(lastProperty)](value);\n        }\n      }\n    },\n\n    /**\n     * Returns the index from a property using bracket notation, e.g.\n     * \"[42]\" returns \"42\", \"[last]\" returns \"last\"\n     *\n     * @param propertyName {String} A property name\n     * @return {String|null} Array index or null if the property name does\n     * not use bracket notation\n     */\n    __getArrayIndex(propertyName) {\n      var arrayExp = /^\\[(\\d+|last)\\]$/;\n      var arrayMatch = propertyName.match(arrayExp);\n      if (arrayMatch) {\n        return arrayMatch[1];\n      }\n      return null;\n    },\n\n    /**\n     * Converts a property chain string into a list of properties and/or\n     * array indexes\n     * @param targetPropertyChain {String} property chain\n     * @return {String[]} Array of property names\n     */\n    __getPropertyChainArray(targetPropertyChain) {\n      // split properties (dot notation) and array indexes (bracket notation)\n      return targetPropertyChain\n        .replace(/\\[/g, \".[\")\n        .split(\".\")\n        .filter(function (prop) {\n          return prop !== \"\";\n        });\n    },\n\n    /**\n     * Helper-Function resolving the object on which the last property of the\n     * chain should be set.\n     *\n     * @param targetObject {qx.core.Object} The object where the property chain\n     *   starts.\n     * @param targetProperties {String[]} Array containing the names of the properties\n     * @param index {Number?} The array index of the last property to be considered.\n     * Default: The last item's index\n     * @return {qx.core.Object | null} The object on which the last property\n     *   should be set.\n     */\n    __getTargetFromChain(targetObject, targetProperties, index) {\n      index = index || targetProperties.length - 1;\n      var target = targetObject;\n\n      for (var i = 0; target !== null && i < index; i++) {\n        try {\n          var property = targetProperties[i];\n\n          // array notation\n          var arrIndex = this.__getArrayIndex(property);\n          if (arrIndex) {\n            if (arrIndex === \"last\") {\n              // check for the 'last' notation\n              arrIndex = target.length - 1;\n            }\n            target = target.getItem(arrIndex);\n          } else {\n            target = target[\"get\" + qx.lang.String.firstUp(property)]();\n          }\n        } catch (ex) {\n          return null;\n        }\n      }\n      return target;\n    },\n\n    /**\n     * Set the given value to the target property. This method is used for\n     * initially set the value.\n     *\n     * @param value {var} The value to set.\n     * @param targetObject {qx.core.Object} The object which contains the target\n     *   property.\n     * @param targetPropertyChain {String} The name of the target property in the\n     *   target object.\n     * @param options {Map} The options map perhaps containing the user defined\n     *   converter.\n     * @param sourceObject {qx.core.Object} The source object of the binding (\n     *   used for the onUpdate callback).\n     */\n    __setInitialValue(\n      value,\n      targetObject,\n      targetPropertyChain,\n      options,\n      sourceObject\n    ) {\n      // first convert the initial value\n      value = this.__convertValue(\n        value,\n        targetObject,\n        targetPropertyChain,\n        options,\n        sourceObject\n      );\n\n      // check if the converted value is undefined\n      if (value === undefined) {\n        this.__resetTargetValue(targetObject, targetPropertyChain);\n      }\n      // only set the initial value if one is given (may be null)\n      if (value !== undefined) {\n        try {\n          var result = this.__setTargetValue(\n            targetObject,\n            targetPropertyChain,\n            value\n          );\n\n          // tell the user that the setter was invoked probably\n          if (options && options.onUpdate) {\n            options.onUpdate(sourceObject, targetObject, value);\n          }\n          return result;\n        } catch (e) {\n          if (!(e instanceof qx.core.ValidationError)) {\n            throw e;\n          }\n\n          if (options && options.onSetFail) {\n            options.onSetFail(e);\n          } else {\n            qx.log.Logger.warn(\n              \"Failed so set value \" +\n                value +\n                \" on \" +\n                targetObject +\n                \". Error message: \" +\n                e\n            );\n          }\n        }\n      }\n    },\n\n    /**\n     * Checks for an array element in the given property names and adapts the\n     * arrays to fit the algorithm.\n     *\n     * @param propertyNames {Array} The array containing the property names.\n     *   Attention, this method can change this parameter!!!\n     * @return {Array} An array containing the values of the array properties\n     *   corresponding to the property names.\n     */\n    __checkForArrayInPropertyChain(propertyNames) {\n      // array for the values of the array properties\n      var arrayIndexValues = [];\n\n      // go through all properties and check for array notations\n      for (var i = 0; i < propertyNames.length; i++) {\n        var name = propertyNames[i];\n        // if its an array property in the chain\n        if (name.endsWith(\"]\")) {\n          // get the inner value of the array notation\n          var arrayIndex = name.substring(\n            name.indexOf(\"[\") + 1,\n            name.indexOf(\"]\")\n          );\n\n          // check the arrayIndex\n          if (name.indexOf(\"]\") != name.length - 1) {\n            throw new Error(\n              \"Please use only one array at a time: \" + name + \" does not work.\"\n            );\n          }\n          if (arrayIndex !== \"last\") {\n            if (arrayIndex == \"\" || isNaN(parseInt(arrayIndex, 10))) {\n              throw new Error(\n                \"No number or 'last' value has been given\" +\n                  \" in an array binding: \" +\n                  name +\n                  \" does not work.\"\n              );\n            }\n          }\n\n          // if a property is in front of the array notation\n          if (name.indexOf(\"[\") != 0) {\n            // store the property name without the array notation\n            propertyNames[i] = name.substring(0, name.indexOf(\"[\"));\n            // store the values in the array for the current iteration\n            arrayIndexValues[i] = \"\";\n            // store the properties for the next iteration (the item of the array)\n            arrayIndexValues[i + 1] = arrayIndex;\n            propertyNames.splice(i + 1, 0, \"item\");\n            // skip the next iteration. its the array item and its already set\n            i++;\n            // it the array notation is the beginning\n          } else {\n            // store the array index and override the entry in the property names\n            arrayIndexValues[i] = arrayIndex;\n            propertyNames.splice(i, 1, \"item\");\n          }\n        } else {\n          arrayIndexValues[i] = \"\";\n        }\n      }\n\n      return arrayIndexValues;\n    },\n\n    /**\n     * Internal helper method which is actually doing all bindings. That means\n     * that an event listener will be added to the source object which listens\n     * to the given event and invokes an set on the target property on the\n     * targetObject.\n     * This method does not store the binding in the internal reference store\n     * so it should NOT be used from outside this class. For an outside usage,\n     * use {@link #bind}.\n     *\n     * @param sourceObject {qx.core.Object} The source of the binding.\n     * @param sourceEvent {String} The event of the source object which could\n     *   be the change event in common but has to be an\n     *   {@link qx.event.type.Data} event.\n     * @param targetObject {qx.core.Object} The object which the source should\n     *   be bind to.\n     * @param targetProperty {String} The property name of the target object.\n     * @param options {Map} A map containing the options. See\n     *   {@link #bind} for more information.\n     * @param arrayIndex {String} The index of the given array if its an array\n     *   to bind.\n     *\n     * @return {var} Returns the internal id for that binding. This can be used\n     *   for referencing the binding or e.g. for removing. This is not an atomic\n     *   id so you can't you use it as a hash-map index. It's the id which will\n     *   be returned by the {@link qx.core.Object#addListener} method.\n     * @throws {qx.core.AssertionError} If the event is no data event or\n     *   there is no property definition for the target object and target\n     *   property.\n     */\n    __bindEventToProperty(\n      sourceObject,\n      sourceEvent,\n      targetObject,\n      targetProperty,\n      options,\n      arrayIndex\n    ) {\n      // checks\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        // check for the data event\n        var eventType = qx.Class.getEventType(\n          sourceObject.constructor,\n          sourceEvent\n        );\n\n        qx.core.Assert.assertEquals(\n          \"qx.event.type.Data\",\n          eventType,\n          sourceEvent +\n            \" is not an data (qx.event.type.Data) event on \" +\n            sourceObject +\n            \".\"\n        );\n      }\n\n      var bindListener = function (arrayIndex, e) {\n        // if an array value is given\n        if (arrayIndex !== \"\") {\n          //check if its the \"last\" value\n          if (arrayIndex === \"last\") {\n            arrayIndex = sourceObject.length - 1;\n          }\n\n          // get the data of the array\n          var data = sourceObject.getItem(arrayIndex);\n\n          // reset the target if the data is not set\n          if (data === undefined) {\n            qx.data.SingleValueBinding.__resetTargetValue(\n              targetObject,\n              targetProperty\n            );\n          }\n\n          // only do something if the current array has been changed\n          var start = e.getData().start;\n          var end = e.getData().end;\n          if (arrayIndex < start || arrayIndex > end) {\n            return;\n          }\n        } else {\n          // get the data out of the event\n          var data = e.getData();\n        }\n\n        // debug message\n        if (qx.core.Environment.get(\"qx.debug.databinding\")) {\n          qx.log.Logger.debug(\n            \"Binding executed from \" +\n              sourceObject +\n              \" by \" +\n              sourceEvent +\n              \" to \" +\n              targetObject +\n              \" (\" +\n              targetProperty +\n              \")\"\n          );\n\n          qx.log.Logger.debug(\"Data before conversion: \" + data);\n        }\n\n        // convert the data\n        data = qx.data.SingleValueBinding.__convertValue(\n          data,\n          targetObject,\n          targetProperty,\n          options,\n          sourceObject\n        );\n\n        // debug message\n        if (qx.core.Environment.get(\"qx.debug.databinding\")) {\n          qx.log.Logger.debug(\"Data after conversion: \" + data);\n        }\n\n        // try to set the value\n        var result;\n        try {\n          if (data !== undefined) {\n            result = qx.data.SingleValueBinding.__setTargetValue(\n              targetObject,\n              targetProperty,\n              data\n            );\n          } else {\n            result = qx.data.SingleValueBinding.__resetTargetValue(\n              targetObject,\n              targetProperty\n            );\n          }\n\n          // tell the user that the setter was invoked probably\n          if (options && options.onUpdate) {\n            options.onUpdate(sourceObject, targetObject, data);\n          }\n        } catch (ex) {\n          if (!(ex instanceof qx.core.ValidationError)) {\n            throw ex;\n          }\n\n          if (options && options.onSetFail) {\n            options.onSetFail(ex);\n          } else {\n            qx.log.Logger.warn(\n              \"Failed so set value \" +\n                data +\n                \" on \" +\n                targetObject +\n                \". Error message: \" +\n                ex\n            );\n          }\n        }\n        return result;\n      };\n\n      // check if an array index is given\n      if (!arrayIndex) {\n        // if not, signal it a s an empty string\n        arrayIndex = \"\";\n      }\n      // bind the listener function (make the array index in the listener available)\n      bindListener = qx.lang.Function.bind(\n        bindListener,\n        sourceObject,\n        arrayIndex\n      );\n\n      // add the listener\n      var id = sourceObject.addListener(sourceEvent, bindListener);\n\n      return id;\n    },\n\n    /**\n     * This method stores the given value as a binding in the internal structure\n     * of all bindings.\n     *\n     * @param id {var} The listener id of the id for a deeper binding.\n     * @param sourceObject {qx.core.Object} The source Object of the binding.\n     * @param sourceEvent {String} The name of the source event.\n     * @param targetObject {qx.core.Object} The target object.\n     * @param targetProperty {String} The name of the property on the target\n     *   object.\n     */\n    __storeBinding(\n      id,\n      sourceObject,\n      sourceEvent,\n      targetObject,\n      targetProperty\n    ) {\n      var hash;\n\n      // add the listener id to the internal registry\n      hash = sourceObject.toHashCode();\n      if (this.__bindings[hash] === undefined) {\n        this.__bindings[hash] = [];\n      }\n\n      var binding = [\n        id,\n        sourceObject,\n        sourceEvent,\n        targetObject,\n        targetProperty\n      ];\n\n      this.__bindings[hash].push(binding);\n\n      // add same binding data indexed by target object\n      hash = targetObject.toHashCode();\n      if (this.__bindingsByTarget[hash] === undefined) {\n        this.__bindingsByTarget[hash] = [];\n      }\n      this.__bindingsByTarget[hash].push(binding);\n    },\n\n    /**\n     * This method takes the given value, checks if the user has given a\n     * converter and converts the value to its target type. If no converter is\n     * given by the user, the {@link #__defaultConversion} will try to convert\n     * the value.\n     *\n     * @param value {var} The value which possibly should be converted.\n     * @param targetObject {qx.core.Object} The target object.\n     * @param targetPropertyChain {String} The property name of the target object.\n     * @param options {Map} The options map which can includes the converter.\n     *   For a detailed information on the map, take a look at\n     *   {@link #bind}.\n     * @param sourceObject {qx.core.Object} The source object for the binding.\n     *\n     * @return {var} The converted value. If no conversion has been done, the\n     *   value property will be returned.\n     * @throws {qx.core.AssertionError} If there is no property definition\n     *   of the given target object and target property.\n     */\n    __convertValue(\n      value,\n      targetObject,\n      targetPropertyChain,\n      options,\n      sourceObject\n    ) {\n      // do the conversion given by the user\n      if (options && options.converter) {\n        var model;\n        if (targetObject.getModel) {\n          model = targetObject.getModel();\n        }\n        return options.converter(value, model, sourceObject, targetObject);\n        // try default conversion\n      } else {\n        var properties = this.__getPropertyChainArray(targetPropertyChain);\n        var target = this.__getTargetFromChain(targetObject, properties);\n        var lastProperty = targetPropertyChain.substring(\n          targetPropertyChain.lastIndexOf(\".\") + 1,\n          targetPropertyChain.length\n        );\n\n        // if no target is currently available, return the original value\n        if (target == null) {\n          return value;\n        }\n\n        var propertieDefinition = qx.Class.getPropertyDefinition(\n          target.constructor,\n          lastProperty\n        );\n\n        var check =\n          propertieDefinition == null ? \"\" : propertieDefinition.check;\n        return this.__defaultConversion(value, check);\n      }\n    },\n\n    /**\n     * Helper method which tries to figure out if the given property on the\n     * given object does have a change event and if returns the name of it.\n     *\n     * @param sourceObject {qx.core.Object} The object to check.\n     * @param sourceProperty {String} The name of the property.\n     *\n     * @return {String} The name of the change event.\n     * @throws {qx.core.AssertionError} If there is no property definition of\n     *   the given object property pair.\n     */\n    __getEventForProperty(sourceObject, sourceProperty) {\n      // get the event name\n      var propertieDefinition = qx.Class.getPropertyDefinition(\n        sourceObject.constructor,\n        sourceProperty\n      );\n\n      if (propertieDefinition == null) {\n        return null;\n      }\n      return propertieDefinition.event;\n    },\n\n    /**\n     * Tries to convert the data to the type given in the targetCheck argument.\n     *\n     * @param data {var} The data to convert.\n     * @param targetCheck {String} The value of the check property. That usually\n     *   contains the target type.\n     * @return {Integer|String|Float} The converted data\n     */\n    __defaultConversion(data, targetCheck) {\n      var dataType = qx.lang.Type.getClass(data);\n\n      // to integer\n      if (\n        (dataType == \"Number\" || dataType == \"String\") &&\n        (targetCheck == \"Integer\" || targetCheck == \"PositiveInteger\")\n      ) {\n        data = parseInt(data, 10);\n      }\n\n      // to string\n      if (\n        (dataType == \"Boolean\" || dataType == \"Number\" || dataType == \"Date\") &&\n        targetCheck == \"String\"\n      ) {\n        data = data + \"\";\n      }\n\n      // to float\n      if (\n        (dataType == \"Number\" || dataType == \"String\") &&\n        (targetCheck == \"Number\" || targetCheck == \"PositiveNumber\")\n      ) {\n        data = parseFloat(data);\n      }\n\n      return data;\n    },\n\n    /**\n     * Removes the binding with the given id from the given sourceObject. The\n     * id has to be the id returned by any of the bind functions.\n     *\n     * @param sourceObject {qx.core.Object} The source object of the binding.\n     * @param id {var} The id of the binding.\n     * @throws {Error} If the binding could not be found.\n     */\n    removeBindingFromObject(sourceObject, id) {\n      // check for a deep binding\n      if (id.type == \"deepBinding\") {\n        // go through all added listeners (source)\n        for (var i = 0; i < id.sources.length; i++) {\n          // check if a source is available\n          if (id.sources[i]) {\n            if (id.listenerIds[i]) {\n              id.sources[i].removeListenerById(id.listenerIds[i]);\n            }\n            // If the listener id is not available, it is most likely\n            // caused by some hidden error situation.\n            // At least an error message should be displayed\n            else {\n              sourceObject.error(\n                \"Could not remove deep bindings. Binding id for \" +\n                  id.sources[i].classname +\n                  \" could not be found!\"\n              );\n            }\n          }\n        }\n        // go through all added listeners (target)\n        for (var i = 0; i < id.targets.length; i++) {\n          // check if a target is available\n          if (id.targets[i]) {\n            if (id.targetListenerIds[i]) {\n              id.targets[i].removeListenerById(id.targetListenerIds[i]);\n            }\n            // If the target listener id is not available, it is most likely\n            // caused by some hidden error situation.\n            // At least an error message should be displayed\n            else {\n              sourceObject.error(\n                \"Could not remove target listener. Listener id for target \" +\n                  id.targets[i].classname +\n                  \" could not be found!\"\n              );\n            }\n          }\n        }\n      } else {\n        // remove the listener\n        sourceObject.removeListenerById(id);\n      }\n\n      // remove the id from the internal reference system\n      var bindings = this.getAllBindingsForObject(sourceObject);\n      // check if the binding exists\n      if (bindings != undefined) {\n        for (var i = 0; i < bindings.length; i++) {\n          if (bindings[i][0] == id) {\n            // remove binding data from internal reference indexed by target object\n            var target = bindings[i][3];\n            if (this.__bindingsByTarget[target.toHashCode()]) {\n              qx.lang.Array.remove(\n                this.__bindingsByTarget[target.toHashCode()],\n                bindings[i]\n              );\n            }\n\n            // remove binding data from internal reference indexed by source object\n            var source = bindings[i][1];\n            if (this.__bindings[source.toHashCode()]) {\n              qx.lang.Array.remove(\n                this.__bindings[source.toHashCode()],\n                bindings[i]\n              );\n            }\n            return;\n          }\n        }\n      }\n      throw new Error(\"Binding could not be found!\");\n    },\n\n    /**\n     * Removes all bindings for the given object.\n     *\n     * @param object {qx.core.Object} The object of which the bindings should be\n     *   removed.\n     * @throws {qx.core.AssertionError} If the object is not in the internal\n     *   registry of the bindings.\n     * @throws {Error} If one of the bindings listed internally can not be\n     *   removed.\n     */\n    removeAllBindingsForObject(object) {\n      // check for the null value\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertNotNull(\n          object,\n          \"Can not remove the bindings for null object!\"\n        );\n      }\n\n      // get the bindings\n      var bindings = this.getAllBindingsForObject(object);\n      if (bindings != undefined) {\n        // remove every binding with the removeBindingFromObject function\n        for (var i = bindings.length - 1; i >= 0; i--) {\n          this.removeBindingFromObject(object, bindings[i][0]);\n        }\n      }\n\n      var hash = object.toHashCode();\n      delete this.__bindings[hash];\n      delete this.__bindingsByTarget[hash];\n    },\n\n    /**\n     * Removes all bindings between given objects.\n     *\n     * @param object {qx.core.Object} The object of which the bindings should be\n     *   removed.\n     * @param relatedObject {qx.core.Object} The object of which related\n     *   bindings should be removed.\n     * @throws {qx.core.AssertionError} If the object is not in the internal\n     *   registry of the bindings.\n     * @throws {Error} If one of the bindings listed internally can not be\n     *   removed.\n     */\n    removeRelatedBindings(object, relatedObject) {\n      // check for the null value\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertNotNull(\n          object,\n          \"Can not remove the bindings for null object!\"\n        );\n\n        qx.core.Assert.assertNotNull(\n          relatedObject,\n          \"Can not remove the bindings for null object!\"\n        );\n      }\n\n      // get the bindings\n      var bindings = this.getAllBindingsForObject(object);\n      if (bindings != undefined) {\n        // remove every binding with the removeBindingFromObject function\n        for (var i = bindings.length - 1; i >= 0; i--) {\n          var source = bindings[i][1];\n          var target = bindings[i][3];\n          if (source === relatedObject || target === relatedObject) {\n            this.removeBindingFromObject(object, bindings[i][0]);\n          }\n        }\n      }\n    },\n\n    /**\n     * Returns an array which lists all bindings.\n     *\n     * @param object {qx.core.Object} The object of which the bindings should\n     *   be returned.\n     *\n     * @return {Array} An array of binding informations. Every binding\n     *   information is an array itself containing id, sourceObject,\n     *   sourceEvent, targetObject and targetProperty in that order.\n     */\n    getAllBindingsForObject(object) {\n      var hash = object.toHashCode();\n\n      // get all bindings of object as source\n      var sourceBindings = this.__bindings[hash];\n\n      // get all bindings of object as target\n      var targetBindings = this.__bindingsByTarget[hash];\n\n      if (!sourceBindings && !targetBindings) {\n        return [];\n      }\n      if (!sourceBindings) {\n        return qx.lang.Array.clone(targetBindings);\n      }\n      if (!targetBindings) {\n        return qx.lang.Array.clone(sourceBindings);\n      }\n\n      return qx.lang.Array.unique(sourceBindings.concat(targetBindings));\n    },\n\n    /**\n     * Removes all binding in the whole application. After that not a single\n     * binding is left.\n     * @deprecated {6.0} dispose and destructors are deprecated because of automatic memory management; this\n     * will only work for objects explicitly registered with ObjectRegistry.register\n     */\n    removeAllBindings() {\n      // go through all registered objects\n      for (var hash in this.__bindings) {\n        var object = qx.core.ObjectRegistry.fromHashCode(hash);\n        // check for the object, perhaps its already deleted\n        if (object == null) {\n          delete this.__bindings[hash];\n          continue;\n        }\n        this.removeAllBindingsForObject(object);\n      }\n      // reset the bindings map\n      this.__bindings = {};\n    },\n\n    /**\n     * Returns a map containing for every bound object an array of data binding\n     * information. The key of the map is the hash code of the bound objects.\n     * Every binding is represented by an array containing id, sourceObject,\n     * sourceEvent, targetObject and targetProperty.\n     *\n     * @return {Map} Map containing all bindings.\n     */\n    getAllBindings() {\n      return this.__bindings;\n    },\n\n    /**\n     * Debug function which shows some valuable information about the given\n     * binding in console. For that it uses {@link qx.log.Logger}.\n     *\n     * @param object {qx.core.Object} the source of the binding.\n     * @param id {var} The id of the binding.\n     */\n    showBindingInLog(object, id) {\n      var binding;\n      // go through all bindings of the given object\n      for (var i = 0; i < this.__bindings[object.toHashCode()].length; i++) {\n        // the first array item is the id\n        if (this.__bindings[object.toHashCode()][i][0] == id) {\n          binding = this.__bindings[object.toHashCode()][i];\n          break;\n        }\n      }\n\n      if (binding === undefined) {\n        var message = \"Binding does not exist!\";\n      } else {\n        var message =\n          \"Binding from '\" +\n          binding[1] +\n          \"' (\" +\n          binding[2] +\n          \") to the object '\" +\n          binding[3] +\n          \"' (\" +\n          binding[4] +\n          \").\";\n      }\n\n      qx.log.Logger.debug(message);\n    },\n\n    /**\n     * Debug function which shows all bindings in the log console. To get only\n     * one binding in the console use {@link #showBindingInLog}\n     * @deprecated {6.0} qx.core.ObjectRegistry no longer stores most objects\n     */\n    showAllBindingsInLog() {\n      // go through all objects in the registry\n      for (var hash in this.__bindings) {\n        var object = qx.core.ObjectRegistry.fromHashCode(hash);\n        if (object) {\n          for (var i = 0; i < this.__bindings[hash].length; i++) {\n            this.showBindingInLog(object, this.__bindings[hash][i][0]);\n          }\n        }\n      }\n    }\n  }\n});\n"
  ]
}